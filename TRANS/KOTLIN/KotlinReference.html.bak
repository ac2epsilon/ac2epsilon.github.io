<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title></title>
  </head>
  <body>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h1 id="classes-and-inheritance" style="font-weight: 400; margin: 0px 0px 30px; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 30px; line-height: 33px; position: relative; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Classes
      and Inheritance<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#classes-and-inheritance"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h1>
    <h2 id="classes" style="font-weight: 400; margin: 0px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 27px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Classes<a
        class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#classes"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h2>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Classes
      in Kotlin are declared using the keyword<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">class</em>:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Invoice</span> {
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">The
      class declaration consists of the class name, the class header (specifying
      its type parameters, the primary constructor etc.) and the class body,
      surrounded by curly braces. Both the header and the body are optional; if
      the class has no body, curly braces can be omitted.</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Empty</span>
</code></pre>
    <h3 id="constructors" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Constructors<a
        class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#constructors"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">A
      class in Kotlin can have a<span>&nbsp;</span><strong style="font-weight: 700;">primary
        constructor</strong><span>&nbsp;</span>and one or more<span>&nbsp;</span><strong
        style="font-weight: 700;">secondary constructors</strong>. The primary
      constructor is part of the class header: it goes after the class name (and
      optional type parameters).</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Person</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">firstName</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>) {
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      the primary constructor does not have any annotations or visibility
      modifiers, the<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">constructor</em><span>&nbsp;</span>keyword
      can be omitted:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Person</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">firstName</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>) {
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">The
      primary constructor cannot contain any code. Initialization code can be
      placed in<span>&nbsp;</span><strong style="font-weight: 700;">initializer
        blocks</strong>, which are prefixed with the<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">init</em><span>&nbsp;</span>keyword:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Customer</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">name</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>) {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">init</span> {
        <span class="cm-variable" style="color: rgb(0, 0, 0);">logger</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">info</span>(<span class="cm-string"
style="color: rgb(0, 156, 0);">"Customer initialized with value ${name}"</span>)
    }
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Note
      that parameters of the primary constructor can be used in the initializer
      blocks. They can also be used in property initializers declared in the
      class body:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Customer</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">name</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>) {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">customerKey</span> <span class="cm-operator"
style="color: rgb(0, 0, 0);">=</span> <span class="cm-variable" style="color: rgb(0, 0, 0);">name</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">toUpperCase</span>()
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">In
      fact, for declaring properties and initializing them from the primary
      constructor, Kotlin has a concise syntax:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Person</span>(<span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span class="cm-def"
style="color: rgb(0, 0, 0);">firstName</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>, <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">lastName</span>: <span class="cm-variable-3"
style="color: rgb(0, 0, 0);">String</span>, <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">var</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">age</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span>) {
    <span class="cm-comment" style="color: gray;">// ...</span>
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Much
      the same way as regular properties, the properties declared in the primary
      constructor can be mutable (<em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">var</em>)
      or read-only (<em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">val</em>).</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      the constructor has annotations or visibility modifiers, the<span>&nbsp;</span><em
        class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">constructor</em><span>&nbsp;</span>keyword
      is required, and the modifiers go before it:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Customer</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">public</span> <span class="cm-variable"
style="color: rgb(0, 0, 0);">@Inject</span> <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">name</span>: <span class="cm-variable-3"
style="color: rgb(0, 0, 0);">String</span>) { ... }
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">For
      more details, see<span>&nbsp;</span><a href="https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors"
        style="color: rgb(73, 123, 183); text-decoration: underline;">Visibility
        Modifiers</a>.</p>
    <h4 id="secondary-constructors" style="font-weight: 700; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 20px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Secondary
      Constructors</h4>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">The
      class can also declare<span>&nbsp;</span><strong style="font-weight: 700;">secondary
        constructors</strong>, which are prefixed with<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">constructor</em>:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Person</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">parent</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Person</span>) {
        <span class="cm-variable" style="color: rgb(0, 0, 0);">parent</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">children</span>.<span class="cm-variable"
style="color: rgb(0, 0, 0);">add</span>(<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">this</span>)
    }
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      the class has a primary constructor, each secondary constructor needs to
      delegate to the primary constructor, either directly or indirectly through
      another secondary constructor(s). Delegation to another constructor of the
      same class is done using the<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">this</em><span>&nbsp;</span>keyword:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Person</span>(<span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span class="cm-def"
style="color: rgb(0, 0, 0);">name</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span>) {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">name</span>: <span class="cm-variable-3"
style="color: rgb(0, 0, 0);">String</span>, <span class="cm-variable" style="color: rgb(0, 0, 0);">parent</span>: <span
class="cm-variable" style="color: rgb(0, 0, 0);">Person</span>) : <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">this</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">name</span>) {
        <span class="cm-variable" style="color: rgb(0, 0, 0);">parent</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">children</span>.<span class="cm-variable"
style="color: rgb(0, 0, 0);">add</span>(<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">this</span>)
    }
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      a non-abstract class does not declare any constructors (primary or
      secondary), it will have a generated primary constructor with no
      arguments. The visibility of the constructor will be public. If you do not
      want your class to have a public constructor, you need to declare an empty
      primary constructor with non-default visibility:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">DontCreateMe</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">private</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span> () {
}
</code></pre>
    <blockquote class="info" style="margin: 0px 0px 15px; padding: 10px 20px; background-color: rgb(247, 247, 247); break-inside: avoid; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;">
      <p style="margin: 0px 0px 15px; line-height: 24px;"><strong style="font-weight: 700;">NOTE</strong>:
        On the JVM, if all of the parameters of the primary constructor have
        default values, the compiler will generate an additional parameterless
        constructor which will use the default values. This makes it easier to
        use Kotlin with libraries such as Jackson or JPA that create class
        instances through parameterless constructors.</p>
      <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px; background: rgb(247, 247, 247); display: block; color: rgb(0, 0, 0);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Customer</span>(<span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span class="cm-def"
style="color: rgb(0, 0, 0);">customerName</span>: <span class="cm-variable-3" style="color: rgb(0, 0, 0);">String</span> <span
class="cm-operator" style="color: rgb(0, 0, 0);">=</span> <span class="cm-string"
style="color: rgb(0, 156, 0);">""</span>)
</code></pre></blockquote>
    <h3 id="creating-instances-of-classes" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Creating
      instances of classes<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#creating-instances-of-classes"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">To
      create an instance of a class, we call the constructor as if it were a
      regular function:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">invoice</span> <span class="cm-operator"
style="color: rgb(0, 0, 0);">=</span> <span class="cm-variable" style="color: rgb(0, 0, 0);">Invoice</span>()

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">customer</span> <span class="cm-operator"
style="color: rgb(0, 0, 0);">=</span> <span class="cm-variable" style="color: rgb(0, 0, 0);">Customer</span>(<span
class="cm-string" style="color: rgb(0, 156, 0);">"Joe Smith"</span>)
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Note
      that Kotlin does not have a<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">new</em><span>&nbsp;</span>keyword.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Creating
      instances of nested, inner and anonymous inner classes is described in<span>&nbsp;</span><a
        href="https://kotlinlang.org/docs/reference/nested-classes.html" style="color: rgb(73, 123, 183); text-decoration: underline;">Nested
        classes</a>.</p>
    <h3 id="class-members" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Class
      Members<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#class-members"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Classes
      can contain:</p>
    <ul style="margin: 0px 0px 15px 30px; padding: 0px; list-style: none; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">
      <li style="margin: 0px 0px 7.5px; padding: 0px; list-style: none;"><a href="https://kotlinlang.org/docs/reference/classes.html#constructors"
          style="color: rgb(73, 123, 183); text-decoration: underline;">Constructors
          and initializer blocks</a></li>
      <li style="margin: 0px 0px 7.5px; padding: 0px; list-style: none;"><a href="https://kotlinlang.org/docs/reference/functions.html"
          style="color: rgb(73, 123, 183); text-decoration: underline;">Functions</a></li>
      <li style="margin: 0px 0px 7.5px; padding: 0px; list-style: none;"><a href="https://kotlinlang.org/docs/reference/properties.html"
          style="color: rgb(73, 123, 183); text-decoration: underline;">Properties</a></li>
      <li style="margin: 0px 0px 7.5px; padding: 0px; list-style: none;"><a href="https://kotlinlang.org/docs/reference/nested-classes.html"
          style="color: rgb(73, 123, 183); text-decoration: underline;">Nested
          and Inner Classes</a></li>
      <li style="margin: 0px; padding: 0px; list-style: none;"><a href="https://kotlinlang.org/docs/reference/object-declarations.html"
          style="color: rgb(73, 123, 183); text-decoration: underline;">Object
          Declarations</a></li>
    </ul>
    <h2 id="inheritance" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 27px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Inheritance<a
        class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#inheritance"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h2>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">All
      classes in Kotlin have a common superclass<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">Any</code>,
      that is a default super for a class with no supertypes declared:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Example</span> <span class="cm-comment"
style="color: gray;">// Implicitly inherits from Any</span>
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">Any</code><span>&nbsp;</span>is
      not<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">java.lang.Object</code>;
      in particular, it does not have any members other than<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">equals()</code>,<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">hashCode()</code><span>&nbsp;</span>and<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">toString()</code>.
      Please consult the<span>&nbsp;</span><a href="https://kotlinlang.org/docs/reference/java-interop.html#object-methods"
        style="color: rgb(73, 123, 183); text-decoration: underline;">Java
        interoperability</a><span>&nbsp;</span>section for more details.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">To
      declare an explicit supertype, we place the type after a colon in the
      class header:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Base</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">p</span>: <span class="cm-variable" style="color: rgb(0, 0, 0);">Int</span>)

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Derived</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">p</span>: <span class="cm-variable" style="color: rgb(0, 0, 0);">Int</span>) : <span
class="cm-variable" style="color: rgb(0, 0, 0);">Base</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">p</span>)
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      the class has a primary constructor, the base type can (and must) be
      initialized right there, using the parameters of the primary constructor.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      the class has no primary constructor, then each secondary constructor has
      to initialize the base type using the<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">super</em><span>&nbsp;</span>keyword,
      or to delegate to another constructor which does that. Note that in this
      case different secondary constructors can call different constructors of
      the base type:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">MyView</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">View</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">ctx</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Context</span>) : <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">ctx</span>)

    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">constructor</span>(<span
class="cm-variable" style="color: rgb(0, 0, 0);">ctx</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Context</span>, <span class="cm-variable" style="color: rgb(0, 0, 0);">attrs</span>: <span
class="cm-variable" style="color: rgb(0, 0, 0);">AttributeSet</span>) : <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">super</span>(<span class="cm-variable"
style="color: rgb(0, 0, 0);">ctx</span>, <span class="cm-variable" style="color: rgb(0, 0, 0);">attrs</span>)
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">The<span>&nbsp;</span><em
        class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">open</em><span>&nbsp;</span>annotation
      on a class is the opposite of Java's<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">final</em>:
      it allows others to inherit from this class. By default, all classes in
      Kotlin are final, which corresponds to<span>&nbsp;</span><a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html"
        style="color: rgb(73, 123, 183); text-decoration: underline;">Effective
        Java</a>, Item 17:<span>&nbsp;</span><em>Design and document for
        inheritance or else prohibit it</em>.</p>
    <h3 id="overriding-methods" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Overriding
      Methods<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#overriding-methods"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">As
      we mentioned before, we stick to making things explicit in Kotlin. And
      unlike Java, Kotlin requires explicit annotations for overridable members
      (we call them<span>&nbsp;</span><em>open</em>) and for overrides:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Base</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">v</span>() {}
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">nv</span>() {}
}
<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Derived</span>() : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Base</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">v</span>() {}
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">The<span>&nbsp;</span><em
        class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">override</em><span>&nbsp;</span>annotation
      is required for<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">Derived.v()</code>.
      If it were missing, the compiler would complain. If there is no<span>&nbsp;</span><em
        class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">open</em><span>&nbsp;</span>annotation
      on a function, like<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">Base.nv()</code>,
      declaring a method with the same signature in a subclass is illegal,
      either with<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">override</em><span>&nbsp;</span>or
      without it. In a final class (e.g. a class with no<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">open</em><span>&nbsp;</span>annotation),
      open members are prohibited.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">A
      member marked<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">override</em><span>&nbsp;</span>is
      itself open, i.e. it may be overridden in subclasses. If you want to
      prohibit re-overriding, use<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">final</em>:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">AnotherDerived</span>() : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Base</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">final</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">v</span>() {}
}
</code></pre>
    <h3 id="overriding-properties" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Overriding
      Properties<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#overriding-properties"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Overriding
      properties works in a similar way to overriding methods; properties
      declared on a superclass that are then redeclared on a derived class must
      be prefaced with<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">override</em>,
      and they must have a compatible type. Each declared property can be
      overridden by a property with an initializer or by a property with a
      getter method.</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Foo</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">x</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">get</span>() { ... }
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Bar1</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Foo</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">x</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-operator" style="color: rgb(0, 0, 0);">=</span> ...
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">You
      can also override a<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">val</code><span>&nbsp;</span>property
      with a<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">var</code><span>&nbsp;</span>property,
      but not vice versa. This is allowed because a<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">val</code><span>&nbsp;</span>property
      essentially declares a getter method, and overriding it as a<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">var</code><span>&nbsp;</span>additionally
      declares a setter method in the derived class.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Note
      that you can use the<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">override</em><span>&nbsp;</span>keyword
      as part of the property declaration in a primary constructor.</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">interface</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Foo</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">count</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span>
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Bar1</span>(<span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span class="cm-def"
style="color: rgb(0, 0, 0);">count</span>: <span class="cm-variable" style="color: rgb(0, 0, 0);">Int</span>) : <span
class="cm-variable" style="color: rgb(0, 0, 0);">Foo</span>

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Bar2</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Foo</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">var</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">count</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-operator" style="color: rgb(0, 0, 0);">=</span> <span
class="cm-number" style="color: rgb(0, 0, 255);">0</span>
}
</code></pre>
    <h3 id="calling-the-superclass-implementation" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Calling
      the superclass implementation<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#calling-the-superclass-implementation"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Code
      in a derived class can call its superclass functions and property
      accessors implementations using the<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">super</em><span>&nbsp;</span>keyword:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Foo</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() { <span class="cm-variable"
style="color: rgb(0, 0, 0);">println</span>(<span class="cm-string" style="color: rgb(0, 156, 0);">"Foo.f()"</span>) }
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">x</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">get</span>() <span
class="cm-operator" style="color: rgb(0, 0, 0);">=</span> <span class="cm-number"
style="color: rgb(0, 0, 255);">1</span>
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Bar</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Foo</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() { 
        <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">f</span>()
        <span class="cm-variable" style="color: rgb(0, 0, 0);">println</span>(<span
class="cm-string" style="color: rgb(0, 156, 0);">"Bar.f()"</span>) 
    }
    
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">x</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">get</span>() <span
class="cm-operator" style="color: rgb(0, 0, 0);">=</span> <span class="cm-keyword"
style="color: rgb(0, 55, 179); font-weight: 700;">super</span>.<span class="cm-variable"
style="color: rgb(0, 0, 0);">x</span> <span class="cm-operator" style="color: rgb(0, 0, 0);">+</span> <span
class="cm-number" style="color: rgb(0, 0, 255);">1</span>
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Inside
      an inner class, accessing the superclass of the outer class is done with
      the<span>&nbsp;</span><em class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">super</em><span>&nbsp;</span>keyword
      qualified with the outer class name:<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">super@Outer</code>:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Bar</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Foo</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() { <span class="cm-comment"
style="color: gray;">/* ... */</span> }
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">val</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">x</span>: <span class="cm-variable"
style="color: rgb(0, 0, 0);">Int</span> <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">get</span>() <span
class="cm-operator" style="color: rgb(0, 0, 0);">=</span> <span class="cm-number"
style="color: rgb(0, 0, 255);">0</span>
    
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">inner</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Baz</span> {
        <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">g</span>() {
            <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span><span
class="cm-variable" style="color: rgb(0, 0, 0);">@Bar</span>.<span class="cm-variable"
style="color: rgb(0, 0, 0);">f</span>() <span class="cm-comment" style="color: gray;">// Calls Foo's implementation of f()</span>
            <span class="cm-variable" style="color: rgb(0, 0, 0);">println</span>(<span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span><span
class="cm-variable" style="color: rgb(0, 0, 0);">@Bar</span>.<span class="cm-variable"
style="color: rgb(0, 0, 0);">x</span>) <span class="cm-comment" style="color: gray;">// Uses Foo's implementation of x's getter</span>
        }
    }
}
</code></pre>
    <h3 id="overriding-rules" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 19px; line-height: 22px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Overriding
      Rules<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#overriding-rules"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h3>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">In
      Kotlin, implementation inheritance is regulated by the following rule: if
      a class inherits many implementations of the same member from its
      immediate superclasses, it must override this member and provide its own
      implementation (perhaps, using one of the inherited ones). To denote the
      supertype from which the inherited implementation is taken, we use<span>&nbsp;</span><em
        class="keyword" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">super</em><span>&nbsp;</span>qualified
      by the supertype name in angle brackets, e.g.<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">super&lt;Base&gt;</code>:</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">A</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() { <span class="cm-variable"
style="color: rgb(0, 0, 0);">print</span>(<span class="cm-string" style="color: rgb(0, 156, 0);">"A"</span>) }
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">a</span>() { <span class="cm-variable"
style="color: rgb(0, 0, 0);">print</span>(<span class="cm-string" style="color: rgb(0, 156, 0);">"a"</span>) }
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">interface</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">B</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() { <span class="cm-variable"
style="color: rgb(0, 0, 0);">print</span>(<span class="cm-string" style="color: rgb(0, 156, 0);">"B"</span>) } <span
class="cm-comment" style="color: gray;">// interface members are 'open' by default</span>
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">b</span>() { <span class="cm-variable"
style="color: rgb(0, 0, 0);">print</span>(<span class="cm-string" style="color: rgb(0, 156, 0);">"b"</span>) }
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">C</span>() : <span class="cm-variable"
style="color: rgb(0, 0, 0);">A</span>(), <span class="cm-variable" style="color: rgb(0, 0, 0);">B</span> {
    <span class="cm-comment" style="color: gray;">// The compiler requires f() to be overridden:</span>
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() {
        <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span><span
class="cm-operator" style="color: rgb(0, 0, 0);">&lt;</span><span class="cm-variable"
style="color: rgb(0, 0, 0);">A</span><span class="cm-operator" style="color: rgb(0, 0, 0);">&gt;</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">f</span>() <span class="cm-comment"
style="color: gray;">// call to A.f()</span>
        <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">super</span><span
class="cm-operator" style="color: rgb(0, 0, 0);">&lt;</span><span class="cm-variable"
style="color: rgb(0, 0, 0);">B</span><span class="cm-operator" style="color: rgb(0, 0, 0);">&gt;</span>.<span
class="cm-variable" style="color: rgb(0, 0, 0);">f</span>() <span class="cm-comment"
style="color: gray;">// call to B.f()</span>
    }
}
</code></pre>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">It's
      fine to inherit from both<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">A</code><span>&nbsp;</span>and<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">B</code>,
      and we have no problems with<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">a()</code><span>&nbsp;</span>and<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">b()</code><span>&nbsp;</span>since<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">C</code><span>&nbsp;</span>inherits
      only one implementation of each of these functions. But for<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">f()</code><span>&nbsp;</span>we
      have two implementations inherited by<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">C</code>,
      and thus we have to override<span>&nbsp;</span><code style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">f()</code><span>&nbsp;</span>in<span>&nbsp;</span><code
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; padding: 0px 5px; border-radius: 4px; background-color: rgb(239, 239, 239);">C</code><span>&nbsp;</span>and
      provide our own implementation that eliminates the ambiguity.</p>
    <h2 id="abstract-classes" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 27px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Abstract
      Classes<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#abstract-classes"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h2>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">A
      class and some of its members may be declared<span>&nbsp;</span><em class="keyword"
        style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-style: normal; color: rgb(0, 0, 192);">abstract</em>.
      An abstract member does not have an implementation in its class. Note that
      we do not need to annotate an abstract class or function with open – it
      goes without saying.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">We
      can override a non-abstract open member with an abstract one</p>
    <pre style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 14px; margin: 0px 0px 15px; white-space: pre-wrap; word-wrap: break-word; line-height: 22px; break-inside: avoid; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"><code
class="code _highlighted cm-s-default" data-lang="text/x-kotlin" style="font-family: &quot;Liberation Mono&quot;, Consolas, Menlo, Courier, monospace; font-size: 1em; display: block; padding: 15px 20px; color: rgb(0, 0, 0); background: rgb(247, 247, 247);"><span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Base</span> {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">open</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>() {}
}

<span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">abstract</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">class</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">Derived</span> : <span class="cm-variable"
style="color: rgb(0, 0, 0);">Base</span>() {
    <span class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">override</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">abstract</span> <span
class="cm-keyword" style="color: rgb(0, 55, 179); font-weight: 700;">fun</span> <span
class="cm-def" style="color: rgb(0, 0, 0);">f</span>()
}
</code></pre>
    <h2 id="companion-objects" style="font-weight: 400; margin: 30px 0px 15px; position: relative; font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 27px; color: rgb(51, 51, 51); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Companion
      Objects<a class="anchor" href="https://kotlinlang.org/docs/reference/classes.html#companion-objects"
        style="color: rgb(73, 123, 183); text-decoration: none; position: relative; display: inline-block; top: 1px; padding: 5px 8px 0px;"></a></h2>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">In
      Kotlin, unlike Java or C#, classes do not have static methods. In most
      cases, it's recommended to simply use package-level functions instead.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">If
      you need to write a function that can be called without having a class
      instance but needs access to the internals of a class (for example, a
      factory method), you can write it as a member of an<span>&nbsp;</span><a href="https://kotlinlang.org/docs/reference/object-declarations.html"
        style="color: rgb(73, 123, 183); text-decoration: underline;">object
        declaration</a>inside that class.</p>
    <p style="margin: 0px 0px 15px; line-height: 24px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;">Even
      more specifically, if you declare a<span>&nbsp;</span><a href="https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects"
        style="color: rgb(73, 123, 183); text-decoration: underline;">companion
        object</a><span>&nbsp;</span>inside your class, you'll be able to call
      its members with the same syntax as calling static methods in Java/C#,
      using only the class name as a qualifier.</p>
    <p></p>
  </body>
</html>
