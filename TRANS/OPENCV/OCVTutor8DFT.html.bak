<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=utf-8" />
    <title>Дискретне перетворення Фур'є. Перекладено українською: Арсеній
      Чеботарьов, Ніжин 2015. ac2epsilon@gmail.com</title>
  </head>
  <body>
    <div class="related"><br />
    </div>
    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            <address>© Copyright 2011-2014, opencv dev team<br />
              Перекладено українською: Арсеній Чеботарьов, Ніжин 2015.
              ac2epsilon@gmail.com</address>
            <div class="section" id="discrete-fourier-transform"> <span id="discretfouriertransform"></span>
              <h1>Дискретне перетворення Фур'є<a class="headerlink" href="#discrete-fourier-transform"
                  title="Permalink to this headline"></a></h1>
              <div class="section" id="goal">
                <h2>Ціль<a class="headerlink" href="#goal" title="Permalink to this headline"><br />
                  </a></h2>
                <p>Ми шукаємо відповідь на наступні питання:</p>
                <div class="enumeratevisibleitemswithsquare container">
                  <ul class="simple">
                    <li>Що такое перетворення Фур'є, та як воно
                      використовується?</li>
                    <li>Як це зробити в OpenCV?</li>
                    <li>Використання функцій <a class="reference external" href="http://docs.opencv.org/modules/imgproc/doc/filtering.html#copymakeborder">copyMakeBorder()</a>,
                      <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#merge">merge()</a>,
                      <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#dft">dft()</a>,
                      <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#getoptimaldftsize">getOptimalDFTSize()</a>,
                      <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#log">log()</a>
                      and <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#normalize">normalize()</a>
                      .</li>
                  </ul>
                </div>
              </div>
              <div class="section" id="source-code">
                <h2>Код<a class="headerlink" href="#source-code" title="Permalink to this headline"><br />
                  </a></h2>
                <p>Ви можете <a class="reference download internal" href="../../../../_downloads/discrete_fourier_transform.cpp"><tt
                      class="xref download docutils literal"><span class="pre">заватажити
                        код звідси</span></tt></a> або знайти його в прикладах
                  the <tt class="file docutils literal"><span class="pre">samples/cpp/tutorial_code/core/discrete_fourier_transform/discrete_fourier_transform.cpp</span></tt>
                  з бібліотеки первинного коду OpenCV.</p>
                <p>Ось приклад використання <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#dft">dft()</a>
                  :</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre><span class="cp">#include "opencv2/core/core.hpp"</span>
<span class="cp">#include "opencv2/imgproc/imgproc.hpp"</span>
<span class="cp">#include "opencv2/highgui/highgui.hpp"</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span
class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span
class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span
class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span
class="n">filename</span> <span class="o">=</span> <span class="n">argc</span> <span
class="o">&gt;=</span><span class="mi">2</span> <span class="o">?</span> <span class="n">argv</span><span
class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span
class="s">"lena.jpg"</span><span class="p">;</span>

    <span class="n">Mat</span> <span class="n">I</span> <span class="o">=</span> <span
class="n">imread</span><span class="p">(</span><span class="n">filename</span><span
class="p">,</span> <span class="n">CV_LOAD_IMAGE_GRAYSCALE</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span
class="p">;</span>

    <span class="n">Mat</span> <span class="n">padded</span><span class="p">;</span>                            <span
class="c1">// Розтягуємо зображення до оптимального розміру</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span
class="n">getOptimalDFTSize</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">rows</span> <span class="p">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span
class="n">getOptimalDFTSize</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">cols</span> <span class="p">);</span> <span class="c1">  // потім додаємо нулі з краю</span>
    <span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">I</span><span
class="p">,</span> <span class="n">padded</span><span class="p">,</span> <span class="mi">0</span><span
class="p">,</span> <span class="n">m</span> <span class="o">-</span> <span class="n">I</span><span
class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="mi">0</span><span
class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">I</span><span
class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">BORDER_CONSTANT</span><span
class="p">,</span> <span class="n">Scalar</span><span class="o">::</span><span class="n">all</span><span
class="p">(</span><span class="mi">0</span><span class="p">));</span>

    <span class="n">Mat</span> <span class="n">planes</span><span class="p">[]</span> <span
class="o">=</span> <span class="p">{</span><span class="n">Mat_</span><span class="o">&lt;</span><span
class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span
class="n">padded</span><span class="p">),</span> <span class="n">Mat</span><span
class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">padded</span><span
class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">CV_32F</span><span
class="p">)};</span>
    <span class="n">Mat</span> <span class="n">complexI</span><span class="p">;</span>
    <span class="n">merge</span><span class="p">(</span><span class="n">planes</span><span
class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">complexI</span><span
class="p">);</span>         <span class="c1">// Додаємо до розтягнутого інший шар з нулями</span>

    <span class="n">dft</span><span class="p">(</span><span class="n">complexI</span><span
class="p">,</span> <span class="n">complexI</span><span class="p">);</span>            <span
class="c1">// результат розмістимо в тій же матриці</span>

    <span class="c1">// обчислюємо збільшення та переходимо до логатифмічнго маштабу</span>
    <span class="c1">// =&gt; log(1 + sqrt(Re(DFT(I))^2 + Im(DFT(I))^2))</span>
    <span class="n">split</span><span class="p">(</span><span class="n">complexI</span><span
class="p">,</span> <span class="n">planes</span><span class="p">);</span>                   <span
class="c1">// planes[0] = Re(DFT(I), planes[1] = Im(DFT(I))</span>
    <span class="n">magnitude</span><span class="p">(</span><span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="c1">// planes[0] = magnitude</span>
    <span class="n">Mat</span> <span class="n">magI</span> <span class="o">=</span> <span
class="n">planes</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

    <span class="n">magI</span> <span class="o">+=</span> <span class="n">Scalar</span><span
class="o">::</span><span class="n">all</span><span class="p">(</span><span class="mi">1</span><span
class="p">);</span>                    <span class="c1">// переходимо до логарифмічного маштабу</span>
    <span class="n">log</span><span class="p">(</span><span class="n">magI</span><span
class="p">,</span> <span class="n">magI</span><span class="p">);</span>

    <span class="c1">// обрізаємо спектр, якщо він має непарне число рядків або стовчиків</span>. -2 це 1111..1110
    <span class="n">magI</span> <span class="o">=</span> <span class="n">magI</span><span
class="p">(</span><span class="n">Rect</span><span class="p">(</span><span class="mi">0</span><span
class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">magI</span><span
class="p">.</span><span class="n">cols</span> <span class="o">&amp;</span> <span
class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">magI</span><span
class="p">.</span><span class="n">rows</span> <span class="o">&amp;</span> <span
class="o">-</span><span class="mi">2</span><span class="p">));</span>

    <span class="c1">// аранжуємо квадранти для зображення Фур'є, так що початок координат по центру</span>
    <span class="kt">int</span> <span class="n">cx</span> <span class="o">=</span> <span
class="n">magI</span><span class="p">.</span><span class="n">cols</span><span class="o">/</span><span
class="mi">2</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cy</span> <span class="o">=</span> <span
class="n">magI</span><span class="p">.</span><span class="n">rows</span><span class="o">/</span><span
class="mi">2</span><span class="p">;</span>

    <span class="n">Mat</span> <span class="n">q0</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>   <span
class="c1">// створюємо ROI для кожного квадранту LT = LeftT</span>op
    <span class="n">Mat</span> <span class="n">q1</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="n">cx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>  <span
class="c1">// RT</span> = RightTop
    <span class="n">Mat</span> <span class="n">q2</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="mi">0</span><span class="p">,</span> <span class="n">cy</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>  <span
class="c1">// LB = LeftBottom</span>
    <span class="n">Mat</span> <span class="n">q3</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span> <span
class="c1">// RB = RightBottom</span>

    <span class="n">Mat</span> <span class="n">tmp</span><span class="p">;</span>                           <span
class="c1">// обмінюємо LT RB</span>
    <span class="n">q0</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">tmp</span><span class="p">);</span>
    <span class="n">q3</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q0</span><span class="p">);</span>
    <span class="n">tmp</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q3</span><span class="p">);</span>

    <span class="n">q1</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">tmp</span><span class="p">);</span>                    <span
class="c1">// обмінюємо RT LB</span>
    <span class="n">q2</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q1</span><span class="p">);</span>
    <span class="n">tmp</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q2</span><span class="p">);</span>

    <span class="n">normalize</span><span class="p">(</span><span class="n">magI</span><span
class="p">,</span> <span class="n">magI</span><span class="p">,</span> <span class="mi">0</span><span
class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">CV_MINMAX</span><span
class="p">);</span> <span class="c1">// Перетворюємо матрицю плаваючого типу в графічну форму</span>
                                            <span class="c1">// (плаваючі значення між 0 та 1).</span>

    <span class="n">imshow</span><span class="p">(</span><span class="s">"Input Image"</span>       <span
class="p">,</span> <span class="n">I</span>   <span class="p">);</span>    <span
class="c1">// Показуємо результат</span>
    <span class="n">imshow</span><span class="p">(</span><span class="s">"spectrum magnitude"</span><span
class="p">,</span> <span class="n">magI</span><span class="p">);</span>
    <span class="n">waitKey</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="section" id="explanation">
                <h2>Пояснення<a class="headerlink" href="#explanation" title="Permalink to this headline"><br />
                  </a></h2>
                <p>Перетворення Фур'є декомпонує зображення в компоненти сінуса
                  та косінуса. Іншими словами воно перетворює зображення з
                  об'ємного на хвильовий вигляд. Ідея полягає в тому, що кожна
                  функція може бути бут апроксимована послідовністю синусів та
                  косинусів (<em>з різними коефіцієнтами для різних частот</em>.<em>
                    прим. перекл.</em>). Трансформація (або перетворення) Фур'є
                  - це шлях як це зробити. Математично для двовимірних зображень
                  перетворення Фур'є виглядає так:</p>
                <img src="dft1.png" alt="Фур'є для двох вимірів" />
                <div class="math">
                  <p><img src="../../../../_images/math/70d43ce5d2851a0631210091738e3568bab82dea.png"
                      alt="F(k,l) = \displaystyle\sum\limits_{i=0}^{N-1}\sum\limits_{j=0}^{N-1} f(i,j)e^{-i2\pi(\frac{ki}{N}+\frac{lj}{N})} e^{ix} = \cos{x} + i\sin {x}" /></p>
                </div>
                <p>Тут f є значенням зображення в просторі, та F в хвильовій
                  формі. Результатом перетворення є комплексні числа. Відтворити
                  це можна через два зображення, для <em>дійсної</em>
                  та <em>комплексної частини,</em> або через зображення <em>аплітуди</em>
                  та <em>фази</em>. Однак алгоритми обробки зображень є тільки
                  алгоритмами амплітуди, бо вона містить всю цікаву для нас
                  інформацію щодо геометричної структури зображення. Тим не
                  менш, якщо ви збираєтесь робити модифікації зображення в цій
                  формі, та потім вам треба ретрансформувати, вам знадобиться
                  зберігати обоє частини.</p>
                <p>В цьому прикладі ми покажемо, як обчислити та відобразити
                  зображення <em>амплітуди</em> перетворення Фур'є. В випадку
                  цифрових зображень воно є дискретним. Це означає, що вони можуть
                  приймати значення з деякого набору значень. Наприклад, для
                  типових сірих зображень значення від нуля до 255. Таким чином,
                  перетворення також потребує дескретний тип, що даватиме
                  Дискретне перетворення Фур'є (<em>DFT</em>). Ви потребуєте
                  використовувати це, коли вам треба визначити структуру
                  забраження з геометричної точки зору. Ось кроки, яким треба
                  слідувати (вважаючи, що на вході зображення з відтінків сірого
                  <em>I</em>):</p>
                <ol class="arabic">
                  <li>
                    <p class="first"><strong>Розширити зображення до
                        оптимального розміру</strong>.
                      Продуктивність DFT залежить від розміру зображення. Є
                      схильність до того, що найкраща продуктивність трапляється
                      для зображень, що є множниками двох, трьох, або п'яти.
                      Таким чином для отримання максимальної продуктивності
                      взагалі є гарною ідеєю підлаштувати границі зображення,
                      щоб отримати розмір, що задовільняє цім умовам. Функція <a
                        class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#getoptimaldftsize">getOptimalDFTSize()</a>
                      повертає оптимальний розмір, та ви можете використовувати
                      функцію  <a class="reference external" href="http://docs.opencv.org/modules/imgproc/doc/filtering.html#copymakeborder">copyMakeBorder()</a>
                      для проширення границь зображення:</p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">Mat</span> <span class="n">padded</span><span
class="p">;</span>                            <span class="c1">// </span><span class="c1">Розтягуємо зображення до оптимального розміру</span>
<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span
class="n">getOptimalDFTSize</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">rows</span> <span class="p">);</span>
<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span
class="n">getOptimalDFTSize</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">cols</span> <span class="p">);</span> <span class="c1">  // </span><span
class="c1">потім додаємо нулі з краю</span>
<span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">I</span><span
class="p">,</span> <span class="n">padded</span><span class="p">,</span> <span class="mi">0</span><span
class="p">,</span> <span class="n">m</span> <span class="o">-</span> <span class="n">I</span><span
class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="mi">0</span><span
class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">I</span><span
class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">BORDER_CONSTANT</span><span
class="p">,</span> <span class="n">Scalar</span><span class="o">::</span><span class="n">all</span><span
class="p">(</span><span class="mi">0</span><span class="p">));</span>
</pre></div>
                    </div>
                    <p>Додані пікселі ініціалізовані нулями. </p>
                  </li>
                  <li>
                    <p class="first"><strong>Створюємо місце для комплексних та
                        дійсних значень</strong>. Результат трансформації буде
                      комплексним. Це означає, що для кожного значення
                      зображення буде створено два значення зображення (по
                      одному для кожного компонента).
                      Більше того, диапазон частотного представлення значно
                      ширший, ніж геометричний вигляд. Таким чином, ми
                      зберігаємо їх щонайменьше в <em>плаваючому </em>форамті.
                      Таким чином, ми будемо конвертувати наше вхідне зображення
                      до цього типу, та розширяти його додатковим каналом, щоб
                      містити комплексні значення:</p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">Mat</span> <span class="n">planes</span><span
class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="n">Mat_</span><span
class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span
class="p">(</span><span class="n">padded</span><span class="p">),</span> <span class="n">Mat</span><span
class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">padded</span><span
class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">CV_32F</span><span
class="p">)};</span>
<span class="n">Mat</span> <span class="n">complexI</span><span class="p">;</span>
<span class="n">merge</span><span class="p">(</span><span class="n">planes</span><span
class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">complexI</span><span
class="p">);</span>         <span class="c1">// </span><span class="c1">Додаємо до розтягнутого інший шар з нулями</span>
</pre></div>
                    </div>
                  </li>
                  <li>
                    <p class="first"><strong>Виконуємо дескритне перетворення Фур'є</strong>.
                      Можливо виконати обчислення в тій же матриці, що і вхідна:</p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">dft</span><span class="p">(</span><span
class="n">complexI</span><span class="p">,</span> <span class="n">complexI</span><span
class="p">);</span>
</pre></div>
                    </div>
                  </li>
                  <li>
                    <p class="first"><strong>Трансформуємо дійсну та комплексну
                        значення до амплітуди</strong>. Комплексне число має
                      дійсну (<em>Re</em>) та комплексну (imaginary - <em>Im</em>)
                      частини. Результат DFT є комплексними числами. Амплітуда
                      обчислюється так: </p>
                    <div class="math">
                      <p><img src="../../../../_images/math/6b6413b7ca082c885951b13fd3e4e9b65b9c1090.png"
                          alt="M = \sqrt[2]{ {Re(DFT(I))}^2 + {Im(DFT(I))}^2}" /><img
                          src="file:///home/TRANS/OPENCV/dft2.png" alt="" /></p>
                    </div>
                    <p>Переводячи в код OpenCV: </p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">split</span><span class="p">(</span><span
class="n">complexI</span><span class="p">,</span> <span class="n">planes</span><span
class="p">);</span>                   <span class="c1">	// planes[0] = Re(DFT(I), planes[1] = Im(DFT(I))</span>
<span class="n">magnitude</span><span class="p">(</span><span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="c1">	// planes[0] = magnitude</span>
<span class="n">Mat</span> <span class="n">magI</span> <span class="o">=</span> <span
class="n">planes</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</pre></div>
                    </div>
                  </li>
                  <li>
                    <p class="first"><strong>Переходячи в логарифмічні
                        координати</strong>.
                      Виявляється, що динамічний диапазон коефіціентів Фур'є
                      душе широкий для того, щоб відображатись на екрані. Ми
                      маємо деякі малі, та деякі великі значення, що ми не
                      можемо дослідити таким чином. Тобто завеликі значення
                      будуть далеко за межами білого, тоді як малі будуть "<em>дуже
                        чорними</em>". Щоб використовувати сірі відтінки для
                      візуалізації, ми трансформуємо лінійні значення в
                      логарифмічну шкалу: </p>
                    <pre><img src="file:///home/TRANS/OPENCV/dft3.png" alt="" /></pre>
                    <div class="math">
                      <p><img src="../../../../_images/math/d40c14541671ea463d45144c128447f87e2ad11d.png"
                          alt="M_1 = \log{(1 + M)}" /></p>
                    </div>
                    <p>В коді OpenCV:</p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">magI</span> <span class="o">+=</span> <span
class="n">Scalar</span><span class="o">::</span><span class="n">all</span><span
class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="n">log</span><span class="p">(</span><span class="n">magI</span><span
class="p">,</span> <span class="n">magI</span><span class="p">);</span>
</pre></div>
                    </div>
                  </li>
                  <li>
                    <p class="first"><strong>Обрізати та аранжувати</strong>. На
                      першому кроці ми розширювали зображення. Тепер прийшов час
                      видалити ці значення. Для цілей візуалізації ми також
                      можемо аранжувати квадранти результату, так що початок
                      координат (нуль), відповідатиме центу зображення.</p>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">magI</span> <span class="o">=</span> <span
class="n">magI</span><span class="p">(</span><span class="n">Rect</span><span class="p">(</span><span
class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span
class="n">magI</span><span class="p">.</span><span class="n">cols</span> <span class="o">&amp;</span> <span
class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">magI</span><span
class="p">.</span><span class="n">rows</span> <span class="o">&amp;</span> <span
class="o">-</span><span class="mi">2</span><span class="p">));</span>
<span class="kt">int</span> <span class="n">cx</span> <span class="o">=</span> <span
class="n">magI</span><span class="p">.</span><span class="n">cols</span><span class="o">/</span><span
class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">cy</span> <span class="o">=</span> <span
class="n">magI</span><span class="p">.</span><span class="n">rows</span><span class="o">/</span><span
class="mi">2</span><span class="p">;</span>

<span class="n">Mat</span> <span class="nf">q0</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>
<span class="n">Mat</span> <span class="nf">q1</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="n">cx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>
<span class="n">Mat</span> <span class="nf">q2</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="mi">0</span><span class="p">,</span> <span class="n">cy</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>
<span class="n">Mat</span> <span class="nf">q3</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">,</span> <span
class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">));</span>

<span class="n">Mat</span> <span class="n">tmp</span><span class="p">;</span>
<span class="n">q0</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">tmp</span><span class="p">);</span>
<span class="n">q3</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q0</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q3</span><span class="p">);</span>

<span class="n">q1</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">tmp</span><span class="p">);</span>
<span class="n">q2</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q1</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="n">copyTo</span><span
class="p">(</span><span class="n">q2</span><span class="p">);</span>
</pre></div>
                    </div>
                  </li>
                  <li>
                    <p class="first"><strong>Нормалізація</strong>. Все це зроблене
                      для візуалізації. Тепер ми маємо амплітуди, однак ми все
                      ще за межами диапазонів візуалізації від нуля до одного.
                      Ми нормалізували We normalize our values to this range
                      using the <a class="reference external" href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#normalize">normalize()</a>
                      function.</p>
                  </li>
                </ol>
                <blockquote>
                  <div>
                    <div class="highlight-cpp">
                      <div class="highlight">
                        <pre><span class="n">normalize</span><span class="p">(</span><span
class="n">magI</span><span class="p">,</span> <span class="n">magI</span><span class="p">,</span> <span
class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span
class="n">CV_MINMAX</span><span class="p">);</span>

</pre></div>
                    </div>
                  </div>
                </blockquote>
              </div>
              <div class="section" id="result">
                <h2>Результат<a class="headerlink" href="#result" title="Permalink to this headline"><br />
                  </a></h2>
                <p>An application idea would be to determine the geometrical
                  orientation present in the image. For example, let us find out
                  if a text is horizontal or not? Looking at some text you’ll
                  notice that the text lines sort of form also horizontal lines
                  and the letters form sort of vertical lines. These two main
                  components of a text snippet may be also seen in case of the
                  Fourier transform. Let us use <a class="reference download internal"
                    href="../../../../_downloads/imageTextN.png"><tt class="xref download docutils literal"><span
                        class="pre">this</span> <span class="pre">horizontal</span></tt></a>
                  and <a class="reference download internal" href="../../../../_downloads/imageTextR.png"><tt
                      class="xref download docutils literal"><span class="pre">this</span>
                      <span class="pre">rotated</span></tt></a> image about a
                  text.</p>
                <p>In case of the horizontal text:</p>
                <img alt="In case of normal text" class="align-center" src="../../../../_images/result_normal.jpg" />
                <p>In case of a rotated text:</p>
                <img alt="In case of rotated text" class="align-center" src="../../../../_images/result_rotated.jpg" />
                <p>You can see that the most influential components of the
                  frequency domain (brightest dots on the magnitude image)
                  follow the geometric rotation of objects on the image. From
                  this we may calculate the offset and perform an image rotation
                  to correct eventual miss alignments.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
