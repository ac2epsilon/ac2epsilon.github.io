<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=utf-8" />
    <title>Взаємодія з OpenCV 1. Перекладено українською: Арсеній Чеботарьов,
      Ніжин 2015. ac2epsilon@gmail.com</title>
  </head>
  <body>
    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            <address>© Copyright 2011-2014, opencv dev team<br />
              Перекладено українською: Арсеній Чеботарьов, Ніжин 2015.
              ac2epsilon@gmail.com</address>
            <div class="section" id="interoperability-with-opencv-1"> <span id="interoperabilitywithopencv1"></span>
              <h1>Взаємодія з OpenCV 1<a class="headerlink" href="#interoperability-with-opencv-1"
                  title="Permalink to this headline"> <br />
                </a></h1>
              <div class="section" id="goal">
                <h2>Ціль<a class="headerlink" href="#goal" title="Permalink to this headline"><br />
                  </a></h2>
                <p>Для команди розробників OpenCV важливо послдовно розоробляти
                  бібліотеку. Ми постійно думаємо, щоб ваша робота прогресувала,
                  і при тому підтримувати гнучкість бібліокеки. Новий інтерфейс
                  C++ надає нові цілі цьому напрямку. Тим не менше, зворотня
                  сумісність також є важливою. Ми не бажаємо руйнувати ваш код,
                  написаний для попередноьої версії бібліотеки OpenCV. Ми додали
                  деякі функції, що допомагають в цьому. Ми вивчимо наступне:</p>
                <div class="enumeratevisibleitemswithsquare container">
                  <ul class="simple">
                    <li>Що змінилося в версії 2 OpenCV щодо того, як в
                      використовуєте бібліотеку, в порівнянні з попередньою
                      версією</li>
                    <li>Як додати гаусівський шум до зображення</li>
                    <li>Що таке таблиці пошуку та чому ми використовуємо їх?</li>
                  </ul>
                </div>
              </div>
              <div class="section" id="general">
                <h2>Загал<a class="headerlink" href="#general" title="Permalink to this headline"><br />
                  </a></h2>
                <p>Коли ви переходите на нову версію, перше, що вам треба знати,
                  це нові структури даних для зображень: <a class="reference internal"
                    href="OCVTutor1Mat.html"><em>Mat - базовий контейнер
                      зображень</em></a>, вона заміщує старі <em>CvMat</em> та
                  <em>IplImage</em>. Перехід до нових функцій простіший. Вам
                  треба запам'ятати тільки декілька нових речей.</p>
                <p>OpenCV 2 отримала реорганізацію. Тепер не всі функції
                  складені в одну бібліотеку. Ми маємо багато модулів, кожний з
                  яких містить структури даних та функцій, що відносяться до
                  певних завдань. Таким чином вам не треба розповсюджувати
                  велику бібліотеку, якщо вам треба тільки підмножина OpenCV. Це
                  означає, що вам треба вставляти тільки ті заголовки, що будуть
                  використовуватись. Наприклад:</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
<span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
<span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</pre></div>
                </div>
                <p>Весь крам, що відноситься до OpenCV, покладений в простір
                  імен <em>cv, </em>щоб запобігти конфліктам імен структур та
                  функцій з інших бібліотек. Таким чином, ви можете або
                  вказувати <em>cv::</em> перед усім, що іде від OpenCV, або після
                  include просто додайте директиву використання простору імен (<em>деякі
                    досвідчені розробники вставляють цей імпорт в саму фукнцію,
                    таким чином обмежуючи область її дії, та роблячи код більш
                    гранулярним. прим. перекл.</em>):</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="k">using</span> <span class="k">namespace</span> <span
class="n">cv</span><span class="p">;</span>  <span class="c1">// Новий C++ API в цьому просторі імен</span>
</pre></div>
                </div>
                <p>Оскільки фукнції завжди в просторі імен, немає потреби
                  додавати <em>cv</em> до імен. Як такі, всі нові сумісні з C++
                  не мають цьго префіксу, та слідують правилу "верблюжих" імен.
                  Це означає, що перша літера мала (якщо це не ім'я, як Canny),
                  та послідовні слова починаються з великої літери (як <em>copyMakeBorder</em>).</p>
                <p>Тепер запам'ятайте, що вам треба злінкувати з вашим
                  застосунком всі модулі, що використовуються, та, в випадку,
                  коли ви під Windows, що використовує <em>DLL</em>, вам також
                  треба додати шлях до всіх двійкових бібліотек. Для більш
                  заглибленої інформації щодо  Windows читайте <a class="reference internal"
                    href="../../introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#windows-visual-studio-how-to"><em>Як
                      побудувати застосунки OpenCV в Microsoft Visual Studio</em></a>.
                  Для Linux приклад використання пояснюється в <a class="reference internal"
                    href="../../introduction/linux_eclipse/linux_eclipse.html#linux-eclipse-usage"><em>Використання
                      OpenCV з Eclipse (плагін CDT)</em></a>.</p>
                <p>Тепер для конвертації об'єкту <em>Mat</em> ви можете
                  використовувати оператори або <em>IplImage</em>, або <em>CvMat</em>.
                  В інтерфейсі C ми використовували вказівники, але це вже в
                  минулому. В інтерфейсі C++ ми маємо здебільшого об'єкти <em>Mat</em>.
                  Ці об'єкти можуть бути вільно конвертовані або в <em>IplImage</em>,
                  або в <em>CvMat</em>, за допомогою простого присвоювання.
                  Наприклад:</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="n">Mat</span> <span class="n">I</span><span
class="p">;</span>
<span class="n">IplImage</span> <span class="n">pI</span> <span class="o">=</span> <span
class="n">I</span><span class="p">;</span>
<span class="n">CvMat</span>    <span class="n">mI</span> <span class="o">=</span> <span
class="n">I</span><span class="p">;</span>
</pre></div>
                </div>
                <p>Тепер, коли ви бажаєте вказівники, конвертація тільки трохи
                  складніша. Компілятори більше не можуть автоматично визначити,
                  що ви бажаєте, так що вам треба визначити це особисто. Це
                  означає викликати оператори <em>IplImage</em> та <em>CvMat</em>,
                  та потім отримати їх вказівники. Для отримання вказівника ми
                  використовуємо знак &amp;:</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="n">Mat</span> <span class="n">I</span><span
class="p">;</span>
<span class="n">IplImage</span><span class="o">*</span> <span class="n">pI</span>     <span
class="o">=</span> <span class="o">&amp;</span><span class="n">I</span><span class="p">.</span><span
class="k">operator</span> <span class="n">IplImage</span><span class="p">();</span>
<span class="n">CvMat</span><span class="o">*</span> <span class="n">mI</span>        <span
class="o">=</span>  <span class="o">&amp;</span><span class="n">I</span><span class="p">.</span><span
class="k">operator</span> <span class="n">CvMat</span><span class="p">();</span>
</pre></div>
                </div>
                <p>Одне з найбільших зауважень до інтерфейсу C в тому, що він
                  покладає керування пам'яттю на вас. Вам треба зрозуміти, коли
                  безпечно вивільнити вашу невикористовані об'єкти перед
                  закінченням програми, та ви можете отримати утічку пам'яті, що
                  спричинить пробеми. Щоб подолати це, OpenCV
                  ввели свого роду розумні вказівники. Вони будуть автоматично
                  вивільняти об'єкт, коли він більше не використовується. Щоб
                  використати це, задекларуйте вказівники як спеціфікацію <em>Ptr</em>
                  :</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="n">Ptr</span><span class="o">&lt;</span><span
class="n">IplImage</span><span class="o">&gt;</span> <span class="n">piI</span> <span
class="o">=</span> <span class="o">&amp;</span><span class="n">I</span><span class="p">.</span><span
class="k">operator</span> <span class="n">IplImage</span><span class="p">();</span>
</pre></div>
                </div>
                <p>Конвертація структур даних з C в <em>Mat</em> виконується
                  передачею ції структур в конструктор . Наприклад:</p>
                <div class="highlight-cpp">
                  <div class="highlight">
                    <pre><span class="n">Mat</span> <span class="n">K</span><span
class="p">(</span><span class="n">piL</span><span class="p">),</span> <span class="n">L</span><span
class="p">;</span>
<span class="n">L</span> <span class="o">=</span> <span class="n">Mat</span><span
class="p">(</span><span class="n">pI</span><span class="p">);</span>
</pre></div>
                </div>
              </div>
              <div class="section" id="a-case-study">
                <h2>Навчальне завдання<a class="headerlink" href="#a-case-study"
                    title="Permalink to this headline"><br />
                  </a></h2>
                <p>Тепер, коли ми маємо базові знання, наступний приклад змішує
                  використання інтерфейсу C з кодом C++. Ви можете знайти код в
                  прикладах OpenCV, але краще відновіть його власними силами.
                  Щоб краще побачити різницю програми підтримують два режими:
                  один змішаний C та C++, та один на чистому C++. Якщо ви
                  визначите <em>DEMO_MIXED_API_USE</em>, ви будете
                  використовувати перший режим. Програма розділяє кольорові
                  площини, робить деякі модифікації з ними, та в кінці знову зливає
                  їх разом.</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>

<span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
<span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
<span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span
class="p">;</span><span class="c1"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span
class="p">;</span>
<span class="cp">#define DEMO_MIXED_API_USE</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span
class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span
class="kt">char</span><span class="o">**</span> <span class="n">argv</span> <span
class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span
class="n">imagename</span> <span class="o">=</span> <span class="n">argc</span> <span
class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">argv</span><span
class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span
class="s">"lena.jpg"</span><span class="p">;</span>

<span class="cp">#ifdef DEMO_MIXED_API_USE</span>
    <span class="n">Ptr</span><span class="o">&lt;</span><span class="n">IplImage</span><span
class="o">&gt;</span> <span class="n">IplI</span> <span class="o">=</span> <span
class="n">cvLoadImage</span><span class="p">(</span><span class="n">imagename</span><span
class="p">);</span> <span class="c1">// Ptr&lt;T&gt; є безпеним "розумним" вказівником</span>
    <span class="k">if</span><span class="p">(</span><span class="n">IplI</span><span
class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Не можу завантажити зображення "</span> <span
class="o">&lt;&lt;</span>  <span class="n">imagename</span> <span class="o">&lt;&lt;</span> <span
class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span
class="p">;</span>
    <span class="p">}</span>
    <span class="n">Mat</span> <span class="n">I</span><span class="p">(</span><span
class="n">IplI</span><span class="p">);</span> <span class="c1">// Конверт в новий контейнер, створюється тільки заголовок, дані старі.</span>
<span class="cp">#else</span>
    <span class="n">Mat</span> <span class="n">I</span> <span class="o">=</span> <span
class="n">imread</span><span class="p">(</span><span class="n">imagename</span><span
class="p">); </span><span class="c1">// новіша альтернатива cvLoadImage, в стилі MATLAB</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">I</span><span
class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">) </span><span
class="c1">// те ж, що й if( !I.data )</span>
    <span class="p">{</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Не можу завантажити зображення "</span> <span
class="o">&lt;&lt;</span>  <span class="n">imagename</span> <span class="o">&lt;&lt;</span> <span
class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span
class="p">;</span>
    <span class="p">}</span>
<span class="cp">#endif</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <p>Тут ми можемо дослідити, що з новою структурою ми не маємо
                  проблем з вказівниками, хоча є змога використовувати старі
                  функції, та тільки в кінці перетворити це на об'єкт <em>Mat</em>.</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre>1
2
3
4
5
6</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre>    <span class="c1">// перетворюємо зображення в простір кольорів YUV. Вихідне зображенн буде створено автоматично.</span>
    <span class="n">Mat</span> <span class="n">I_YUV</span><span class="p">;</span>
    <span class="n">cvtColor</span><span class="p">(</span><span class="n">I</span><span
class="p">,</span> <span class="n">I_YUV</span><span class="p">,</span> <span class="n">COLOR_BGR2YCrCb</span><span
class="p">);</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">Mat</span><span
class="o">&gt;</span> <span class="n">planes</span><span class="p">;</span>    <span
class="c1">// Використовуємо структуру векторів STL для Mat о'бєктів</span>
    <span class="n">split</span><span class="p">(</span><span class="n">I_YUV</span><span
class="p">,</span> <span class="n">planes</span><span class="p">);</span>  <span
class="c1">// розділяємо зображення на площини кольорів (Y U V)</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <p>Оскільки ми бажаємо погратись з компонентою свічення, спершу
                  ми конвертуємо з звичайного RGB в простір імен YUV, та потім
                  розділяємо результат на окремі площини. Тут код розділяється:
                  в першому прикладі кода площина обробляється окремо,
                  використовуючи одну з трьох головних алгоритмів сканування
                  зображення в  OpenCV (оператор C [], ітерація, доступ до
                  окремих елементів). В другому варіанті ми додаємо до
                  зображення деякий гаусівській шум, та потім змішуємо разом
                  канали по деякій відомій формулі.</p>
                <p>Версія сканування виглядає так:</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre>    <span class="c1">// Метод 1. обробка площини Y з використанням ітератора</span>
    <span class="n">MatIterator_</span><span class="o">&lt;</span><span class="n">uchar</span><span
class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">begin</span><span
class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span
class="p">(),</span> <span class="n">it_end</span> <span class="o">=</span> <span
class="n">planes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span
class="n">end</span><span class="o">&lt;</span><span class="n">uchar</span><span
class="o">&gt;</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(;</span> <span class="n">it</span> <span
class="o">!=</span> <span class="n">it_end</span><span class="p">;</span> <span
class="o">++</span><span class="n">it</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">double</span> <span class="n">v</span> <span class="o">=</span> <span
class="o">*</span><span class="n">it</span> <span class="o">*</span> <span class="mf">1.7</span> <span
class="o">+</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span
class="mi">21</span> <span class="o">-</span> <span class="mi">10</span><span class="p">;</span>
        <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span
class="n">saturate_cast</span><span class="o">&lt;</span><span class="n">uchar</span><span
class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="o">*</span><span
class="n">v</span><span class="o">/</span><span class="mi">255</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span
class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span
class="n">y</span> <span class="o">&lt;</span> <span class="n">I_YUV</span><span
class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">y</span><span
class="o">++</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Метод 2. обробка першого хромо-плану використовуючи вказівники</span>
        <span class="n">uchar</span><span class="o">*</span> <span class="n">Uptr</span> <span
class="o">=</span> <span class="n">planes</span><span class="p">[</span><span class="mi">1</span><span
class="p">].</span><span class="n">ptr</span><span class="o">&lt;</span><span class="n">uchar</span><span
class="o">&gt;</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span
class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span
class="n">x</span> <span class="o">&lt;</span> <span class="n">I_YUV</span><span
class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">x</span><span
class="o">++</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Uptr</span><span class="p">[</span><span class="n">x</span><span
class="p">]</span> <span class="o">=</span> <span class="n">saturate_cast</span><span
class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span
class="p">((</span><span class="n">Uptr</span><span class="p">[</span><span class="n">x</span><span
class="p">]</span><span class="o">-</span><span class="mi">128</span><span class="p">)</span><span
class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">128</span><span
class="p">);</span>

            <span class="c1">// Метод 3. обробка другого хромо-плану за допомогою персонально доступу</span>
            <span class="n">uchar</span><span class="o">&amp;</span> <span class="n">Vxy</span> <span
class="o">=</span> <span class="n">planes</span><span class="p">[</span><span class="mi">2</span><span
class="p">].</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span
class="o">&gt;</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span
class="n">x</span><span class="p">);</span>
            <span class="n">Vxy</span> <span class="o">=</span>        <span class="n">saturate_cast</span><span
class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span
class="p">((</span><span class="n">Vxy</span><span class="o">-</span><span class="mi">128</span><span
class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span
class="mi">128</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <p>Тут ви можете бачити, що ми можемо пройти по всіх пікселях
                  зображення в три методи: ітератор, вказівник  C та стиль
                  індивідуального доступу. Ви можете прочитати про це більш
                  докладно <a class="reference internal" href="OCVTutor2ScanImages.html"><em>Як
                      сканувати зображення в OpenCV</em></a>. Конвертація зі
                  старих імен функцій проста. Тільки не пишіть cv, та
                  використовуйте нову структуру даних <em>Mat</em>. Ось приклад
                  використання фукнції додавання з вагами:</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre>    <span class="n">Mat</span> <span class="nf">noisyI</span><span
class="p">(</span><span class="n">I</span><span class="p">.</span><span class="n">size</span><span
class="p">(),</span> <span class="n">CV_8U</span><span class="p">);</span>           <span
class="c1">// створюємо матрицю потрібного типу</span>

    <span class="c1">// Заповнюємо випадковими значеннями з нормалоним розподілення</span>м
    <span class="c1">// Також є randu() для генерації рівномірно розподілених випадкових значень</span>
    <span class="n">randn</span><span class="p">(</span><span class="n">noisyI</span><span
class="p">,</span> <span class="n">Scalar</span><span class="o">::</span><span class="n">all</span><span
class="p">(</span><span class="mi">128</span><span class="p">),</span> <span class="n">Scalar</span><span
class="o">::</span><span class="n">all</span><span class="p">(</span><span class="mi">20</span><span
class="p">));</span>

    <span class="c1">// розмиття noisyI, ядро 3x3 обоє сігма to 0.5</span>
    <span class="n">GaussianBlur</span><span class="p">(</span><span class="n">noisyI</span><span
class="p">,</span> <span class="n">noisyI</span><span class="p">,</span> <span class="n">Size</span><span
class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span
class="p">),</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span
class="p">);</span>

    <span class="k">const</span> <span class="kt">double</span> <span class="n">brightness_gain</span> <span
class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">double</span> <span class="n">contrast_gain</span> <span
class="o">=</span> <span class="mf">1.7</span><span class="p">;</span>

<span class="cp">#ifdef DEMO_MIXED_API_USE</span>
    <span class="c1">// щоб передати нові матриці в функції що сприймають IplImage або CvMat:</span>
    <span class="c1">// 1) конвертуємо заголовки, дані не копіюються</span>
    <span class="c1">// 2) викликаємо функцію, утворюючи казівники за допомогою &amp; </span>

    <span class="n">IplImage</span> <span class="n">cv_planes_0</span> <span class="o">=</span> <span
class="n">planes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span
class="n">cv_noise</span> <span class="o">=</span> <span class="n">noisyI</span><span
class="p">;</span>
    <span class="n">cvAddWeighted</span><span class="p">(</span><span class="o">&amp;</span><span
class="n">cv_planes_0</span><span class="p">,</span> <span class="n">contrast_gain</span><span
class="p">,</span> <span class="o">&amp;</span><span class="n">cv_noise</span><span
class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span
class="mi">128</span> <span class="o">+</span> <span class="n">brightness_gain</span><span
class="p">,</span> <span class="o">&amp;</span><span class="n">cv_planes_0</span><span
class="p">);</span>
<span class="cp">#else</span>
    <span class="n">addWeighted</span><span class="p">(</span><span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">contrast_gain</span><span
class="p">,</span> <span class="n">noisyI</span><span class="p">,</span> <span class="mi">1</span><span
class="p">,</span> <span class="o">-</span><span class="mi">128</span> <span class="o">+</span> <span
class="n">brightness_gain</span><span class="p">,</span> <span class="n">planes</span><span
class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="cp">#endif</span>

    <span class="k">const</span> <span class="kt">double</span> <span class="n">color_scale</span> <span
class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
    <span class="c1">// Mat::convertTo() замінює cvConvertScale.</span>
    <span class="c1">// тип вихідної матриці задається явно, ми не змінюємо його planes[1].type()</span>
    <span class="n">planes</span><span class="p">[</span><span class="mi">1</span><span
class="p">].</span><span class="n">convertTo</span><span class="p">(</span><span
class="n">planes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span
class="n">planes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span
class="n">type</span><span class="p">(),</span> <span class="n">color_scale</span><span
class="p">,</span> <span class="mi">128</span><span class="o">*</span><span class="p">(</span><span
class="mi">1</span><span class="o">-</span><span class="n">color_scale</span><span
class="p">));</span>

    <span class="c1">// альтернативна форма cv::convertScale, якщо ми знаємо тип під час компіляції (у нас "uchar")</span>
    <span class="c1">// Цей вираз не створює жодних проміжних масивів (повинно бути таким же швидким як вище)</span>
    <span class="n">planes</span><span class="p">[</span><span class="mi">2</span><span
class="p">]</span> <span class="o">=</span> <span class="n">Mat_</span><span class="o">&lt;</span><span
class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">planes</span><span
class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span
class="n">color_scale</span> <span class="o">+</span> <span class="mi">128</span><span
class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span
class="n">color_scale</span><span class="p">));</span>

    <span class="c1">// Mat::mul замінює cvMul(). Знову, прості вирази не створюють проміжних масивів</span>
    <span class="n">planes</span><span class="p">[</span><span class="mi">0</span><span
class="p">]</span> <span class="o">=</span> <span class="n">planes</span><span class="p">[</span><span
class="mi">0</span><span class="p">].</span><span class="n">mul</span><span class="p">(</span><span
class="n">planes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span
class="mf">1.</span><span class="o">/</span><span class="mi">255</span><span class="p">);</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <p>Як ви можете бачити, змінна <em>planes</em> типу <em>Mat</em>.
                  Однак конвертація з <em>Mat</em> до <em>IplImage</em>
                  проста, та робиться автоматично простим оператором
                  присвоювання.</p>
                <div class="highlight-cpp">
                  <table class="highlighttable">
                    <tbody>
                      <tr>
                        <td class="linenos">
                          <div class="linenodiv">
                            <pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre>
                          </div>
                        </td>
                        <td class="code">
                          <div class="highlight">
                            <pre>    <span class="n">merge</span><span class="p">(</span><span
class="n">planes</span><span class="p">,</span> <span class="n">I_YUV</span><span
class="p">);              </span><span class="c1">// зливаємо (поєднюємо) результати</span>
    <span class="n">cvtColor</span><span class="p">(</span><span class="n">I_YUV</span><span
class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">CV_YCrCb2BGR</span><span
class="p">);</span>  <span class="c1">// відновлюємо RGB зображення</span>


    <span class="n">namedWindow</span><span class="p">(</span><span class="s">"image with grain"</span><span
class="p">,</span> <span class="n">WINDOW_AUTOSIZE</span><span class="p">);</span>   <span
class="c1">// створюємо вікно</span>

<span class="cp">#ifdef DEMO_MIXED_API_USE</span>
    <span class="c1">// це демонструє, що I та IplI використовують одні дані</span>
    <span class="c1">// Результат, збережений в I також доступний черезе IplI</span>
    <span class="n">cvShowImage</span><span class="p">(</span><span class="s">"image with grain"</span><span
class="p">,</span> <span class="n">IplI</span><span class="p">);</span>
<span class="cp">#else</span>
    <span class="n">imshow</span><span class="p">(</span><span class="s">"image with grain"</span><span
class="p">,</span> <span class="n">I</span><span class="p">);</span> <span class="c1">// нова функція в стилі MATLAB</span>
</pre></div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <p>Нова функція сприймає обоє структури, <em>Mat</em> та <em>IplImage</em>.
                  Компілюємо та виконуємо програму, та якщо перше зображення на
                  вході, ви можете отримати друге або третьє на виході:</p>
                <p><br />
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
