<!DOCTYPE html>
<!-- saved from url=(0038)http://www.golang-book.com/4/index.htm -->
<html  lang="en">
  <head>
    <meta  content="text/html; charset=UTF-8"  http-equiv="content-type">
    <title>Вступ до Go | Змінні Переклад українською - Арсеній Чеботарьов -
      Ніжин 2016</title>
  </head>
  <body>
    <address> Переклад українською - <a  href="mailto:ac2epsilon@gmail.com">Арсеній
        Чеботарьов</a> - Ніжин 2016</address>
    <div  id="container">
      <div  id="book">
        <h1>Змінні</h1>
        <p>До тепер ми бачили тільки програми, що використовують літеральні
          значення (числа, рядки, логічні), але такі програми не є дуже
          корисними. Щоб зробить насправді корисні програми, нам треба вивчити
          дві нові концепції: змінні та твердження управління перебігом
          виконання. Ця глава дослідить змінні більш детально.</p>
        <p>Змінна є місцем зберігання, з певним типом та асоційованим ім'ям.
          Давайте змінимо програму, що ми написали в главі 2, так, щоб вона
          використовувала змінну:</p>
        <pre>package main

import "fmt"

func main() {
    var x string = "Hello World"
    fmt.Println(x)
}</pre>
        <p>Зауважте, що літеральний рядок з оригінальної програми все ще
          присутній в програмі, але замість того, щоб напряму надсилати його в
          функцію&nbsp;<code>Println</code> ми присвоюємо його змінній. Змінні в
          Go створюються вказуючи ключеве слово <code>var</code>, потім задаючи
          ім'я змінної (<code>x</code>), тип (<code>string</code>), та нарешті
          присвоюючи значення змінній (<code>Hello World</code>). Останній крок
          опціональний, так що альтернативний шлях написання може бути такий:</p>
        <pre>package main

import "fmt"

func main() {
    var x string
    x = "Hello World"
    fmt.Println(x)
}</pre>
        <p>Змінні в Go подібні до змінних в алгебрі, але є декілька невеликих
          відмінностей:</p>
        <p>Перше, коли ми бачимо символ&nbsp;<code>=</code> ми мхильні читати це
          як “x дорівнює рядку Hello World”. Немає нічого хибного в тому, щоб
          читати програму саме так, але краще читати це як “x отримує рядок
          Hello World” або “x присвоєно рядок Hello World”. Ця різниця важлива,
          тому що (як підказує ім'я) змінні можуть змінювати свої значення на
          протязі життя програми. Спробуйте прочитати наступне:</p>
        <pre>package main

import "fmt"

func main() {
    var x string
    x = "first"
    fmt.Println(x)
    x = "second"
    fmt.Println(x)
}</pre>
        <p>Фактично ви можете зробити навіть це:</p>
        <pre>var x string
x = "first "
fmt.Println(x)
x = x + "second"
fmt.Println(x)</pre>
        <p>Ця програма може виглядати як безглуздя, якщо ви спробуєте прочитати
          її як алгебраїчну теорему. Але вона має сенс, якщо ви уважно
          прочитаєте цю програму як послідовність команд. Коли ми бачимо&nbsp; <code>x
            = x + "second"</code> ми повинні читати це як “присвоїти
          конкатенацію значення змінної x та літерального рідка second до
          змінної x”. Права частина від <code>=</code> виконується першою, та
          результат потім присвоюється лівій частині від <code>=</code>.</p>
        <p>Форма <code>x = x + y</code> настільки загальна в програмуванні, що
          Go має спеціальне твордження присвоювання: <code>+=</code>. Ми можемо
          записати <code>x = x + "second"</code> як <code>x += "second"</code>,
          та це буде робити ту ж саму річ (інші операції можуть
          використовуватись таким же чином).</p>
        <p>Інша різниця між Go та алгеброю в тому, що ми використовуємо інший
          символ для рівності: <code>==</code> (два символа рівності один за
          одним). <code>==</code> є оператором, таким як <code>+</code> та
          повертає логічне зачення. Наприклад:</p>
        <pre>    var x string = "hello"
    var y string = "world"
    fmt.Println(x == y)</pre>
        <p>Ця програма повинна друкувати <code>false</code>, оскільки <code>hello</code>
          не те саме, що <code>world</code>. З іншого боку:</p>
        <pre>    var x string = "hello"
    var y string = "hello"
    fmt.Println(x == y)</pre>
        <p>Це друкує <code>true</code>, оскільки два рядки однакові.</p>
        <p>Оскільки створення нової змінної зі значенням рядка дуже загальне, Go
          також підтримує коротше твердження:</p>
        <pre>    x := "Hello World"</pre>
        <p>Зауважте&nbsp;<code>:</code> перед <code>=</code> та що тип не
          вказано. Тип не потрібен, оскільки компілятор Go в змозі вивести тип
          базуючись на значенні літерала, що ви присвоюєте змінній (оскільки ви
          присвоюєте літеральний рядок, <code>x</code> отримує тип <code>string</code>).
          Компілятор може також вивести тип твердження <code>var</code>:</p>
        <pre>    var x = "Hello World"</pre>
        <p>Те ж саме робить з іншими типами:</p>
        <pre>    x := 5
    fmt.Println(x)</pre>
        <p>Загалом, вам слідує використовувати цю коротшу форму коли можливо.</p>
        <h2  id="section1">Як назвати змінну</h2>
        <p>Вірне іменування змінної є важливою частиною розробки програмного
          забезпечення. Імена повинні починатись з літери, та можуть містит
          літери, числа або знак підкреслення <code>_</code> . Компілятор Go не
          турбується, як ви називаєте змінну, так що ім'я, що значуще для вас
          (та інших) має перевагу. Обирайте ім'я, що ясно описують призначення
          змінної. Уявімо, ми маємо наступне:</p>
        <pre>    x := "Max"
    fmt.Println("My dog's name is", x)</pre>
        <p>В цьому випадку x не дуже гарне ім'я для змінної. Краще ім'я може
          бути таким:</p>
        <pre>    name := "Max"
    fmt.Println("My dog's name is", name)</pre>
        <p>або навіть таке:</p>
        <pre>    dogsName := "Max"
    fmt.Println("My dog's name is", dogsName)</pre>
        <p>В цьому останньому випадку ми використовуємо особливий спосіб
          представляти декілька слів в імені змінної, відоме як верблюжий
          реєстр&nbsp; (також відомий як змішаний реєстр, перші-заглавні і таке
          інше). Перша літера першого слова в малому реєстрі, перші літери
          наступних слів в великому реєстрі, та всі інші літери малі.</p>
        <h2  id="section2">Поле зору</h2>
        <p>Повертаючись назад до програми, що ми бачили на початку глави:</p>
        <pre>package main

import "fmt"

func main() {
    var x string = "Hello World"
    fmt.Println(x)
}</pre>
        <p>Інший спосіб написати цю програму можна так:</p>
        <pre>package main

import "fmt"

var x string = "Hello World"

func main() {
    fmt.Println(x)
}</pre>
        <p>Зауважте, що ми перемістили змінну за межі головної функції. Це
          означає, що інші функції можуть отримати доступ до цієї змінної:</p>
        <pre>var x string = "Hello World"

func main() {
    fmt.Println(x)
}

func f() {
    fmt.Println(x)
}</pre>
        <p>Функція <code>f</code> тепер має доступ до змінної&nbsp;<code>x</code>.
          Тепер уявімо, що ми напишемо таке:</p>
        <pre>func main() {
    var x string = "Hello World"
    fmt.Println(x)
}

func f() {
    fmt.Println(x)
}</pre>
        <p>Якщо ви виконаєте цю програму, ви повинні побачити помилку:</p>
        <pre>.\main.go:11: undefined: x</pre>
        <p>Компілятор каже вам, що змінна&nbsp;<code>x</code> не існує в
          функції&nbsp;<code>f</code>. Вона існує тільки в функції&nbsp;<code>main</code>.
          Диапазон місць, де ви можете використовувати&nbsp;<code>x</code>
          називається сферою дії змінної. Відповідно до специфікації мови “Go
          утворює лексичні сфери з використанням блоків”. В основі це означає,
          що змінна існує в найближчому блоці, оточеному фігурними дужками <code>{</code>
          <code>}</code>, включаючи любі вкладені блоки, але не за їх межами.
          Спочатку ідея поля зору може бути трохи збентежливою; коли ми побачимо
          більше прикладів Go вона стане більш зрозумілою.</p>
        <h2  id="section3">Константи</h2>
        <p>Go також підтримує константи. Константи в основному подібні до
          змінних, чиї значення не можуть бути змінені пізніше. Вони створюються
          таким же чином, як ви створюєте змінні, але замість ключового
          слова&nbsp;<code>var</code> ви викорстовуєте <code>const</code>:</p>
        <pre>package main

import "fmt"

func main() {
    const x string = "Hello World"
    fmt.Println(x)
}</pre>
        <p>Це:</p>
        <pre>    const x string = "Hello World"
    x = "Some other string"</pre>
        <p>Результатом буде помилка часу компіляції:</p>
        <pre>.\main.go:7: cannot assign to x</pre>
        <p>Константи є гарним шляхом повторно використовувати загальні значення
          в програмі без запису їх кожного разу. Наприклад,&nbsp;<code>Pi</code>
          в пакунтку <code>math</code> визначене як константа.</p>
        <h2  id="section4">Визначення декількох змінних</h2>
        <p>Go також має інше скорочення, коли вам треба визначити декілька
          змінних:</p>
        <pre>var (
    a = 5
    b = 10
    c = 15
)</pre>
        <p>Використовуйте ключове ім'я <code>var</code> (або <code>const</code>),
          за яким слідують дужки к кожною змінною в окремому рядку.</p>
        <h2  id="section5">Приклад програми</h2>
        <p>Ось приклад програми, що сприймає число, введене користувачем, та
          подвоює його:</p>
        <pre>package main

import "fmt"

func main() {
    fmt.Print("Enter a number: ")
    var input float64
    fmt.Scanf("%f", &amp;input)
    
    output := input * 2
    
    fmt.Println(output)    
}</pre>
        <p>Ми використовуємо іншу функцію з пакунку&nbsp;<code>fmt</code>, щоб
          прочитати ввод користувача (<code>Scanf</code>). <code>&amp;input</code>
          буде пояснений в подальшій главі, але тепер там треба знати, що <code>Scanf</code>
          заповлює input значенням, що ми вводимо.</p>
        <h3>Проблеми</h3>
        <ul>
          <li>
            <p>Які два способи створити нову зміну?</p>
          </li>
          <li>
            <p>Яким буде значення <code>x</code> після виконання: <br>
              <code>x := 5; x += 1</code>?</p>
          </li>
          <li>
            <p>Яка поле зору та як ви визнчаєте поле зору дії змінної в Go?</p>
          </li>
          <li>
            <p>Яка різниця між <code>var</code> та <code>const</code>?</p>
          </li>
          <li>
            <p>Використовуючи приклад програми як стартову точку, напишіть
              програму, що конвертує градуси з Фаренгейта в Цельсії (<code>C =
                (F - 32) * 5/9</code>).</p>
          </li>
          <li>
            <p>Напишіть іншу програму, що конвертує фунти в метри (<code>1 ft =
                0.3048 m</code>) .</p>
          </li>
        </ul>
      </div>
    </div>
  </body>
</html>
