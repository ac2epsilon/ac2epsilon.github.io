<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Effective Java 3rd 2018 - Переклад українською</title>
  </head>
  <body>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <address>Переклад українською - <a href="mailto:ac2epsilon@gmail.com">Арсеній
        Чеботарьов</a> - Київ 2018</address>
    <h1 class="h2f" style=" font-size: 26px; margin-top: 30px; margin-bottom: 30px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Joshua
      Bloch - Effective Java (3rd) - 2018</h1>
    <h2 class="h2f" style="font-size: 26px; margin-top: 30px; margin-bottom: 30px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Передмова</h2>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Якщо
      колега скаже тобі “Моя половина сьогодні ввечері вдома якусь незвичну їжу
      готуватиме. Ти міг приєднатися?” три речі можуть прийти на думку: третя -
      що ви були запрошені на вечерю; друга - що англійська не є рідною мовою
      вашого колеги; та перша це чимале здивування.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Якщо
      ви колись вивчали другу мову самотуж, та потім намагались використовувати
      її за межами класної кімнати, ви знаєте, що є три речі, які маєте
      засвоїти: як структурована мова (граматика), як називаються речі
      (словник), та особливі та ефективні шляхи розповідати про щоденні речі
      (ідіоматика). Часто в класній кімнаті вивчають тільки першу частину, та ви
      побачите, що природні носії мови весь час стримують посмішки, по мірі
      того, як ви намагаєтесь дати себе зрозуміти.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Це
      загалом те саме з мовами програмування. Вам треба розуміти базову мову: чи
      вона алгоритмічна, функціональна, об'єктно-орієнтовна? Вам треба знати
      словник: як виглядають структури даних, операндів, та можливості, які
      провадять стандартні бібліотеки? Та вам треба бути знайомим зі звичними та
      ефектіврними шлахами структурувати код. Книги щодо програмних мов часто
      покривають тільки перші дві теми, або дискутують використання дуже
      вибірково. Може це через те, що перші дещо простіші для описання.
      Граматика та словник є властивостями самої мови, але використання є
      характеристикою спільноти щодо використання.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Мова
      програмування Java, наприклад, є об'єктно-орієнтованою з подиноким
      наслідуванням, та підтримує імперативний (твердження-орієнтовний) стиль
      кодування в кожному методі. Бібліотеки адресують підтримку графіки, мереж,
      розподіленого виконання та безпеку. Але як найкраще використовувати цю
      мову на практиці?</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Існує
      інше міркування. Програми, на відміну від речень мовлення, та на відміну
      від більшості книг та журналів, з часом напевне будуть зазнавати змін.
      Звичайно не достатньо спродукувати код, що ефективно оперує та легко може
      бути зрозумілий іншими; ви також маєте гарно оргнізувати код, щоб його
      було легко модифікувати. Можуть існувати якісь десять способів написати
      код для деякого завдання <span class="Apple-converted-space"></span><em>T</em>.
      З ціх десяти методів сім будуть незручні, неефективні, або приголомшиві. З
      інших трох, який є найбіш вірогідим до коду, який буде вирішувати завдання
      <span class="Apple-converted-space"></span><em>T'</em><span class="Apple-converted-space">
        в наступному релізі через рік</span>?</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Існують
      числені книги, з яких ви можете навчитись граматики мови програмування
      Java, включаючи <span class="Apple-converted-space"></span><em>The Java</em><sup>™</sup><span
        class="Apple-converted-space">&nbsp;</span><em>Programming Language</em><span
        class="Apple-converted-space"> від</span> Arnold, Gosling, and Holmes,
      або<span class="Apple-converted-space"> </span><em>The Java</em><sup>™</sup><span
        class="Apple-converted-space">&nbsp;</span><em>Language Specification</em><span
        class="Apple-converted-space"> від</span> Gosling, Joy, щиро ваші, та
      Bracha. Так само є купа книг по бібліотекам та API, асоційованих з мовою
      програмування Java.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга адресує вашу третю потребу: звичне та ефективне використання. Joshua
      Bloch витратив роки розширюючи, реалізуючи,&nbsp; та використовуючи мову
      програмування Java в Sun Microsystems; він також читав багато кода інших
      людей, включаючий мій. Тут ми надаємо гарні поради, систематично
      організовані, по тому, як структурувати ваш код, так щоб він гарно
      працював, так щоб інші люди могли зрозуіти його, так щоб майбутні
      модифікацї та покращення малоймовірно викликали головний біль — можливо,
      навіть, так щоб ваші програми були приємні, елегантні та витончені.</p>
    <p class="right" style="margin-top: 15px; margin-bottom: 15px; text-align: right; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.3; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Guy
      L. Steele Jr.<br>
      <em>Burlington, Massachusetts<br>
        April 2001</em></p>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h2 class="h2f" id="preface" style="font-size: 26px; margin-top: 30px; margin-bottom: 30px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Передмова</strong></h2>
    <h3 class="h3a" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 20px; page-break-after: avoid; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Передмова
        до третього видання</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        class="Apple-converted-space"></span>В 1997-му році, коли Java була
      новою, James Gosling (батько Java), описував її як “мову синіх комірців”
      що була “досить простою” [<a href="ref.xhtml#rGosling97" style="text-decoration: none;">Gosling97</a>].
      Приблизно в той же час, Bjarne Stroustrup (батько C++) описував C++ як
      “багато-парадигмову мову”, що “навмисне відрізняється від мов, призначених
      підтримувати один спосіб написання програм” [<a href="ref.xhtml#rStroustrup95"
        style="text-decoration: none;">Stroustrup95</a>]. Stroustrup попереджав:</p>
    <p class="bq" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 19.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Більшість
      з відносної простоти Java — як і більшості нових мов — частково є
      іллюзією, і частково є функцією їх неповноти. Як спливатиме час, Java буде
      значно зростати в розмірі та складності. Вона зрости вдвічі або втричі за
      розміром та наростить залежні від реалізації розширення або бібліотеки. [<a
        href="ref.xhtml#rStroustrup" style="text-decoration: none;">Stroustrup</a>]</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Зараз,
      двадцять років пізніше, буде часним сказати, що обоє, Gosling та
      Stroustrup, були праві. Java тепер велика та складна, з багатьма
      абстракціями для багатьох речей, від паралельного виконання, до ітерації,
      до представлення дати та часу.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Я
      все ще люблю Java, хоча мій запал трохи охолов, по мірі зростання
      платформи. Маючи це зростання розміру та складності, потреба в нагальних
      практиках застосування стає все більш критичною. Це третя редакція <span
        class="Apple-converted-space"></span><em>Effective Java</em>, та я
      доклав найкращих зусиль до цього видання. Я маю надію що ця редакція
      продовжує задовільняти вашим потребам, залишаючись вірною духу перших
      двох.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Мале
      прекрасне, але просте не є простим.</p>
    <p class="right" style="margin-top: 15px; margin-bottom: 15px; text-align: right; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><em>San
        Jose, California<br>
        November 2017</em></p>
    <p class="noindentt" style="margin-top: 15px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">P.S.
Я
      буду нечесним, якщо не згадаю кращі практики (<em>софтверної</em>)
      індустрії, якій я присвячував більшість свого часу в минулому. З початку
      народження нашої справи в 1950-х, ми вільно реалізовували API одне одного.
      Ця практика була критичною для стрімкого успіху комп'ютерної технології. Я
      виявляв активність для збереження цієї волі (to preserve this freedom) [<a
        href="ref.xhtml#rCompSci17" style="text-decoration: none;">CompSci17</a>],
      та заохочую вас приєднатись до мене. Є критичним для здоров'я нашої
      професії, якщо ми збережемо право переписувати API один одного.</p>
    <h3 class="h3a" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 20px; page-break-after: avoid; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Передмова
        до другого видання</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Багато
      чого відбулося з пратформою Java з тих пір, коли я писав першу редакцію
      цієї книги в 2001-му році, та прийщов гарний час для другої редакції.
      Найбільш важливий набір змін було додавання дженериків, типів переліку,
      анотацій, автобоксінгу, та циклів for-each в Java 5. Близько до цого було
      додання нової конкурентної бібліотеки,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util.concurrent</code>,
      що також вийшла в Java 5. Разом з Gilad Bracha, я мав гарну нагоду
      очолювати команди, що розробляли ці можливості мови. Також я мав щастя
      прислужитись команді, що розробляла бібліотеку конкурентності, та якою
      керував Doug Lea.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Інша
      велика зміна в платформі є широке поширення сучасних редакторів коду,
      Integrated Development Environments (IDEs), таких як Eclipse, IntelliJ
      IDEA, та NetBeans, та інструментів статичного аналізу, таких як FindBugs.
      Хоча я не був задіяний в ціх спробах, я безпосередньо мав вигоди від них,
      та спостерігав, як вони впливали на досвід розробки Java.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      2004 я перейшов з Sun до Google, але я продовжував мій розвиток в розробці
      на Java протягом останніх чотирьох років, докладаючи код до API
      конкуренції та колекції через гарні офіси Google та Java Community
      Process. Я мав насолоду використовувати Java платформу для розробки
      бібліотек для використання в Google. Тепер я знаю, що значить відчувати
      себе користувачем.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Як
      і в випадку року 2001, коли я писав першу редакцію, моя первинна ціль була
      поширити мій досвід серед вас, так, щоб ви могли імітувати мої вдачі,
      уникаючи моїх помилок. Новий матеріал продовжує (<em>практику</em>)
      вільного використання прикладів з реального світу від бібліотек платформи
      Java.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Перша
      редакція була успішною далеко краще моїх сподівань, і я доклав кращих
      зусиль, щоб зберігти дух (<em>першого видання</em>), при цьому втручаючи
      новий матеріал, що мав підтримувати книгу на сучасному рівні. Було
      безсумнівно, що книга буде розростатись, і вона розрослась з сорока-семи
      до семидесяти-восьми пунктів. Я не тільки додав двадцять-три пункти, але я
      також щільно передивився оригінальний матеріал, та відправив декілька
      пунктів у відставку, кращі дні яких спливли. В Додатку ви можете побачити,
      як матеріал цього видання пов'язаний з матеріалом першої редакції.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      передмові до першого видання я писав, що мова програмування Java та її
      бібліотеки значно додали в якості та продуктивності, та з ними стало
      приємніше працювати. Зміни в релізах 5 та 6 отримали гарну річ, та зробили
      її краще. Платформа стала значно більшою, ніж вона була в 2001-му році, та
      стала складнішою, але якщо ви вивчили шаблони та ідіоми для використання
      нових можливостей, ви зробите ваші програми кращими, та ваше життя
      простішим. Я маю надію, що це редакція захопила мій постійний інтузіазм
      щодо платформи, та допомагає зробити використання цієї платформи та її
      нових можливостей більш ефективним та приємним.</p>
    <p class="right" style="margin-top: 15px; margin-bottom: 15px; text-align: right; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><em>San
        Jose, California<br>
        April 2008</em></p>
    <h3 class="h3a" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 20px; page-break-after: avoid; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Передмова
        до першої редакції</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      1996 я підвищив ставки, та подався на Захід для роботи в компанії
      JavaSoft, як вона тоді була відома, оскільки мені було ясно, що це місце
      де відбуваються справи. Протягом наступних п'яти років я служив справі як
      архитектор бібліотек Java. Я розробляв, реалізував та підтримував багато
      бібліотек, та консультував багато кого. Робота з ціма бібліотеками по мірі
      зрослішання&nbsp; Java платформи була подією, що відбувається раз в житті.
      Не буде перебільшенням сказати, що я мав привелегію робити з деякими з
      найвеличніших софтверних інженерів нашого покоління. В процесі цього я
      навчився багато чого щодо мови програмування Java — що робить, що ні, та
      як використовувати та її бібліотеки для кращого ефекту.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга є моєю спробою поділити мій досвід з вами, так що ви можете
      імітувати мій успіх, та уникнути моїх помилок. Я позичив формат з Scott
      Meyers’s<span class="Apple-converted-space">&nbsp;</span><em>Effective C++</em>,
      що складається з п'ятидесяти елементів, кожний складає особливе правило
      для покращення ваших програм та їх дизайну. Я винайшов цей формат
      остаточно ефективним, та маю надію ви також.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      багатьох випадках я обирав вільно ілюструвати теми прикладами з реального
      світу з бібліотек платформи Java. Коли я описую дещо, що можна зробити
      краще, я намагаюсь надати код, що я писав сам, але часом я обираю код,
      написаний моїм колегою. Я щиро перепрошую, якщо, попри мої кращі
      намагання, я образив когось. Негативні приклади наведені не для розпалення
      образ, але в дусі кооперації, так що всі ми можемо отримати вигоду від
      досвіду того, що робилось до цього.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Хоча
      ця книжка не націлена винятково на розробників повторно використовуваних
      компонентів, вона неодмінно розфарбована моїм досвідом в написанні ціх
      компонент на протязі останніх двох десятисіть. Я природно думаю в термінах
      експортованих&nbsp; API (Application Programming Interfaces), та я раджу
      робити так само. Навіть якщо ви не розробляєте повторно використовувані
      компоненти, мислення в ціх термінах призводить до покращення якості
      софтверу, що ви пишете. Більше того, не є загальним писати компоненти без
      того, щоб знати їх: ви пишете дещо корисне, поділяючи це з товаришом по
      цеху, та з часом ви маєте з пів дюжини користувачів. На цей час ви не
      маєте досить гнучкості змінити API за власним бажанням, та досить вдячні
      собі за весь той труд, що ви поклали в розробку API, коли перший час
      писали ваш софт.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Мій
      фокус на розробці API може виглядати трохи неприродним в світі новітніх
      методологій облегченого програмного забезпечення, як <span class="Apple-converted-space"></span><em>Екстремальне
        програмування</em>. Ці методології наполягають на написанні найпростіших
      програм, що взагалі здатні працювати. Якщо ви використовуєте одну з ціх
      методологій, ви винайдете, що фокусування на розробці API гарно
      прислужиться вам в процесі <em>рефакторінгу</em>. Фундаментальні цілі
      рефакторингу є покращення структури системи, та відсутність дублікації
      коду. Ці цілі неможливі досягти за відсутності гарно розробленого API для
      компонентів системи.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Немає
      ідеальної мови, але деякі чудові. Я знаходжу мову програмування Java та її
      бібліотеки надзвичайно сприятливі для якості та продуктивності, та також
      радості робити з нею. Я маю надію, що ця книга захопить мій інтузіазм, та
      допомагає вашому використанні мови більш ефективно та з насолодою.</p>
    <p class="right" style="margin-top: 15px; margin-bottom: 15px; text-align: right; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><em>Cupertino,
        California<br>
        April 2001</em></p>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h2 class="h2" id="ch1" style="font-size: 29px; margin-top: 30px; margin-bottom: 30px; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Глава
      1. Вступ</h2>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        class="Apple-converted-space"></span>Ця книга розроблена допомогти вам
      зробити використання мови програмування Java ефективним, так само, як її
      фундаментальні бібліотеки:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.lang</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util</code>, та <code
        style="font-family: 'Courier New', monospace;">java.io</code>, та
      суб-пакунки, як<span class="Apple-converted-space"> </span><code style="font-family: 'Courier New', monospace;">java.util.concurrent</code><span
        class="Apple-converted-space"> та</span><span class="Apple-converted-space">
      </span><code style="font-family: 'Courier New', monospace;">java.util.function</code>.
      Інші бібліотеки дискутуються час від часу.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга складається з дев'яноста пунктів, кожний з яких доводить одн
      правило. Правила захоплюють практичні ідеї, що визнані вигідними кращими з
      найбільш досвідчених програмістів. Правила довільно поділені на одинадцять
      глав, кожна покриває один з широких аспектів розробки програмного
      забезпечення. Книга на призначена для читання від корки до корки: кожний
      пункт стоїть окремо, більш або менш. Елементи щільно посилаються один на
      одне, так що ви можете просто прокласти свій шлях по цій книзі.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Багато
      з нових можливостей були додані до платформи з часу останньої редакції
      друку цієї книги. Більшість&nbsp; з тем цієї книги використовують ці
      можливості в деякий спосіб. Ця таблиця показує, де вам шукати первинні
      описи ціх можливостей:</p>
    <table class="tablewidth" style="border-collapse: collapse; width: 1179px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
      <tbody>
        <tr>
          <td class="table1" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; padding: 0.3em; border-top-style: solid; border-top-width: 0.2em; border-top-color: rgb(0, 0, 0); border-bottom-style: solid; border-bottom-width: 0.1em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent-t" style="margin-top: 4.5px; margin-bottom: 4.5px; margin-left: 6px; text-indent: 0px;"><strong>Можливість</strong></p>
          </td>
          <td class="table1" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; padding: 0.3em; border-top-style: solid; border-top-width: 0.2em; border-top-color: rgb(0, 0, 0); border-bottom-style: solid; border-bottom-width: 0.1em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent-t" style="margin-top: 4.5px; margin-bottom: 4.5px; margin-left: 6px; text-indent: 0px;"><strong>Пункти</strong></p>
          </td>
          <td class="table1" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; padding: 0.3em; border-top-style: solid; border-top-width: 0.2em; border-top-color: rgb(0, 0, 0); border-bottom-style: solid; border-bottom-width: 0.1em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent-t" style="margin-top: 4.5px; margin-bottom: 4.5px; margin-left: 6px; text-indent: 0px;"><strong>Реліз</strong></p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Лямбди</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch7.xhtml#lev42" style="text-decoration: none;">Пункти 42</a>–<a
                href="ch7.xhtml#lev44" style="text-decoration: none;">44</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              8</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Потоки</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch7.xhtml#lev45" style="text-decoration: none;">Пункти 45</a>–<a
                href="ch7.xhtml#lev48" style="text-decoration: none;">48</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              8</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Опції</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch8.xhtml#lev55" style="text-decoration: none;">Пункт 55</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              8</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Методи
              по замовчанню інтерфейсів</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch4.xhtml#lev21" style="text-decoration: none;">Пункт 21</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              8</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><code
                style="font-family: 'Courier New', monospace;">try</code>-with-resources</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch2.xhtml#lev9" style="text-decoration: none;">Пункт 9</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              7</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><code
                style="font-family: 'Courier New', monospace;">@SafeVarargs</code></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch5.xhtml#lev32" style="text-decoration: none;">Пункт 32</a></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              7</p>
          </td>
        </tr>
        <tr>
          <td class="table2" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; border-bottom-style: solid; border-bottom-width: 0.2em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Модулі</p>
          </td>
          <td class="table2" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; border-bottom-style: solid; border-bottom-width: 0.2em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;"><a
                href="ch4.xhtml#lev15" style="text-decoration: none;">Пункт 15</a></p>
          </td>
          <td class="table2" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; border-bottom-style: solid; border-bottom-width: 0.2em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              9</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="indentt" style="margin-top: 13.333334px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_2"></span>Більшість пунктів ілюстровані
      прикладами програм. Ключова властивість цієї книги в тому, що вона містить
      приклади коду, що ілюструють багато з шаблонів розробки та ідіом. Коли це
      доцільно, вони перекресно посилаються на стандартні роботи в цій галузі [<a
        href="ref.xhtml#rGamma95" style="text-decoration: none;">Gamma95</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Багато
      пунктів містять один або більше прикладів програм, що ілюструють деякі
      практики, яких треба уникати, Такі прклади, іноді відомі як <em>антишаблони,
        </em>ясно відмічені відповідними коментарями, як <span class="Apple-converted-space"></span><code
        style="font-family: 'Courier New', monospace;"><strong>// Не робіть так!</strong></code>.
      В цьому випадку пунт пояснює, чому приклад поганий, та підказує
      альтернативний підхід.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга не розрахована на початківців: вважається, що ви добре знайомі з
      Java. Якщо це не так, погляньте на один або більше вступних текстів, як
      Sestoft<span class="Apple-converted-space"> </span><em>Java Precisely</em><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rSestoft16"
        style="text-decoration: none;">Sestoft16</a>]. Тоді як <span class="Apple-converted-space"></span><em>Effective
        Java</em><span class="Apple-converted-space"> </span>розроблена бути
      доступною для будь-кого з робочим досвідом роботи з мовою, вона дає їжу
      для роздумів навіть для досвідчених програмістів.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Більшість
      з правил в цій книзі походять від декількох фундаментальних принципів.
      Ясність та простота є наріжним каменем. Користувач компонента ніколи не
      має дивуватись його поведінкою. Компоненти можуть бути такі малі, як це
      можливо, але не менше. (Як використовується в цій книзі, термін <em>компонент</em><span
        class="Apple-converted-space"> посилається на любий повторно
        використовуваний програмний компонент, від окремого методу до складного
        фреймворку, що скаладається з декількох пакунків</span>). Код має бути
      викорстаний повторно, ніж скопійований. Залежність між компонентами має
      бути зведеною до мінімуму. Помилки треба виявляти так рано, як можливо,
      після того, як вони відбулись, в ідеалі під час компіляції.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Хоча
      правила в цій книзі не застосовуються в ста відсотках випадків, вони
      характерізують кращі практикі програмування в великій більшості випадків.
      Вам не треба рабськи слідувати цім правилам, але порушувати їх треба
      тільки часом, та з гарних причин. Навчання мистецтву програмування, як і
      більшості інших дисциплін, полягає в вивченні правил, та потім як
      порушувати їх.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Для
      більшості випадків ця книга не стосується продуктивності. Вона про
      написання програм, що ясні, коректні, корисні, надійні, гнучкі та гарно
      підтримуються. Якщо ви можете досягти цього, зазвичай відносно просто
      також досягти гарної продуктивності (<a href="ch9.xhtml#lev67" style="text-decoration: none;">Пункт
        67</a>). Деякі пункти торкаються питань продуктивності, та декілька
      наводять показники продуктивності. Ці числа, що розпочинаються фразою “На
      моїй машині” треба сприймати, щонайбільше, як приблизні.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Щоб
      дещо уточнити, моя машина є саморобна 3.5GHz quad-core Intel Core
      i7-4770K, з 16Гб DDR3-1866 CL9 RAM, що виконує реліз Azul Zulu 9.0.0.15
      OpenJDK, на Microsoft Windows 7 Professional SP1 (64-bit).</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_3"></span>Коли іде мова про можливості
      мови програмування Java та її бібліотеки, іноді потрібно посилатись на
      певні релізи. Для зручності ця книга використовує псевдоніми замість
      офіційних назв. Ця таблиця показує відображення між іменами релізів та
      псевдонімами:</p>
    <table class="tablewidth" style="border-collapse: collapse; width: 1179px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
      <tbody>
        <tr>
          <td class="table1" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; padding: 0.3em; border-top-style: solid; border-top-width: 0.2em; border-top-color: rgb(0, 0, 0); border-bottom-style: solid; border-bottom-width: 0.1em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent-t" style="margin-top: 4.5px; margin-bottom: 4.5px; margin-left: 6px; text-indent: 0px;"><strong>Офіційна
                назва релізу</strong></p>
          </td>
          <td class="table1" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; padding: 0.3em; border-top-style: solid; border-top-width: 0.2em; border-top-color: rgb(0, 0, 0); border-bottom-style: solid; border-bottom-width: 0.1em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent-t" style="margin-top: 4.5px; margin-bottom: 4.5px; margin-left: 6px; text-indent: 0px;"><strong>Нікнейм</strong></p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">JDK
              1.0.<em>x</em></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              1.0</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">JDK
              1.1.<em>x</em></p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              1.1</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              2 Platform, Standard Edition, v1.2</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              2</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              2 Platform, Standard Edition, v1.3</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              3</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              2 Platform, Standard Edition, v1.4</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              4</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              2 Platform, Standard Edition, v5.0</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              5</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              Platform, Standard Edition 6</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              6</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              Platform, Standard Edition 7</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              7</p>
          </td>
        </tr>
        <tr>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              Platform, Standard Edition 8</p>
          </td>
          <td style="vertical-align: top;">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              8</p>
          </td>
        </tr>
        <tr>
          <td class="table2" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; border-bottom-style: solid; border-bottom-width: 0.2em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              Platform, Standard Edition 9</p>
          </td>
          <td class="table2" style="vertical-align: top; margin-top: 0px; margin-bottom: 0px; border-bottom-style: solid; border-bottom-width: 0.2em; border-bottom-color: rgb(0, 0, 0);">
            <p class="noindent1" style="margin-top: 3px; margin-bottom: 7.5px; margin-left: 7.5px; text-indent: 0.0026666669px;">Java
              9</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="indentt" style="margin-top: 13.333334px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Приклади
      є досить повними, але більше націлені на просте читання, ніж на повноту.
      Вони вільно використовують класи з пакунків <span class="Apple-converted-space"></span><code
        style="font-family: 'Courier New', monospace;">java.util</code><span class="Apple-converted-space">
        та </span><code style="font-family: 'Courier New', monospace;">java.io</code>.
      Щоб скомпілювати приклади вам треба додати одну або декілька декларацій
      імпорту, або ще якість загальні речі. Сайт цієї книги, <code style="font-family: 'Courier New', monospace;"><a
          href="http://joshbloch.com/effectivejava" style="text-decoration: none;">http://joshbloch.com/effectivejava</a></code>,
      містить розширену версію кожного криклада, що може бути скомпільований та
      виконаний.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      більшості місць яу книга використовує технічні терміни, як вони визачені в
      <span class="Apple-converted-space"></span><em>The Java Language
        Specification, Java SE 8 Edition</em><span class="Apple-converted-space">&nbsp;</span>[<a
        href="ref.xhtml#rJLS" style="text-decoration: none;">JLS</a>]. Деякі
      терміни мають власне значення. Мова підтримує чотири різновиди типів:<span
        class="Apple-converted-space"> </span><em>інтерфейси</em><span class="Apple-converted-space">
      </span>(включаючи<span class="Apple-converted-space"> </span><em>анотації</em>),<span
        class="Apple-converted-space"> </span><em>класи</em><span class="Apple-converted-space">
      </span>(включаючи<span class="Apple-converted-space"> </span><em>enum</em>),<span
        class="Apple-converted-space"> </span><em>масиви</em>, та<em> примітиви</em>.
      Перші три відомі як <em>типи посилання</em>. Примірники класів та масиви
      є об'єктами; примітивні типи ні. Члени класів складаються з <em>полів</em>,
      <em>методів, членів-класів </em>та <em>членів-інтерфейсів</em><em>.</em><span
        class="Apple-converted-space"> <em>Сигнатура метода </em>складається з
        імені та типів формальних параметрів</span>; сигнатура <em>не включає
        тип повернення метода</em>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга використовує деякі терміни відмінно від <span class="Apple-converted-space"></span><em>The
        Java Language Specification</em>. На відміну від <em>Java Language
        Specification</em>, ця книга використовує <span class="Apple-converted-space"></span><em>inheritance</em>as
      (наслідування) як синанім для<span class="Apple-converted-space"> </span><em>subclassing
        </em>(утворення субкласів). Замість використовувати термін наслідування
      для інтерфейсів, ця книга просто стверджує, що клас <em>реалізує </em>інтерфейс,
      або що один інтерфейс <em>розширює </em>інший. Щоб описати рівень
      доступу, що застосовується коли нічого не вказано, ця книга використовує
      тридиційне <em>пакунок-приватне, </em>замість технічно коректного <em>пакетного
        доступу</em><span class="Apple-converted-space"> </span>[JLS, 6.6.1].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Ця
      книга використовує декілька технічніх термінів, що н евизначені в <span class="Apple-converted-space"></span><em>The
        Java Language Specification</em>. Термін<span class="Apple-converted-space"></span><em>
        експортовані API</em>, або просто<span class="Apple-converted-space"> </span><em>API</em>,
      посилаючись на класи, інтерфейси, конструктори, члени, та серіалізовані
      форми, через які програміст отримує доступ до класів, інтерфейсів, або
      пакунку. (Термін <em>API</em>, що є скороченням до <span class="Apple-converted-space"></span><em>application
        programming interface</em>, використовується переважно до терміну <em>інтерфейс,
        </em>щоб уникнути напорозуміння з мовним конструктивом з такою ж назвою).
      Програміст, який пише програму, що використовує це API, виступає як <em>користувач
        </em>цього API. Клас, чия реалізація використовує API, <em>клієнтом </em>цього
      API.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Класи,
      інтерфейси, конструктори, члени, та серіалізовані форми загалом відомі як
      <em>елементи </em><span class="Apple-converted-space"></span><em>API</em>.
      Експортований API складається з елементів API, доступних за межами
      пакунка, в якому визначений цей API. Це елементи API, що може
      використовувати кожен клієнт, і які автор цього API обіцяє підтримувати.
      Не випадково, це також елеенти, для яких утіліта Javadoc генерує
      документацію в перебігу подій за замовчанням. Просто кажучи, експортований
      API пакунку скаладається з публічних та захищених членів та конструкторів
      кожного публічного класу або інтерфейсу в пакунку.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">В
      Java 9 до платформи була додана<span class="Apple-converted-space"> </span><em>система
        модулів</em>. Якщо бібліотека використовує систему модулів, її
      експортований API буде об'єднаням експортованих API всіх пакунків,
      експортованих декларацією модуля бібліотеки.</p>
    <p> </p>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h2 class="h2" id="ch2" style="font-size: 29px; margin-top: 30px; margin-bottom: 30px; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Chapter
      2. Creating and Destroying Objects</h2>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>T</strong><small
        style="font-size: 0.7em;">HIS</small><span class="Apple-converted-space">&nbsp;</span>chapter
      concerns creating and destroying objects: when and how to create them,
      when and how to avoid creating them, how to ensure they are destroyed in a
      timely manner, and how to manage any cleanup actions that must precede
      their destruction.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev1" style="text-decoration: none;"></a><strong>Item 1: Consider
        static factory methods instead of constructors</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      traditional way for a class to allow a client to obtain an instance is to
      provide a public constructor. There is another technique that should be a
      part of every programmer’s toolkit. A class can provide a public<span class="Apple-converted-space">&nbsp;</span><em>static
        factory method</em>, which is simply a static method that returns an
      instance of the class. Here’s a simple example from<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Boolean</code><span class="Apple-converted-space">&nbsp;</span>(the<span
        class="Apple-converted-space">&nbsp;</span><em>boxed primitive</em><span
        class="Apple-converted-space">&nbsp;</span>class for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">boolean</code>). This
      method translates a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">boolean</code><span class="Apple-converted-space">&nbsp;</span>primitive
      value into a<code style="font-family: 'Courier New', monospace;">Boolean</code><span
        class="Apple-converted-space">&nbsp;</span>object reference:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex1a" id="pch2ex1" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      static Boolean valueOf(boolean b) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return b ? Boolean.TRUE : Boolean.FALSE;<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that a static factory method is not the same as the<span class="Apple-converted-space">&nbsp;</span><em>Factory
        Method</em><span class="Apple-converted-space">&nbsp;</span>pattern from<span
        class="Apple-converted-space">&nbsp;</span><em>Design Patterns</em><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. The static factory method
      described in this item has no direct equivalent in<span class="Apple-converted-space">&nbsp;</span><em>Design
        Patterns</em>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      class can provide its clients with static factory methods instead of, or
      in addition to, public constructors. Providing a static factory method
      instead of a public constructor has both advantages and disadvantages.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>One
        advantage of static factory methods is that, unlike constructors, they
        have names.</strong><span class="Apple-converted-space">&nbsp;</span>If
      the parameters to a constructor do not, in and of themselves, describe the
      object being returned, a static factory with a well-chosen name is easier
      to use and the resulting client code easier to read. For example, the<span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_6"></span>constructor<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger(int,
        int, Random)</code>, which returns a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code><span class="Apple-converted-space">&nbsp;</span>that
      is probably prime, would have been better expressed as a static factory
      method named<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger.probablePrime</code>.
      (This method was added in Java 4.)</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      class can have only a single constructor with a given signature.
      Programmers have been known to get around this restriction by providing
      two constructors whose parameter lists differ only in the order of their
      parameter types. This is a really bad idea. The user of such an API will
      never be able to remember which constructor is which and will end up
      calling the wrong one by mistake. People reading code that uses these
      constructors will not know what the code does without referring to the
      class documentation.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      they have names, static factory methods don’t share the restriction
      discussed in the previous paragraph. In cases where a class seems to
      require multiple constructors with the same signature, replace the
      constructors with static factory methods and carefully chosen names to
      highlight their differences.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        second advantage of static factory methods is that, unlike constructors,
        they are not required to create a new object each time they’re invoked.</strong><span
        class="Apple-converted-space">&nbsp;</span>This allows immutable classes
      (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item 17</a>) to
      use preconstructed instances, or to cache instances as they’re
      constructed, and dispense them repeatedly to avoid creating unnecessary
      duplicate objects. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Boolean.valueOf(boolean)</code><span
        class="Apple-converted-space">&nbsp;</span>method illustrates this
      technique: it<span class="Apple-converted-space">&nbsp;</span><em>never</em><span
        class="Apple-converted-space">&nbsp;</span>creates an object. This
      technique is similar to the<span class="Apple-converted-space">&nbsp;</span><em>Flyweight</em><span
        class="Apple-converted-space">&nbsp;</span>pattern [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. It can greatly improve
      performance if equivalent objects are requested often, especially if they
      are expensive to create.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      ability of static factory methods to return the same object from repeated
      invocations allows classes to maintain strict control over what instances
      exist at any time. Classes that do this are said to be<span class="Apple-converted-space">&nbsp;</span><em>instance-controlled.</em><span
        class="Apple-converted-space">&nbsp;</span>There are several reasons to
      write instance-controlled classes. Instance control allows a class to
      guarantee that it is a singleton (<a href="ch2.xhtml#lev3" style="text-decoration: none;">Item
        3</a>) or noninstantiable (<a href="ch2.xhtml#lev4" style="text-decoration: none;">Item
        4</a>). Also, it allows an immutable value class (<a href="ch4.xhtml#lev17"
        style="text-decoration: none;">Item 17</a>) to make the guarantee that
      no two equal instances exist:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">a.equals(b)</code><span class="Apple-converted-space">&nbsp;</span>if
      and only if<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">a
        == b</code>. This is the basis of the<span class="Apple-converted-space">&nbsp;</span><em>Flyweight</em><span
        class="Apple-converted-space">&nbsp;</span>pattern [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. Enum types (<a href="ch6.xhtml#lev34"
        style="text-decoration: none;">Item 34</a>) provide this guarantee.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        third advantage of static factory methods is that, unlike constructors,
        they can return an object of any subtype of their return type.</strong><span
        class="Apple-converted-space">&nbsp;</span>This gives you great
      flexibility in choosing the class of the returned object.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      application of this flexibility is that an API can return objects without
      making their classes public. Hiding implementation classes in this fashion
      leads to a very compact API. This technique lends itself to<span class="Apple-converted-space">&nbsp;</span><em>interface-based
        frameworks</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch4.xhtml#lev20"
        style="text-decoration: none;">Item 20</a>), where interfaces provide
      natural return types for static factory methods.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_7"></span>Prior to Java 8, interfaces
      couldn’t have static methods. By convention, static factory methods for an
      interface named<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><em>Type</em></code><span
        class="Apple-converted-space">&nbsp;</span>were put in a<em>noninstantiable
        companion class</em><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch2.xhtml#lev4" style="text-decoration: none;">Item 4</a>) named<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><em>Types</em></code>.
      For example, the Java Collections Framework has forty-five utility
      implementations of its interfaces, providing unmodifiable collections,
      synchronized collections, and the like. Nearly all of these
      implementations are exported via static factory methods in one
      noninstantiable class (<code style="font-family: 'Courier New', monospace;">java.util.Collections</code>).
      The classes of the returned objects are all nonpublic.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      Collections Framework API is much smaller than it would have been had it
      exported forty-five separate public classes, one for each convenience
      implementation. It is not just the<span class="Apple-converted-space">&nbsp;</span><em>bulk</em><span
        class="Apple-converted-space">&nbsp;</span>of the API that is reduced
      but the<span class="Apple-converted-space">&nbsp;</span><em>conceptual
        weight:</em><span class="Apple-converted-space">&nbsp;</span>the number
      and difficulty of the concepts that programmers must master in order to
      use the API. The programmer knows that the returned object has precisely
      the API specified by its interface, so there is no need to read additional
      class documentation for the implementation class. Furthermore, using such
      a static factory method requires the client to refer to the returned
      object by interface rather than implementation class, which is generally
      good practice (<a href="ch9.xhtml#lev64" style="text-decoration: none;">Item
        64</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      of Java 8, the restriction that interfaces cannot contain static methods
      was eliminated, so there is typically little reason to provide a
      noninstantiable companion class for an interface. Many public static
      members that would have been at home in such a class should instead be put
      in the interface itself. Note, however, that it may still be necessary to
      put the bulk of the implementation code behind these static methods in a
      separate package-private class. This is because Java 8 requires all static
      members of an interface to be public. Java 9 allows private static
      methods, but static fields and static member classes are still required to
      be public.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        fourth advantage of static factories is that the class of the returned
        object can vary from call to call as a function of the input parameters.</strong><span
        class="Apple-converted-space">&nbsp;</span>Any subtype of the declared
      return type is permissible. The class of the returned object can also vary
      from release to release.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">EnumSet</code><span
        class="Apple-converted-space">&nbsp;</span>class (<a href="ch6.xhtml#lev36"
        style="text-decoration: none;">Item 36</a>) has no public constructors,
      only static factories. In the OpenJDK implementation, they return an
      instance of one of two subclasses, depending on the size of the underlying
      enum type: if it has sixty-four or fewer elements, as most enum types do,
      the static factories return a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">RegularEnumSet</code><span
        class="Apple-converted-space">&nbsp;</span>instance, which is backed by
      a single<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">long</code>;
      if the enum type has sixty-five or more elements, the factories return a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">JumboEnumSet</code><span
        class="Apple-converted-space">&nbsp;</span>instance, backed by a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">long</code><span class="Apple-converted-space">&nbsp;</span>array.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      existence of these two implementation classes is invisible to clients. If<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">RegularEnumSet</code><span
        class="Apple-converted-space">&nbsp;</span>ceased to offer performance
      advantages for small enum types, it could be eliminated from a future
      release with no ill effects. Similarly, a future release could add a third
      or fourth implementation of<code style="font-family: 'Courier New', monospace;">EnumSet</code><span
        class="Apple-converted-space">&nbsp;</span>if it proved beneficial<span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_8"></span>for
      performance. Clients neither know nor care about the class of the object
      they get back from the factory; they care only that it is some subclass of<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">EnumSet</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        fifth advantage of static factories is that the class of the returned
        object need not exist when the class containing the method is written.</strong><span
        class="Apple-converted-space">&nbsp;</span>Such flexible static factory
      methods form the basis of<span class="Apple-converted-space">&nbsp;</span><em>service
        provider frameworks</em>, like the Java Database Connectivity API
      (JDBC). A service provider framework is a system in which providers
      implement a service, and the system makes the implementations available to
      clients, decoupling the clients from the implementations.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are three essential components in a service provider framework: a<span class="Apple-converted-space">&nbsp;</span><em>service
        interface</em>, which represents an implementation; a<span class="Apple-converted-space">&nbsp;</span><em>provider
        registration API</em>, which providers use to register implementations;
      and a<span class="Apple-converted-space">&nbsp;</span><em>service access
        API</em>, which clients use to obtain instances of the service. The
      service access API may allow clients to specify criteria for choosing an
      implementation. In the absence of such criteria, the API returns an
      instance of a default implementation, or allows the client to cycle
      through all available implementations. The service access API is the
      flexible static factory that forms the basis of the service provider
      framework.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">An
      optional fourth component of a service provider framework is a<span class="Apple-converted-space">&nbsp;</span><em>service
        provider interface</em>, which describes a factory object that produce
      instances of the service interface. In the absence of a service provider
      interface, implementations must be instantiated reflectively (<a href="ch9.xhtml#lev65"
        style="text-decoration: none;">Item 65</a>). In the case of JDBC,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Connection</code><span class="Apple-converted-space">&nbsp;</span>plays
      the part of the service interface,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">DriverManager.registerDriver</code><span
        class="Apple-converted-space">&nbsp;</span>is the provider registration
      API,<code style="font-family: 'Courier New', monospace;">DriverManager.getConnection</code><span
        class="Apple-converted-space">&nbsp;</span>is the service access API,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Driver</code><span
        class="Apple-converted-space">&nbsp;</span>is the service provider
      interface.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are many variants of the service provider framework pattern. For example,
      the service access API can return a richer service interface to clients
      than the one furnished by providers. This is the<span class="Apple-converted-space">&nbsp;</span><em>Bridge</em><span
        class="Apple-converted-space">&nbsp;</span>pattern [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. Dependency injection
      frameworks (<a href="ch2.xhtml#lev5" style="text-decoration: none;">Item 5</a>)
      can be viewed as powerful service providers. Since Java 6, the platform
      includes a general-purpose service provider framework,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util.ServiceLoader</code>,
      so you needn’t, and generally shouldn’t, write your own (<a href="ch9.xhtml#lev59"
        style="text-decoration: none;">Item 59</a>). JDBC doesn’t use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ServiceLoader</code>, as
      the former predates the latter.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        main limitation of providing only static factory methods is that classes
        without public or protected constructors cannot be subclassed.</strong><span
        class="Apple-converted-space">&nbsp;</span>For example, it is impossible
      to subclass any of the convenience implementation classes in the
      Collections Framework. Arguably this can be a blessing in disguise because
      it encourages programmers to use composition instead of inheritance (<a href="ch4.xhtml#lev18"
        style="text-decoration: none;">Item 18</a>), and is required for
      immutable types (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item
        17</a>).</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        second shortcoming of static factory methods is that they are hard for
        programmers to find.</strong><span class="Apple-converted-space">&nbsp;</span>They
      do not stand out in API documentation in the way<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_9"></span>that constructors do, so it can
      be difficult to figure out how to instantiate a class that provides static
      factory methods instead of constructors. The Javadoc tool may someday draw
      attention to static factory methods. In the meantime, you can reduce this
      problem by drawing attention to static factories in class or interface
      documentation and by adhering to common naming conventions. Here are some
      common names for static factory methods. This list is far from exhaustive:</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>from</strong></code>—A<span
        class="Apple-converted-space">&nbsp;</span><em>type-conversion method</em><span
        class="Apple-converted-space">&nbsp;</span>that takes a single parameter
      and returns a corresponding instance of this type, for example:</p>
    <p class="codepb" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 10.666667px; margin-bottom: 10.666667px; margin-left: 36px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Date
      d = Date.from(instant);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>of</strong></code>—An<span
        class="Apple-converted-space">&nbsp;</span><em>aggregation method</em><span
        class="Apple-converted-space">&nbsp;</span>that takes multiple
      parameters and returns an instance of this type that incorporates them,
      for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex2a" id="pch2ex2" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Set&lt;Rank&gt;
      faceCards = EnumSet.of(JACK, QUEEN, KING);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>valueOf</strong></code>—A
      more verbose alternative to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">from</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">of</code>,
      for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex3a" id="pch2ex3" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">BigInteger
      prime = BigInteger.valueOf(Integer.MAX_VALUE);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>instance</strong></code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>getInstance</strong></code>—Returns
      an instance that is described by its parameters (if any) but cannot be
      said to have the same value, for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex4a" id="pch2ex4" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">StackWalker
      luke = StackWalker.getInstance(options);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>create</strong></code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>newInstance</strong></code>—Like<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">instance</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">getInstance</code>,
      except that the method guarantees that each call returns a new instance,
      for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex5a" id="pch2ex5" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Object
      newArray = Array.newInstance(classObject, arrayLen);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>get</strong></code><em><strong>Type</strong></em>—Like<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">getInstance</code>,
      but used if the factory method is in a different class.<span class="Apple-converted-space">&nbsp;</span><em>Type</em><span
        class="Apple-converted-space">&nbsp;</span>is the type of object
      returned by the factory method, for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex6a" id="pch2ex6" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">FileStore
      fs = Files.getFileStore(path);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>new</strong></code><em><strong>Type</strong></em>—Like<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">newInstance</code>,
      but used if the factory method is in a different class.<span class="Apple-converted-space">&nbsp;</span><em>Type</em><span
        class="Apple-converted-space">&nbsp;</span>is the type of object
      returned by the factory method, for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex7a" id="pch2ex7" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">BufferedReader
      br = Files.newBufferedReader(path);</p>
    <p class="bull" style="margin-top: 0px; margin-bottom: 0px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><em><strong>type</strong></em>—A
      concise alternative to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">get</code><em>Type</em><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">new</code><em>Type</em>,
      for example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex8a" id="pch2ex8" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">List&lt;Complaint&gt;
      litany = Collections.list(legacyLitany);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, static factory methods and public constructors both have their
      uses, and it pays to understand their relative merits. Often static
      factories are preferable, so avoid the reflex to provide public
      constructors without first considering static factories.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev2" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_10"></span><strong>Item 2: Consider a builder when faced with
        many constructor parameters</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Static
      factories and constructors share a limitation: they do not scale well to
      large numbers of optional parameters. Consider the case of a class
      representing the Nutrition Facts label that appears on packaged foods.
      These labels have a few required fields—serving size, servings per
      container, and calories per serving—and more than twenty optional
      fields—total fat, saturated fat, trans fat, cholesterol, sodium, and so
      on. Most products have nonzero values for only a few of these optional
      fields.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">What
      sort of constructors or static factories should you write for such a
      class? Traditionally, programmers have used the<span class="Apple-converted-space">&nbsp;</span><em>telescoping
        constructor</em>pattern, in which you provide a constructor with only
      the required parameters, another with a single optional parameter, a third
      with two optional parameters, and so on, culminating in a constructor with
      all the optional parameters. Here’s how it looks in practice. For
      brevity’s sake, only four optional fields are shown:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex9a" id="pch2ex9" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Telescoping constructor pattern - does not scale well!</strong><br>
      public class NutritionFacts {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int servingSize;&nbsp;&nbsp;//
(mL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;required<br>&nbsp;&nbsp;&nbsp;&nbsp;private
      final int servings;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (per container)
      required<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int
      calories;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (per
      serving)&nbsp;&nbsp;&nbsp;optional<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int
      fat;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
      (g/serving)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optional<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int
      sodium;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
      (mg/serving)&nbsp;&nbsp;&nbsp;&nbsp;optional<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int carbohydrate; //
      (g/serving)&nbsp;&nbsp;&nbsp;&nbsp; optional<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts(int servingSize, int
      servings) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(servingSize,
      servings, 0);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts(int servingSize, int
      servings,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
      calories) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(servingSize,
      servings, calories, 0);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts(int servingSize, int
      servings,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
      calories, int fat) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(servingSize,
      servings, calories, fat, 0);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts(int servingSize, int
      servings,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
      calories, int fat, int sodium) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(servingSize,
      servings, calories, fat, sodium, 0);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <span epub:type="pagebreak" id="page_11"></span><br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts(int servingSize, int
      servings,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int calories,
      int fat, int sodium, int carbohydrate) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.servingSize&nbsp;&nbsp;=
      servingSize;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.servings&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
      servings;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.calories&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
      calories;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.fat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
      fat;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.sodium&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      = sodium;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.carbohydrate =
      carbohydrate;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      you want to create an instance, you use the constructor with the shortest
      parameter list containing all the parameters you want to set:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex10a" id="pch2ex10" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">NutritionFacts
      cocaCola =<br>
      &nbsp;&nbsp;&nbsp;&nbsp;new NutritionFacts(240, 8, 100, 0, 35, 27);</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Typically
      this constructor invocation will require many parameters that you don’t
      want to set, but you’re forced to pass a value for them anyway. In this
      case, we passed a value of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">0</code><span class="Apple-converted-space">&nbsp;</span>for<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">fat</code>.
      With “only” six parameters this may not seem so bad, but it quickly gets
      out of hand as the number of parameters increases.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      short,<span class="Apple-converted-space">&nbsp;</span><strong>the
        telescoping constructor pattern works, but it is hard to write client
        code when there are many parameters, and harder still to read it.</strong><span
        class="Apple-converted-space">&nbsp;</span>The reader is left wondering
      what all those values mean and must carefully count parameters to find
      out. Long sequences of identically typed parameters can cause subtle bugs.
      If the client accidentally reverses two such parameters, the compiler
      won’t complain, but the program will misbehave at runtime (<a href="ch8.xhtml#lev51"
        style="text-decoration: none;">Item 51</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      second alternative when you’re faced with many optional parameters in a
      constructor is the<span class="Apple-converted-space">&nbsp;</span><em>JavaBeans</em><span
        class="Apple-converted-space">&nbsp;</span>pattern, in which you call a
      parameterless constructor to create the object and then call setter
      methods to set each required parameter and each optional parameter of
      interest:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex11a" id="pch2ex11" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        JavaBeans Pattern - allows inconsistency, mandates mutability</strong><br>
      public class NutritionFacts {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Parameters initialized to default values (if
      any)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int servingSize&nbsp;&nbsp;= -1; //
      Required; no default value<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int servings&nbsp;&nbsp;&nbsp;&nbsp; = -1;
      // Required; no default value<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int calories&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int
      fat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int
      sodium&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int carbohydrate = 0;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts() { }<br>
      <span epub:type="pagebreak" id="page_12"></span>&nbsp;&nbsp;&nbsp;&nbsp;//
      Setters<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setServingSize(int val)&nbsp;&nbsp;{
      servingSize = val; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setServings(int val)&nbsp;&nbsp;&nbsp;
      { servings = val; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setCalories(int val)&nbsp;&nbsp;&nbsp;
      { calories = val; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setFat(int
      val)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ fat = val; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setSodium(int
      val)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ sodium = val; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void setCarbohydrate(int val) {
      carbohydrate = val; }<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      pattern has none of the disadvantages of the telescoping constructor
      pattern. It is easy, if a bit wordy, to create instances, and easy to read
      the resulting code:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex12a" id="pch2ex12" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">NutritionFacts
      cocaCola = new NutritionFacts();<br>
      cocaCola.setServingSize(240);<br>
      cocaCola.setServings(8);<br>
      cocaCola.setCalories(100);<br>
      cocaCola.setSodium(35);<br>
      cocaCola.setCarbohydrate(27);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Unfortunately,
      the JavaBeans pattern has serious disadvantages of its own. Because
      construction is split across multiple calls,<span class="Apple-converted-space">&nbsp;</span><strong>a
        JavaBean may be in an inconsistent state partway through its
        construction.</strong><span class="Apple-converted-space">&nbsp;</span>The
      class does not have the option of enforcing consistency merely by checking
      the validity of the constructor parameters. Attempting to use an object
      when it’s in an inconsistent state may cause failures that are far removed
      from the code containing the bug and hence difficult to debug. A related
      disadvantage is that<span class="Apple-converted-space">&nbsp;</span><strong>the
        JavaBeans pattern precludes the possibility of making a class immutable</strong><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item
        17</a>) and requires added effort on the part of the programmer to
      ensure thread safety.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is possible to reduce these disadvantages by manually “freezing” the
      object when its construction is complete and not allowing it to be used
      until frozen, but this variant is unwieldy and rarely used in practice.
      Moreover, it can cause errors at runtime because the compiler cannot
      ensure that the programmer calls the freeze method on an object before
      using it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Luckily,
      there is a third alternative that combines the safety of the telescoping
      constructor pattern with the readability of the JavaBeans pattern. It is a
      form of the<span class="Apple-converted-space">&nbsp;</span><em>Builder</em><span
        class="Apple-converted-space">&nbsp;</span>pattern [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. Instead of making the
      desired object directly, the client calls a constructor (or static
      factory) with all of the required parameters and gets a<span class="Apple-converted-space">&nbsp;</span><em>builder
        object</em>. Then the client calls setter-like methods on the builder
      object to set each optional parameter of interest. Finally, the client
      calls a parameterless<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">build</code><span class="Apple-converted-space">&nbsp;</span>method
      to generate the object, which is typically immutable. The builder is
      typically a static member class (<a href="ch4.xhtml#lev24" style="text-decoration: none;">Item
        24</a>) of the class it builds. Here’s how it looks in practice:</p>
    <span epub:type="pagebreak" id="page_13" style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"></span><span
      style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;"></span>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex13a" id="pch2ex13" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Builder Pattern</strong><br>
      public class NutritionFacts {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int servingSize;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int servings;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int calories;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int fat;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int sodium;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int carbohydrate;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static class Builder {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Required parameters<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private final int
      servingSize;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private final int
      servings;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Optional parameters -
      initialized to default values<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int
      calories&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int
      fat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int
      sodium&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int
      carbohydrate&nbsp;&nbsp;= 0;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder(int
      servingSize, int servings) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.servingSize
      = servingSize;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.servings&nbsp;&nbsp;&nbsp;&nbsp;=
      servings;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder
      calories(int val)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      calories = val;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder fat(int
      val)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      fat = val;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      return this; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder sodium(int
      val)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      sodium = val;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;
      }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder
      carbohydrate(int val)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      carbohydrate = val;&nbsp;&nbsp;return this; }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public NutritionFacts
      build() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      new NutritionFacts(this);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private NutritionFacts(Builder builder) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;servingSize&nbsp;&nbsp;=
      builder.servingSize;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;servings&nbsp;&nbsp;&nbsp;&nbsp;
      = builder.servings;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calories&nbsp;&nbsp;&nbsp;&nbsp;
      = builder.calories;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
      builder.fat;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sodium&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      = builder.sodium;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;carbohydrate =
      builder.carbohydrate;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_14"></span>The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">NutritionFacts</code><span
        class="Apple-converted-space">&nbsp;</span>class is immutable, and all
      parameter default values are in one place. The builder’s setter methods
      return the builder itself so that invocations can be chained, resulting in
      a<span class="Apple-converted-space">&nbsp;</span><em>fluent API</em>.
      Here’s how the client code looks:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex14a" id="pch2ex14" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">NutritionFacts
      cocaCola = new NutritionFacts.Builder(240, 8)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.calories(100).sodium(35).carbohydrate(27).build();</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      client code is easy to write and, more importantly, easy to read.<span class="Apple-converted-space">&nbsp;</span><strong>The
        Builder pattern simulates named optional parameters</strong><span class="Apple-converted-space">&nbsp;</span>as
      found in Python and Scala.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Validity
      checks were omitted for brevity. To detect invalid parameters as soon as
      possible, check parameter validity in the builder’s constructor and
      methods. Check invariants involving multiple parameters in the constructor
      invoked by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">build</code><span
        class="Apple-converted-space">&nbsp;</span>method. To ensure these
      invariants against attack, do the checks on object fields after copying
      parameters from the builder (<a href="ch8.xhtml#lev50" style="text-decoration: none;">Item
        50</a>). If a check fails, throw an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">IllegalArgumentException</code>(<a
        href="ch10.xhtml#lev72" style="text-decoration: none;">Item 72</a>)
      whose detail message indicates which parameters are invalid (<a href="ch10.xhtml#lev75"
        style="text-decoration: none;">Item 75</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        Builder pattern is well suited to class hierarchies.</strong><span class="Apple-converted-space">&nbsp;</span>Use
      a parallel hierarchy of builders, each nested in the corresponding class.
      Abstract classes have abstract builders; concrete classes have concrete
      builders. For example, consider an abstract class at the root of a
      hierarchy representing various kinds of pizza:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex15a" id="pch2ex15" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Builder pattern for class hierarchies</strong><br>
      public abstract class Pizza {<br>
      &nbsp;&nbsp;&nbsp;public enum Topping { HAM, MUSHROOM, ONION, PEPPER,
      SAUSAGE }<br>
      &nbsp;&nbsp;&nbsp;final Set&lt;Topping&gt; toppings;<br>
      <br>
      &nbsp;&nbsp;&nbsp;abstract static class<span class="Apple-converted-space">&nbsp;</span><strong>Builder&lt;T
        extends Builder&lt;T&gt;&gt;</strong><span class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EnumSet&lt;Topping&gt; toppings =
      EnumSet.noneOf(Topping.class);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public T addTopping(Topping topping) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      toppings.add(Objects.requireNonNull(topping));<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span><strong>return
        self();</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abstract Pizza build();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>// Subclasses must override
        this method to return "this"</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>protected abstract T self();</strong><br>
      &nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;Pizza(Builder&lt;?&gt; builder) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toppings = builder.toppings.clone();
      // See Item&nbsp;&nbsp;50<br>
      &nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Pizza.Builder</code><span
        class="Apple-converted-space">&nbsp;</span>is a<span class="Apple-converted-space">&nbsp;</span><em>generic
        type</em><span class="Apple-converted-space">&nbsp;</span>with a<span class="Apple-converted-space">&nbsp;</span><em>recursive
        type parameter</em><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch5.xhtml#lev30" style="text-decoration: none;">Item 30</a>).
      This, along with the abstract<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">self</code><span class="Apple-converted-space">&nbsp;</span>method,
      allows method chaining to work properly in subclasses, without the need
      for casts. This workaround for the fact that Java lacks a self type is
      known as the<em>simulated self-type</em><span class="Apple-converted-space">&nbsp;</span>idiom.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_15"></span>Here are two concrete
      subclasses of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Pizza</code>,
      one of which represents a standard New-York-style pizza, the other a
      calzone. The former has a required size parameter, while the latter lets
      you specify whether sauce should be inside or out:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex16a" id="pch2ex16" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class NyPizza extends Pizza {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public enum Size { SMALL, MEDIUM, LARGE }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Size size;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static class Builder extends
      Pizza.Builder&lt;Builder&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private final Size size;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder(Size size)
      {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.size
      = Objects.requireNonNull(size);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public NyPizza
      build() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      new NyPizza(this);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override protected
      Builder self() { return this; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private NyPizza(Builder builder) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(builder);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = builder.size;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }<br>
      <br>
      public class Calzone extends Pizza {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final boolean sauceInside;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static class Builder extends
      Pizza.Builder&lt;Builder&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private boolean
      sauceInside = false; // Default<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Builder
      sauceInside() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sauceInside
      = true;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      this;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public Calzone
      build() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      new Calzone(this);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override protected
      Builder self() { return this; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Calzone(Builder builder) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(builder);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sauceInside =
      builder.sauceInside;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_16"></span>Note that the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">build</code><span class="Apple-converted-space">&nbsp;</span>method
      in each subclass’s builder is declared to return the correct subclass: the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">build</code><span
        class="Apple-converted-space">&nbsp;</span>method of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">NyPizza.Builder</code>returns<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">NyPizza</code>,
      while the one in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Calzone.Builder</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Calzone</code>. This
      technique, wherein a subclass method is declared to return a subtype of
      the return type declared in the super-class, is known as<span class="Apple-converted-space">&nbsp;</span><em>covariant
        return typing</em>. It allows clients to use these builders without the
      need for casting.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      client code for these “hierarchical builders” is essentially identical to
      the code for the simple<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">NutritionFacts</code><span
        class="Apple-converted-space">&nbsp;</span>builder. The example client
      code shown next assumes static imports on enum constants for brevity:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex17a" id="pch2ex17" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">NyPizza
      pizza = new NyPizza.Builder(SMALL)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.addTopping(SAUSAGE).addTopping(ONION).build();<br>
      Calzone calzone = new Calzone.Builder()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.addTopping(HAM).sauceInside().build();</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      minor advantage of builders over constructors is that builders can have
      multiple varargs parameters because each parameter is specified in its own
      method. Alternatively, builders can aggregate the parameters passed into
      multiple calls to a method into a single field, as demonstrated in the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addTopping</code><span
        class="Apple-converted-space">&nbsp;</span>method earlier.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      Builder pattern is quite flexible. A single builder can be used repeatedly
      to build multiple objects. The parameters of the builder can be tweaked
      between invocations of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">build</code><span class="Apple-converted-space">&nbsp;</span>method
      to vary the objects that are created. A builder can fill in some fields
      automatically upon object creation, such as a serial number that increases
      each time an object is created.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      Builder pattern has disadvantages as well. In order to create an object,
      you must first create its builder. While the cost of creating this builder
      is unlikely to be noticeable in practice, it could be a problem in
      performance-critical situations. Also, the Builder pattern is more verbose
      than the telescoping constructor pattern, so it should be used only if
      there are enough parameters to make it worthwhile, say four or more. But
      keep in mind that you may want to add more parameters in the future. But
      if you start out with constructors or static factories and switch to a
      builder when the class evolves to the point where the number of parameters
      gets out of hand, the obsolete constructors or static factories will stick
      out like a sore thumb. Therefore, it’s often better to start with a
      builder in the first place.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary,<span class="Apple-converted-space">&nbsp;</span><strong>the
        Builder pattern is a good choice when designing classes whose
        constructors or static factories would have more than a handful of
        parameters</strong>, especially if many of the parameters are optional
      or of identical type. Client code is much easier to read and write with
      builders than with telescoping constructors, and builders are much safer
      than JavaBeans.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev3" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_17"></span><strong>Item 3: Enforce the singleton property with
        a private constructor or an enum type</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A<span
        class="Apple-converted-space">&nbsp;</span><em>singleton</em><span class="Apple-converted-space">&nbsp;</span>is
      simply a class that is instantiated exactly once [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]. Singletons typically
      represent either a stateless object such as a function (<a href="ch4.xhtml#lev24"
        style="text-decoration: none;">Item 24</a>) or a system component that
      is intrinsically unique.<span class="Apple-converted-space">&nbsp;</span><strong>Making
        a class a singleton can make it difficult to test its clients</strong><span
        class="Apple-converted-space">&nbsp;</span>because it’s impossible to
      substitute a mock implementation for a singleton unless it implements an
      interface that serves as its type.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are two common ways to implement singletons. Both are based on keeping the
      constructor private and exporting a public static member to provide access
      to the sole instance. In one approach, the member is a final field:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex18a" id="pch2ex18" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Singleton with public final field</strong><br>
      public class Elvis {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public static final Elvis INSTANCE = new
        Elvis();</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Elvis() { ... }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void leaveTheBuilding() { ... }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      private constructor is called only once, to initialize the public static
      final field<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Elvis.INSTANCE</code>.
      The lack of a public or protected constructor<em>guarantees</em><span class="Apple-converted-space">&nbsp;</span>a
      “monoelvistic” universe: exactly one<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Elvis</code><span class="Apple-converted-space">&nbsp;</span>instance
      will exist once the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Elvis</code><span class="Apple-converted-space">&nbsp;</span>class
      is initialized—no more, no less. Nothing that a client does can change
      this, with one caveat: a privileged client can invoke the private
      constructor reflectively (<a href="ch9.xhtml#lev65" style="text-decoration: none;">Item
        65</a>) with the aid of the<code style="font-family: 'Courier New', monospace;">AccessibleObject.setAccessible</code><span
        class="Apple-converted-space">&nbsp;</span>method. If you need to defend
      against this attack, modify the constructor to make it throw an exception
      if it’s asked to create a second instance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      the second approach to implementing singletons, the public member is a
      static factory method:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex19a" id="pch2ex19" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Singleton with static factory</strong><br>
      public class Elvis {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>private</strong><span class="Apple-converted-space">&nbsp;</span>static
      final Elvis INSTANCE = new Elvis();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Elvis() { ... }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public static Elvis getInstance()</strong><span
        class="Apple-converted-space">&nbsp;</span>{ return INSTANCE; }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void leaveTheBuilding() { ... }<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">All
      calls to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Elvis.getInstance</code><span
        class="Apple-converted-space">&nbsp;</span>return the same object
      reference, and no other<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Elvis</code><span class="Apple-converted-space">&nbsp;</span>instance
      will ever be created (with the same caveat mentioned earlier).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_18"></span>The main advantage of the
      public field approach is that the API makes it clear that the class is a
      singleton: the public static field is final, so it will always contain the
      same object reference. The second advantage is that it’s simpler.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      advantage of the static factory approach is that it gives you the
      flexibility to change your mind about whether the class is a singleton
      without changing its API. The factory method returns the sole instance,
      but it could be modified to return, say, a separate instance for each
      thread that invokes it. A second advantage is that you can write a<span class="Apple-converted-space">&nbsp;</span><em>generic
        singleton factory</em><span class="Apple-converted-space">&nbsp;</span>if
      your application requires it (<a href="ch5.xhtml#lev30" style="text-decoration: none;">Item
        30</a>). A final advantage of using a static factory is that a<span class="Apple-converted-space">&nbsp;</span><em>method
        reference</em><span class="Apple-converted-space">&nbsp;</span>can be
      used as a supplier, for example<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Elvis::instance</code><span
        class="Apple-converted-space">&nbsp;</span>is a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Supplier&lt;Elvis&gt;</code>.
      Unless one of these advantages is relevant, the public field approach is
      preferable.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      make a singleton class that uses either of these approaches<span class="Apple-converted-space">&nbsp;</span><em>serializable</em><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch12.xhtml#ch12" style="text-decoration: none;">Chapter
        12</a>), it is not sufficient merely to add<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">implements Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>to its declaration. To
      maintain the singleton guarantee, declare all instance fields<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">transient</code><span class="Apple-converted-space">&nbsp;</span>and
      provide a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readResolve</code><span
        class="Apple-converted-space">&nbsp;</span>method (<a href="ch12.xhtml#lev89"
        style="text-decoration: none;">Item 89</a>). Otherwise, each time a
      serialized instance is deserialized, a new instance will be created,
      leading, in the case of our example, to spurious<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Elvis</code><span class="Apple-converted-space">&nbsp;</span>sightings.
      To prevent this from happening, add this<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">readResolve</code><span class="Apple-converted-space">&nbsp;</span>method
      to the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Elvis</code><span
        class="Apple-converted-space">&nbsp;</span>class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex20a" id="pch2ex20" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        readResolve method to preserve singleton property</strong><br>
      private Object readResolve() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp; // Return the one true Elvis and let the garbage
      collector<br>
      &nbsp;&nbsp;&nbsp;&nbsp; // take care of the Elvis impersonator.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return INSTANCE;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      third way to implement a singleton is to declare a single-element enum:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex21a" id="pch2ex21" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Enum singleton - the preferred approach</strong><br>
      public enum Elvis {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;INSTANCE;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void leaveTheBuilding() { ... }<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      approach is similar to the public field approach, but it is more concise,
      provides the serialization machinery for free, and provides an ironclad
      guarantee against multiple instantiation, even in the face of
      sophisticated serialization or reflection attacks. This approach may feel
      a bit unnatural, but<span class="Apple-converted-space">&nbsp;</span><strong>a
        single-element enum type is often the best way to implement a singleton</strong>.
      Note that you can’t use this approach if your singleton must extend a
      superclass other than<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Enum</code><span class="Apple-converted-space">&nbsp;</span>(though
      you<span class="Apple-converted-space">&nbsp;</span><em>can</em><span class="Apple-converted-space">&nbsp;</span>declare
      an enum to implement interfaces).</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev4" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_19"></span><strong>Item 4: Enforce noninstantiability with a
        private constructor</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Occasionally
      you’ll want to write a class that is just a grouping of static methods and
      static fields. Such classes have acquired a bad reputation because some
      people abuse them to avoid thinking in terms of objects, but they do have
      valid uses. They can be used to group related methods on primitive values
      or arrays, in the manner of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.lang.Math</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util.Arrays</code>.
      They can also be used to group static methods, including factories (<a href="ch2.xhtml#lev1"
        style="text-decoration: none;">Item 1</a>), for objects that implement
      some interface, in the manner of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util.Collections</code>.
      (As of Java 8, you can also put such methods<span class="Apple-converted-space">&nbsp;</span><em>in</em><span
        class="Apple-converted-space">&nbsp;</span>the interface, assuming it’s
      yours to modify.) Lastly, such classes can be used to group methods on a
      final class, since you can’t put them in a subclass.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Such<span
        class="Apple-converted-space">&nbsp;</span><em>utility classes</em><span
        class="Apple-converted-space">&nbsp;</span>were not designed to be
      instantiated: an instance would be nonsensical. In the absence of explicit
      constructors, however, the compiler provides a public, parameterless<span
        class="Apple-converted-space">&nbsp;</span><em>default constructor</em>.
      To a user, this constructor is indistinguishable from any other. It is not
      uncommon to see unintentionally instantiable classes in published APIs.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Attempting
        to enforce noninstantiability by making a class abstract does not work.</strong><span
        class="Apple-converted-space">&nbsp;</span>The class can be subclassed
      and the subclass instantiated. Furthermore, it misleads the user into
      thinking the class was designed for inheritance (<a href="ch4.xhtml#lev19"
        style="text-decoration: none;">Item 19</a>). There is, however, a simple
      idiom to ensure noninstantiability. A default constructor is generated
      only if a class contains no explicit constructors, so<span class="Apple-converted-space">&nbsp;</span><strong>a
        class can be made noninstantiable by including a private constructor</strong>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex22a" id="pch2ex22" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Noninstantiable utility class</strong><br>
      public class UtilityClass {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>// Suppress default constructor for
        noninstantiability</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;private UtilityClass() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      AssertionError();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      the explicit constructor is private, it is inaccessible outside the class.
      The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AssertionError</code><span
        class="Apple-converted-space">&nbsp;</span>isn’t strictly required, but
      it provides insurance in case the constructor is accidentally invoked from
      within the class. It guarantees the class will never be instantiated under
      any circumstances. This idiom is mildly counterintuitive because the
      constructor is provided expressly so that it cannot be invoked. It is
      therefore wise to include a comment, as shown earlier.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      a side effect, this idiom also prevents the class from being subclassed.
      All constructors must invoke a superclass constructor, explicitly or
      implicitly, and a subclass would have no accessible superclass constructor
      to invoke.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev5" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_20"></span><strong>Item 5: Prefer dependency injection to
        hardwiring resources</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Many
      classes depend on one or more underlying resources. For example, a spell
      checker depends on a dictionary. It is not uncommon to see such classes
      implemented as static utility classes (<a href="ch2.xhtml#lev4" style="text-decoration: none;">Item
        4</a>):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex23a" id="pch2ex23" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Inappropriate use of static utility - inflexible &amp; untestable!</strong><br>
      public class SpellChecker {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final Lexicon dictionary = ...;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private SpellChecker() {} // Noninstantiable<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static boolean isValid(String word) { ... }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static List&lt;String&gt;
      suggestions(String typo) { ... }<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Similarly,
      it’s not uncommon to see them implemented as singletons (<a href="ch2.xhtml#lev3"
        style="text-decoration: none;">Item 3</a>):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex24a" id="pch2ex24" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Inappropriate use of singleton - inflexible &amp; untestable!</strong><br>
      public class SpellChecker {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Lexicon dictionary = ...;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private SpellChecker(...) {}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static INSTANCE = new SpellChecker(...);<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean isValid(String word) { ... }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public List&lt;String&gt; suggestions(String typo)
      { ... }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Neither
      of these approaches is satisfactory, because they assume that there is
      only one dictionary worth using. In practice, each language has its own
      dictionary, and special dictionaries are used for special vocabularies.
      Also, it may be desirable to use a special dictionary for testing. It is
      wishful thinking to assume that a single dictionary will suffice for all
      time.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      could try to have<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">SpellChecker</code><span
        class="Apple-converted-space">&nbsp;</span>support multiple dictionaries
      by making the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">dictionary</code><span
        class="Apple-converted-space">&nbsp;</span>field nonfinal and adding a
      method to change the dictionary in an existing spell checker, but this
      would be awkward, error-prone, and unworkable in a concurrent setting.<span
        class="Apple-converted-space">&nbsp;</span><strong>Static utility
        classes and singletons are inappropriate for classes whose behavior is
        parameterized by an underlying resource.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">What
      is required is the ability to support multiple instances of the class (in
      our example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">SpellChecker</code>),
      each of which uses the resource desired by the client (in our example, the
      dictionary). A simple pattern that satisfies this requirement is to<span class="Apple-converted-space">&nbsp;</span><strong>pass
        the resource into the constructor when creating a new instance</strong>.
      This is one form of<span class="Apple-converted-space">&nbsp;</span><em>dependency
        injection</em>: the dictionary is a<span class="Apple-converted-space">&nbsp;</span><em>dependency</em><span
        class="Apple-converted-space">&nbsp;</span>of the spell checker and is<span
        class="Apple-converted-space">&nbsp;</span><em>injected</em><span class="Apple-converted-space">&nbsp;</span>into
      the spell checker when it is created.</p>
    <span epub:type="pagebreak" id="page_21" style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"></span><span
      style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;"></span>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex25a" id="pch2ex25" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Dependency injection provides flexibility and testability</strong><br>
      public class SpellChecker {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Lexicon dictionary;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public SpellChecker(Lexicon dictionary)</strong><span
        class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.dictionary =
      Objects.requireNonNull(dictionary);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean isValid(String word) { ... }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public List&lt;String&gt; suggestions(String typo)
      { ... }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      dependency injection pattern is so simple that many programmers use it for
      years without knowing it has a name. While our spell checker example had
      only a single resource (the dictionary), dependency injection works with
      an arbitrary number of resources and arbitrary dependency graphs. It
      preserves immutability (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item
        17</a>), so multiple clients can share dependent objects (assuming the
      clients desire the same underlying resources). Dependency injection is
      equally applicable to constructors, static factories (<a href="ch2.xhtml#lev1"
        style="text-decoration: none;">Item 1</a>), and builders (<a href="ch2.xhtml#lev2"
        style="text-decoration: none;">Item 2</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      useful variant of the pattern is to pass a resource<span class="Apple-converted-space">&nbsp;</span><em>factory</em><span
        class="Apple-converted-space">&nbsp;</span>to the constructor. A factory
      is an object that can be called repeatedly to create instances of a type.
      Such factories embody the<span class="Apple-converted-space">&nbsp;</span><em>Factory
        Method</em><span class="Apple-converted-space">&nbsp;</span>pattern [<a
        href="ref.xhtml#rGamma95" style="text-decoration: none;">Gamma95</a>].
      The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Supplier&lt;T&gt;</code><span
        class="Apple-converted-space">&nbsp;</span>interface, introduced in Java
      8, is perfect for representing factories. Methods that take a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Supplier&lt;T&gt;</code><span
        class="Apple-converted-space">&nbsp;</span>on input should typically
      constrain the factory’s type parameter using a<span class="Apple-converted-space">&nbsp;</span><em>bounded
        wildcard type</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch5.xhtml#lev31"
        style="text-decoration: none;">Item 31</a>) to allow the client to pass
      in a factory that creates any subtype of a specified type. For example,
      here is a method that makes a mosaic using a client-provided factory to
      produce each tile:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex26a" id="pch2ex26" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Mosaic
      create(Supplier&lt;? extends Tile&gt; tileFactory) { ... }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Although
      dependency injection greatly improves flexibility and testability, it can
      clutter up large projects, which typically contain thousands of
      dependencies. This clutter can be all but eliminated by using a<span class="Apple-converted-space">&nbsp;</span><em>dependency
        injection framework</em>, such as Dagger [<a href="ref.xhtml#rDagger" style="text-decoration: none;">Dagger</a>],
      Guice [<a href="ref.xhtml#rGuice" style="text-decoration: none;">Guice</a>],
      or Spring [<a href="ref.xhtml#rSpring" style="text-decoration: none;">Spring</a>].
      The use of these frameworks is beyond the scope of this book, but note
      that APIs designed for manual dependency injection are trivially adapted
      for use by these frameworks.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, do not use a singleton or static utility class to implement a
      class that depends on one or more underlying resources whose behavior
      affects that of the class, and do not have the class create these
      resources directly. Instead, pass the resources, or factories to create
      them, into the constructor (or static factory or builder). This practice,
      known as dependency injection, will greatly enhance the flexibility,
      reusability, and testability of a class.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev6" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_22"></span><strong>Item 6: Avoid creating unnecessary objects</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is often appropriate to reuse a single object instead of creating a new
      functionally equivalent object each time it is needed. Reuse can be both
      faster and more stylish. An object can always be reused if it is immutable
      (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item 17</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      an extreme example of what not to do, consider this statement:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex27a" id="pch2ex27" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">String
      s = new String("bikini");&nbsp;&nbsp;<strong>// DON'T DO THIS!</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      statement creates a new<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>instance
      each time it is executed, and none of those object creations is necessary.
      The argument to the<code style="font-family: 'Courier New', monospace;">String</code><span
        class="Apple-converted-space">&nbsp;</span>constructor (<code style="font-family: 'Courier New', monospace;">"bikini"</code>)
      is itself a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code><span
        class="Apple-converted-space">&nbsp;</span>instance, functionally
      identical to all of the objects created by the constructor. If this usage
      occurs in a loop or in a frequently invoked method, millions of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>instances
      can be created needlessly.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      improved version is simply the following:</p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">String
      s = "bikini";</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      version uses a single<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>instance,
      rather than creating a new one each time it is executed. Furthermore, it
      is guaranteed that the object will be reused by any other code running in
      the same virtual machine that happens to contain the same string literal
      [JLS, 3.10.5].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      can often avoid creating unnecessary objects by using<span class="Apple-converted-space">&nbsp;</span><em>static
        factory methods</em><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch2.xhtml#lev1" style="text-decoration: none;">Item 1</a>) in
      preference to constructors on immutable classes that provide both. For
      example, the factory method<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Boolean.valueOf(String)</code><span
        class="Apple-converted-space">&nbsp;</span>is preferable to the
      constructor<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Boolean(String)</code>,
      which was deprecated in Java 9. The constructor<span class="Apple-converted-space">&nbsp;</span><em>must</em><span
        class="Apple-converted-space">&nbsp;</span>create a new object each time
      it’s called, while the factory method is never required to do so and won’t
      in practice. In addition to reusing immutable objects, you can also reuse
      mutable objects if you know they won’t be modified.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Some
      object creations are much more expensive than others. If you’re going to
      need such an “expensive object” repeatedly, it may be advisable to cache
      it for reuse. Unfortunately, it’s not always obvious when you’re creating
      such an object. Suppose you want to write a method to determine whether a
      string is a valid Roman numeral. Here’s the easiest way to do this using a
      regular expression:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex28a" id="pch2ex28" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Performance can be greatly improved!</strong><br>
      static boolean isRomanNumeral(String s) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return s.matches("^(?=.)M*(C[MD]|D?C{0,3})"<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+
      "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_23"></span>The problem with this
      implementation is that it relies on the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String.matches</code><span
        class="Apple-converted-space">&nbsp;</span>method.<span class="Apple-converted-space">&nbsp;</span><strong>While</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>String.matches</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>is the easiest way to
        check if a string matches a regular expression, it’s not suitable for
        repeated use in performance-critical situations.</strong><span class="Apple-converted-space">&nbsp;</span>The
      problem is that it internally creates a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Pattern</code><span class="Apple-converted-space">&nbsp;</span>instance
      for the regular expression and uses it only once, after which it becomes
      eligible for garbage collection. Creating a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Pattern</code><span class="Apple-converted-space">&nbsp;</span>instance
      is expensive because it requires compiling the regular expression into a
      finite state machine.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      improve the performance, explicitly compile the regular expression into a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Pattern</code><span
        class="Apple-converted-space">&nbsp;</span>instance (which is immutable)
      as part of class initialization, cache it, and reuse the same instance for
      every invocation of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">isRomanNumeral</code><span
        class="Apple-converted-space">&nbsp;</span>method:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex29a" id="pch2ex29" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Reusing expensive object for improved performance</strong><br>
      public class RomanNumerals {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final Pattern ROMAN =
      Pattern.compile(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^(?=.)M*(C[MD]|D?C{0,3})"<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+
      "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;static boolean isRomanNumeral(String s) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      ROMAN.matcher(s).matches();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      improved version of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">isRomanNumeral</code><span
        class="Apple-converted-space">&nbsp;</span>provides significant
      performance gains if invoked frequently. On my machine, the original
      version takes 1.1 µs on an 8-character input string, while the improved
      version takes 0.17 µs, which is 6.5 times faster. Not only is the
      performance improved, but arguably, so is clarity. Making a static final
      field for the otherwise invisible<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Pattern</code><span class="Apple-converted-space">&nbsp;</span>instance
      allows us to give it a name, which is far more readable than the regular
      expression itself.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      the class containing the improved version of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">isRomanNumeral</code><span
        class="Apple-converted-space">&nbsp;</span>method is initialized but the
      method is never invoked, the field<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ROMAN</code><span class="Apple-converted-space">&nbsp;</span>will
      be initialized needlessly. It would be possible to eliminate the
      initialization by<span class="Apple-converted-space">&nbsp;</span><em>lazily
        initializing</em><span class="Apple-converted-space">&nbsp;</span>the
      field (<a href="ch11.xhtml#lev83" style="text-decoration: none;">Item 83</a>)
      the first time the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">isRomanNumeral</code>method
      is invoked, but this is<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>recommended. As is often the
      case with lazy initialization, it would complicate the implementation with
      no measurable performance improvement (<a href="ch9.xhtml#lev67" style="text-decoration: none;">Item
        67</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      an object is immutable, it is obvious it can be reused safely, but there
      are other situations where it is far less obvious, even counterintuitive.
      Consider the case of<span class="Apple-converted-space">&nbsp;</span><em>adapters</em><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>]<em>,</em><span class="Apple-converted-space">&nbsp;</span>also
      known as<span class="Apple-converted-space">&nbsp;</span><em>views</em>.
      An adapter is an object that delegates to a backing object, providing an
      alternative interface. Because an adapter has no state beyond that of its
      backing object, there’s no need to create more than one instance of a
      given adapter to a given object.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_24"></span>For example, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">keySet</code><span class="Apple-converted-space">&nbsp;</span>method
      of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code><span
        class="Apple-converted-space">&nbsp;</span>interface returns a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>view
      of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code><span
        class="Apple-converted-space">&nbsp;</span>object, consisting of all the
      keys in the map. Naively, it would seem that every call to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">keySet</code><span class="Apple-converted-space">&nbsp;</span>would
      have to create a new<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>instance,
      but every call to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">keySet</code><span
        class="Apple-converted-space">&nbsp;</span>on a given<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code><span class="Apple-converted-space">&nbsp;</span>object
      may return the same<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>instance.
      Although the returned<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>instance
      is typically mutable, all of the returned objects are functionally
      identical: when one of the returned objects changes, so do all the others,
      because they’re all backed by the same<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code><span class="Apple-converted-space">&nbsp;</span>instance.
      While it is largely harmless to create multiple instances of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">keySet</code><span class="Apple-converted-space">&nbsp;</span>view
      object, it is unnecessary and has no benefits.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Another
      way to create unnecessary objects is<span class="Apple-converted-space">&nbsp;</span><em>autoboxing</em>,
      which allows the programmer to mix primitive and boxed primitive types,
      boxing and unboxing automatically as needed.<span class="Apple-converted-space">&nbsp;</span><strong>Autoboxing
        blurs but does not erase the distinction between primitive and boxed
        primitive types.</strong>There are subtle semantic distinctions and
      not-so-subtle performance differences (<a href="ch9.xhtml#lev61" style="text-decoration: none;">Item
        61</a>). Consider the following method, which calculates the sum of all
      the positive<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">int</code><span
        class="Apple-converted-space">&nbsp;</span>values. To do this, the
      program has to use<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">long</code><span
        class="Apple-converted-space">&nbsp;</span>arithmetic because an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>is
      not big enough to hold the sum of all the positive<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>values:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex30a" id="pch2ex30" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Hideously slow! Can you spot the object creation?</strong><br>
      private static long sum() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Long sum = 0L;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;for (long i = 0; i &lt;= Integer.MAX_VALUE; i++)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += i;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;return sum;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      program gets the right answer, but it is<span class="Apple-converted-space">&nbsp;</span><em>much</em><span
        class="Apple-converted-space">&nbsp;</span>slower than it should be, due
      to a one-character typographical error. The variable<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">sum</code><span class="Apple-converted-space">&nbsp;</span>is
      declared as a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Long</code><span
        class="Apple-converted-space">&nbsp;</span>instead of a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">long</code>, which means
      that the program constructs about 2<sup>31</sup><span class="Apple-converted-space">&nbsp;</span>unnecessary<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Long</code><span
        class="Apple-converted-space">&nbsp;</span>instances (roughly one for
      each time the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">long
        i</code><span class="Apple-converted-space">&nbsp;</span>is added to the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Long
        sum</code>). Changing the declaration of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">sum</code><span class="Apple-converted-space">&nbsp;</span>from<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Long</code><span
        class="Apple-converted-space">&nbsp;</span>to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">long</code><span class="Apple-converted-space">&nbsp;</span>reduces
      the runtime from 6.3 seconds to 0.59 seconds on my machine. The lesson is
      clear:<span class="Apple-converted-space">&nbsp;</span><strong>prefer
        primitives to boxed primitives, and watch out for unintentional
        autoboxing.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      item should not be misconstrued to imply that object creation is expensive
      and should be avoided. On the contrary, the creation and reclamation of
      small objects whose constructors do little explicit work is cheap,
      especially on modern JVM implementations. Creating additional objects to
      enhance the clarity, simplicity, or power of a program is generally a good
      thing.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Conversely,
      avoiding object creation by maintaining your own<span class="Apple-converted-space">&nbsp;</span><em>object
        pool</em><span class="Apple-converted-space">&nbsp;</span>is a bad idea
      unless the objects in the pool are extremely heavyweight. The classic<span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_25"></span>example
      of an object that<span class="Apple-converted-space">&nbsp;</span><em>does</em><span
        class="Apple-converted-space">&nbsp;</span>justify an object pool is a
      database connection. The cost of establishing the connection is
      sufficiently high that it makes sense to reuse these objects. Generally
      speaking, however, maintaining your own object pools clutters your code,
      increases memory footprint, and harms performance. Modern JVM
      implementations have highly optimized garbage collectors that easily
      outperform such object pools on lightweight objects.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      counterpoint to this item is<span class="Apple-converted-space">&nbsp;</span><a
        href="ch8.xhtml#lev50" style="text-decoration: none;">Item 50</a><span class="Apple-converted-space">&nbsp;</span>on<span
        class="Apple-converted-space">&nbsp;</span><em>defensive copying</em>.
      The present item says, “Don’t create a new object when you should reuse an
      existing one,” while<span class="Apple-converted-space">&nbsp;</span><a href="ch8.xhtml#lev50"
        style="text-decoration: none;">Item 50</a><span class="Apple-converted-space">&nbsp;</span>says,
      “Don’t reuse an existing object when you should create a new one.” Note
      that the penalty for reusing an object when defensive copying is called
      for is far greater than the penalty for needlessly creating a duplicate
      object. Failing to make defensive copies where required can lead to
      insidious bugs and security holes; creating objects unnecessarily merely
      affects style and performance.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev7" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_26"></span><strong>Item 7: Eliminate obsolete object references</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you switched from a language with manual memory management, such as C or
      C++, to a garbage-collected language such as Java, your job as a
      programmer was made much easier by the fact that your objects are
      automatically reclaimed when you’re through with them. It seems almost
      like magic when you first experience it. It can easily lead to the
      impression that you don’t have to think about memory management, but this
      isn’t quite true.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Consider
      the following simple stack implementation:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex31a" id="pch2ex31" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Can you spot the "memory leak"?</strong><br>
      public class Stack {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Object[] elements;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int size = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final int DEFAULT_INITIAL_CAPACITY
      = 16;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Stack() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements = new
      Object[DEFAULT_INITIAL_CAPACITY];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void push(Object e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacity();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements[size++] = e;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Object pop() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (size == 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw
      new EmptyStackException();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return elements[--size];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;/**<br>
      &nbsp;&nbsp;&nbsp;&nbsp; * Ensure space for at least one more element,
      roughly<br>
      &nbsp;&nbsp;&nbsp;&nbsp; * doubling the capacity each time the array needs
      to grow.<br>
      &nbsp;&nbsp;&nbsp;&nbsp; */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private void ensureCapacity() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elements.length ==
      size)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements
      = Arrays.copyOf(elements, 2 * size + 1);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There’s
      nothing obviously wrong with this program (but see<span class="Apple-converted-space">&nbsp;</span><a
        href="ch5.xhtml#lev29" style="text-decoration: none;">Item 29</a><span class="Apple-converted-space">&nbsp;</span>for
      a generic version). You could test it exhaustively, and it would pass
      every test with flying colors, but there’s a problem lurking. Loosely
      speaking, the program has a “memory leak,” which can silently manifest
      itself as reduced performance due to<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_27"></span>increased garbage collector
      activity or increased memory footprint. In extreme cases, such memory
      leaks can cause disk paging and even program failure with an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">OutOfMemoryError</code>,
      but such failures are relatively rare.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      where is the memory leak? If a stack grows and then shrinks, the objects
      that were popped off the stack will not be garbage collected, even if the
      program using the stack has no more references to them. This is because
      the stack maintains<span class="Apple-converted-space">&nbsp;</span><em>obsolete
        references</em><span class="Apple-converted-space">&nbsp;</span>to these
      objects. An obsolete reference is simply a reference that will never be
      dereferenced again. In this case, any references outside of the “active
      portion” of the element array are obsolete. The active portion consists of
      the elements whose index is less than<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">size</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Memory
      leaks in garbage-collected languages (more properly known as<span class="Apple-converted-space">&nbsp;</span><em>unintentional
        object retentions</em>) are insidious. If an object reference is
      unintentionally retained, not only is that object excluded from garbage
      collection, but so too are any objects referenced by that object, and so
      on. Even if only a few object references are unintentionally retained,
      many, many objects may be prevented from being garbage collected, with
      potentially large effects on performance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      fix for this sort of problem is simple: null out references once they
      become obsolete. In the case of our<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>class,
      the reference to an item becomes obsolete as soon as it’s popped off the
      stack. The corrected version of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">pop</code><span class="Apple-converted-space">&nbsp;</span>method
      looks like this:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex32a" id="pch2ex32" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      Object pop() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (size == 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      EmptyStackException();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Object result = elements[--size];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>elements[size] = null; // Eliminate
        obsolete reference</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">An
      added benefit of nulling out obsolete references is that if they are
      subsequently dereferenced by mistake, the program will immediately fail
      with a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">NullPointerException</code>,
      rather than quietly doing the wrong thing. It is always beneficial to
      detect programming errors as quickly as possible.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      programmers are first stung by this problem, they may overcompensate by
      nulling out every object reference as soon as the program is finished
      using it. This is neither necessary nor desirable; it clutters up the
      program unnecessarily.<span class="Apple-converted-space">&nbsp;</span><strong>Nulling
        out object references should be the exception rather than the norm.</strong><span
        class="Apple-converted-space">&nbsp;</span>The best way to eliminate an
      obsolete reference is to let the variable that contained the reference
      fall out of scope. This occurs naturally if you define each variable in
      the narrowest possible scope (<a href="ch9.xhtml#lev57" style="text-decoration: none;">Item
        57</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_28"></span>So when should you null out a
      reference? What aspect of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>class
      makes it susceptible to memory leaks? Simply put, it<span class="Apple-converted-space">&nbsp;</span><em>manages
        its own memory</em>. The<span class="Apple-converted-space">&nbsp;</span><em>storage
        pool</em><span class="Apple-converted-space">&nbsp;</span>consists of
      the elements of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">elements</code><span class="Apple-converted-space">&nbsp;</span>array
      (the object reference cells, not the objects themselves). The elements in
      the active portion of the array (as defined earlier) are<span class="Apple-converted-space">&nbsp;</span><em>allocated</em>,
      and those in the remainder of the array are<span class="Apple-converted-space">&nbsp;</span><em>free</em>.
      The garbage collector has no way of knowing this; to the garbage
      collector, all of the object references in the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">elements</code><span class="Apple-converted-space">&nbsp;</span>array
      are equally valid. Only the programmer knows that the inactive portion of
      the array is unimportant. The programmer effectively communicates this
      fact to the garbage collector by manually nulling out array elements as
      soon as they become part of the inactive portion.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Generally
      speaking,<span class="Apple-converted-space">&nbsp;</span><strong>whenever
        a class manages its own memory, the programmer should be alert for
        memory leaks</strong>. Whenever an element is freed, any object
      references contained in the element should be nulled out.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Another
        common source of memory leaks is caches.</strong><span class="Apple-converted-space">&nbsp;</span>Once
      you put an object reference into a cache, it’s easy to forget that it’s
      there and leave it in the cache long after it becomes irrelevant. There
      are several solutions to this problem. If you’re lucky enough to implement
      a cache for which an entry is relevant exactly so long as there are
      references to its key outside of the cache, represent the cache as a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">WeakHashMap</code>;
      entries will be removed automatically after they become obsolete. Remember
      that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">WeakHashMap</code><span
        class="Apple-converted-space">&nbsp;</span>is useful only if the desired
      lifetime of cache entries is determined by external references to the key,
      not the value.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">More
      commonly, the useful lifetime of a cache entry is less well defined, with
      entries becoming less valuable over time. Under these circumstances, the
      cache should occasionally be cleansed of entries that have fallen into
      disuse. This can be done by a background thread (perhaps a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ScheduledThreadPoolExecutor</code>)
      or as a side effect of adding new entries to the cache. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">LinkedHashMap</code><span
        class="Apple-converted-space">&nbsp;</span>class facilitates the latter
      approach with its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">removeEldestEntry</code><span
        class="Apple-converted-space">&nbsp;</span>method. For more
      sophisticated caches, you may need to use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.lang.ref</code><span
        class="Apple-converted-space">&nbsp;</span>directly.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A
        third common source of memory leaks is listeners and other callbacks.</strong><span
        class="Apple-converted-space">&nbsp;</span>If you implement an API where
      clients register callbacks but don’t deregister them explicitly, they will
      accumulate unless you take some action. One way to ensure that callbacks
      are garbage collected promptly is to store only<span class="Apple-converted-space">&nbsp;</span><em>weak
        references</em><span class="Apple-converted-space">&nbsp;</span>to them,
      for instance, by storing them only as keys in a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">WeakHashMap</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      memory leaks typically do not manifest themselves as obvious failures,
      they may remain present in a system for years. They are typically
      discovered only as a result of careful code inspection or with the aid of
      a debugging tool known as a<span class="Apple-converted-space">&nbsp;</span><em>heap
        profiler</em>. Therefore, it is very desirable to learn to anticipate
      problems like this before they occur and prevent them from happening.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev8" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_29"></span><strong>Item 8: Avoid finalizers and cleaners</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Finalizers
        are unpredictable, often dangerous, and generally unnecessary.</strong><span
        class="Apple-converted-space">&nbsp;</span>Their use can cause erratic
      behavior, poor performance, and portability problems. Finalizers have a
      few valid uses, which we’ll cover later in this item, but as a rule, you
      should avoid them. As of Java 9, finalizers have been deprecated, but they
      are still being used by the Java libraries. The Java 9 replacement for
      finalizers is<span class="Apple-converted-space">&nbsp;</span><em>cleaners</em>.<span
        class="Apple-converted-space">&nbsp;</span><strong>Cleaners are less
        dangerous than finalizers, but still unpredictable, slow, and generally
        unnecessary.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">C++
      programmers are cautioned not to think of finalizers or cleaners as Java’s
      analogue of C++ destructors. In C++, destructors are the normal way to
      reclaim the resources associated with an object, a necessary counterpart
      to constructors. In Java, the garbage collector reclaims the storage
      associated with an object when it becomes unreachable, requiring no
      special effort on the part of the programmer. C++ destructors are also
      used to reclaim other nonmemory resources. In Java, a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources
      or<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-<code
        style="font-family: 'Courier New', monospace;">finally</code><span class="Apple-converted-space">&nbsp;</span>block
      is used for this purpose (<a href="ch2.xhtml#lev9" style="text-decoration: none;">Item
        9</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      shortcoming of finalizers and cleaners is that there is no guarantee
      they’ll be executed promptly [JLS, 12.6]. It can take arbitrarily long
      between the time that an object becomes unreachable and the time its
      finalizer or cleaner runs. This means that you should<span class="Apple-converted-space">&nbsp;</span><strong>never
        do anything time-critical in a finalizer or cleaner.</strong><span class="Apple-converted-space">&nbsp;</span>For
      example, it is a grave error to depend on a finalizer or cleaner to close
      files because open file descriptors are a limited resource. If many files
      are left open as a result of the system’s tardiness in running finalizers
      or cleaners, a program may fail because it can no longer open files.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      promptness with which finalizers and cleaners are executed is primarily a
      function of the garbage collection algorithm, which varies widely across
      implementations. The behavior of a program that depends on the promptness
      of finalizer or cleaner execution may likewise vary. It is entirely
      possible that such a program will run perfectly on the JVM on which you
      test it and then fail miserably on the one favored by your most important
      customer.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Tardy
      finalization is not just a theoretical problem. Providing a finalizer for
      a class can arbitrarily delay reclamation of its instances. A colleague
      debugged a long-running GUI application that was mysteriously dying with
      an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">OutOfMemoryError</code>.
      Analysis revealed that at the time of its death, the application had
      thousands of graphics objects on its finalizer queue just waiting to be
      finalized and reclaimed. Unfortunately, the finalizer thread was running
      at a lower priority than another application thread, so objects weren’t
      getting finalized at the rate they became eligible for finalization. The
      language specification makes no guarantees<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_30"></span>as to which thread will
      execute finalizers, so there is no portable way to prevent this sort of
      problem other than to refrain from using finalizers. Cleaners are a bit
      better than finalizers in this regard because class authors have control
      over their own cleaner threads, but cleaners still run in the background,
      under the control of the garbage collector, so there can be no guarantee
      of prompt cleaning.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Not
      only does the specification provide no guarantee that finalizers or
      cleaners will run promptly; it provides no guarantee that they’ll run at
      all. It is entirely possible, even likely, that a program terminates
      without running them on some objects that are no longer reachable. As a
      consequence, you should<span class="Apple-converted-space">&nbsp;</span><strong>never
        depend on a finalizer or cleaner to update persistent state.</strong><span
        class="Apple-converted-space">&nbsp;</span>For example, depending on a
      finalizer or cleaner to release a persistent lock on a shared resource
      such as a database is a good way to bring your entire distributed system
      to a grinding halt.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Don’t
      be seduced by the methods<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">System.gc</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">System.runFinalization</code>.
      They may increase the odds of finalizers or cleaners getting executed, but
      they don’t guarantee it. Two methods once claimed to make this guarantee:<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">System.runFinalizersOnExit</code><span
        class="Apple-converted-space">&nbsp;</span>and its evil twin,<code style="font-family: 'Courier New', monospace;">Runtime.runFinalizersOnExit</code>.
      These methods are fatally flawed and have been deprecated for decades [<a
        href="ref.xhtml#rThreadStop" style="text-decoration: none;">ThreadStop</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Another
      problem with finalizers is that an uncaught exception thrown during
      finalization is ignored, and finalization of that object terminates [JLS,
      12.6]. Uncaught exceptions can leave other objects in a corrupt state. If
      another thread attempts to use such a corrupted object, arbitrary
      nondeterministic behavior may result. Normally, an uncaught exception will
      terminate the thread and print a stack trace, but not if it occurs in a
      finalizer—it won’t even print a warning. Cleaners do not have this problem
      because a library using a cleaner has control over its thread.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>There
        is a</strong><span class="Apple-converted-space">&nbsp;</span><em><strong>severe</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>performance penalty
        for using finalizers and cleaners.</strong><span class="Apple-converted-space">&nbsp;</span>On
      my machine, the time to create a simple<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AutoCloseable</code>object,
      to close it using<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-with-resources,
      and to have the garbage collector reclaim it is about 12 ns. Using a
      finalizer instead increases the time to 550 ns. In other words, it is
      about 50 times slower to create and destroy objects with finalizers. This
      is primarily because finalizers inhibit efficient garbage collection.
      Cleaners are comparable in speed to finalizers if you use them to clean
      all instances of the class (about 500 ns per instance on my machine), but
      cleaners are much faster if you use them only as a safety net, as
      discussed below. Under these circumstances, creating, cleaning, and
      destroying an object takes about 66 ns on my machine, which means you pay
      a factor of five (not fifty) for the insurance of a safety net<span class="Apple-converted-space">&nbsp;</span><em>if</em><span
        class="Apple-converted-space">&nbsp;</span>you don’t use it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Finalizers
        have a serious security problem: they open your class up to</strong><span
        class="Apple-converted-space">&nbsp;</span><em><strong>finalizer attacks</strong></em><strong>.</strong><span
        class="Apple-converted-space">&nbsp;</span>The idea behind a finalizer
      attack is simple: If an exception is<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_31"></span>thrown from a constructor or
      its serialization equivalents—the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">readObject</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readResolve</code><span
        class="Apple-converted-space">&nbsp;</span>methods (<a href="ch12.xhtml#ch12"
        style="text-decoration: none;">Chapter 12</a>)—the finalizer of a
      malicious subclass can run on the partially constructed object that should
      have “died on the vine.” This finalizer can record a reference to the
      object in a static field, preventing it from being garbage collected. Once
      the malformed object has been recorded, it is a simple matter to invoke
      arbitrary methods on this object that should never have been allowed to
      exist in the first place.<span class="Apple-converted-space">&nbsp;</span><strong>Throwing
        an exception from a constructor should be sufficient to prevent an
        object from coming into existence; in the presence of finalizers, it is
        not.</strong><span class="Apple-converted-space">&nbsp;</span>Such
      attacks can have dire consequences. Final classes are immune to finalizer
      attacks because no one can write a malicious subclass of a final class.<span
        class="Apple-converted-space">&nbsp;</span><strong>To protect nonfinal
        classes from finalizer attacks, write a final</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>finalize</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method that does
        nothing.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      what should you do instead of writing a finalizer or cleaner for a class
      whose objects encapsulate resources that require termination, such as
      files or threads? Just<span class="Apple-converted-space">&nbsp;</span><strong>have
        your class implement</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>AutoCloseable</strong></code><strong>,</strong><span
        class="Apple-converted-space">&nbsp;</span>and require its clients to
      invoke the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code><span
        class="Apple-converted-space">&nbsp;</span>method on each instance when
      it is no longer needed, typically using<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources
      to ensure termination even in the face of exceptions (<a href="ch2.xhtml#lev9"
        style="text-decoration: none;">Item 9</a>). One detail worth mentioning
      is that the instance must keep track of whether it has been closed: the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code><span
        class="Apple-converted-space">&nbsp;</span>method must record in a field
      that the object is no longer valid, and other methods must check this
      field and throw an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">IllegalStateException</code><span
        class="Apple-converted-space">&nbsp;</span>if they are called after the
      object has been closed.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      what, if anything, are cleaners and finalizers good for? They have perhaps
      two legitimate uses. One is to act as a safety net in case the owner of a
      resource neglects to call its<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">close</code><span class="Apple-converted-space">&nbsp;</span>method.
      While there’s no guarantee that the cleaner or finalizer will run promptly
      (or at all), it is better to free the resource late than never if the
      client fails to do so. If you’re considering writing such a safety-net
      finalizer, think long and hard about whether the protection is worth the
      cost. Some Java library classes, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">FileInputStream</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">FileOutputStream</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">ThreadPoolExecutor</code>,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.sql.Connection</code>,
      have finalizers that serve as safety nets.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      second legitimate use of cleaners concerns objects with<span class="Apple-converted-space">&nbsp;</span><em>native
        peers</em>. A native peer is a native (non-Java) object to which a
      normal object delegates via native methods. Because a native peer is not a
      normal object, the garbage collector doesn’t know about it and can’t
      reclaim it when its Java peer is reclaimed. A cleaner or finalizer may be
      an appropriate vehicle for this task, assuming the performance is
      acceptable and the native peer holds no critical resources. If the
      performance is unacceptable or the native peer holds resources that must
      be reclaimed promptly, the class should have a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">close</code><span class="Apple-converted-space">&nbsp;</span>method,
      as described earlier.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_32"></span>Cleaners are a bit tricky to
      use. Below is a simple<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Room</code><span class="Apple-converted-space">&nbsp;</span>class
      demonstrating the facility. Let’s assume that rooms must be cleaned before
      they are reclaimed. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Room</code><span class="Apple-converted-space">&nbsp;</span>class
      implements<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AutoCloseable</code>;
      the fact that its automatic cleaning safety net uses a cleaner is merely
      an implementation detail. Unlike finalizers, cleaners do not pollute a
      class’s public API:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex33a" id="pch2ex33" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        An autocloseable class using a cleaner as a safety net</strong><br>
      public class Room implements AutoCloseable {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final Cleaner cleaner =
      Cleaner.create();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Resource that requires cleaning.<span class="Apple-converted-space">&nbsp;</span><strong>Must
        not refer to Room!</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static class State implements Runnable {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int numJunkPiles; //
      Number of junk piles in this room<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State(int numJunkPiles) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.numJunkPiles
      = numJunkPiles;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Invoked by close method<span
        class="Apple-converted-space">&nbsp;</span><em>or</em><span class="Apple-converted-space">&nbsp;</span>cleaner<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public void
      run() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Cleaning
      room");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numJunkPiles
      = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// The state of this room, shared with our
      cleanable<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final State state;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Our cleanable. Cleans the room when it’s
      eligible for gc<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Cleaner.Cleanable cleanable;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Room(int numJunkPiles) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = new
      State(numJunkPiles);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanable =
      cleaner.register(this, state);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public void close() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanable.clean();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      static nested<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">State</code><span
        class="Apple-converted-space">&nbsp;</span>class holds the resources
      that are required by the cleaner to clean the room. In this case, it is
      simply the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">numJunkPiles</code>field,
      which represents the amount of mess in the room. More realistically, it
      might be a final<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">long</code><span
        class="Apple-converted-space">&nbsp;</span>that contains a pointer to a
      native peer.<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">State</code>implements<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Runnable</code>,
      and its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">run</code><span
        class="Apple-converted-space">&nbsp;</span>method is called at most
      once, by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cleanable</code><span
        class="Apple-converted-space">&nbsp;</span>that we get when we register
      our<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">State</code><span
        class="Apple-converted-space">&nbsp;</span>instance with our cleaner in
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Room</code><span
        class="Apple-converted-space">&nbsp;</span>constructor. The call to the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">run</code><span
        class="Apple-converted-space">&nbsp;</span>method will be triggered by
      one of two things: Usually it is triggered by a call to<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_33"></span><code style="font-family: 'Courier New', monospace;">Room</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code>method
      calling<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cleanable</code>’s
      clean method. If the client fails to call the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">close</code><span class="Apple-converted-space">&nbsp;</span>method
      by the time a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Room</code><span
        class="Apple-converted-space">&nbsp;</span>instance is eligible for
      garbage collection, the cleaner will (hopefully) call<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">State</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">run</code><span class="Apple-converted-space">&nbsp;</span>method.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is critical that a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">State</code><span
        class="Apple-converted-space">&nbsp;</span>instance does not refer to
      its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Room</code><span
        class="Apple-converted-space">&nbsp;</span>instance. If it did, it would
      create a circularity that would prevent the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Room</code><span class="Apple-converted-space">&nbsp;</span>instance
      from becoming eligible for garbage collection (and from being
      automatically cleaned). Therefore,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">State</code><span class="Apple-converted-space">&nbsp;</span>must
      be a<span class="Apple-converted-space">&nbsp;</span><em>static</em><span
        class="Apple-converted-space">&nbsp;</span>nested class because
      nonstatic nested classes contain references to their enclosing instances (<a
        href="ch4.xhtml#lev24" style="text-decoration: none;">Item 24</a>). It
      is similarly inadvisable to use a lambda because they can easily capture
      references to enclosing objects.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      we said earlier,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Room</code>’s
      cleaner is used only as a safety net. If clients surround all<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Room</code><span class="Apple-converted-space">&nbsp;</span>instantiations
      in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-with-resource
      blocks, automatic cleaning will never be required. This well-behaved
      client demonstrates that behavior:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex34a" id="pch2ex34" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Adult {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try (Room myRoom = new
      Room(7)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Goodbye");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      you’d expect, running the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Adult</code><span class="Apple-converted-space">&nbsp;</span>program
      prints<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Goodbye</code>,
      followed by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cleaning
        room</code>. But what about this ill-behaved program, which never cleans
      its room?</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex35a" id="pch2ex35" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Teenager {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Room(99);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Peace
      out");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      might expect it to print<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Peace out</code>,
      followed by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cleaning
        room</code>, but on my machine, it never prints<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cleaning room</code>; it
      just exits. This is the unpredictability we spoke of earlier. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cleaner</code><span class="Apple-converted-space">&nbsp;</span>spec
      says, “The behavior of cleaners during<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">System.exit</code><span class="Apple-converted-space">&nbsp;</span>is
      implementation specific. No guarantees are made relating to whether
      cleaning actions are invoked or not.” While the spec does not say it, the
      same holds true for normal program exit. On my machine, adding the line<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">System.gc()</code><span
        class="Apple-converted-space">&nbsp;</span>to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Teenager</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">main</code><span class="Apple-converted-space">&nbsp;</span>method
      is enough to make it print<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cleaning room</code><span
        class="Apple-converted-space">&nbsp;</span>prior to exit, but there’s no
      guarantee that you’ll see the same behavior on your machine.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, don’t use cleaners, or in releases prior to Java 9, finalizers,
      except as a safety net or to terminate noncritical native resources. Even
      then, beware the indeterminacy and performance consequences.</p>
    <h3 class="h3b" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 72px; text-indent: -72px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev9" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_34"></span><strong>Item 9: Prefer</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>try</strong></code><strong>-with-resources
        to</strong><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>try</strong></code><strong>-</strong><code
        style="font-family: 'Courier New', monospace;"><strong>finally</strong></code></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      Java libraries include many resources that must be closed manually by
      invoking a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code><span
        class="Apple-converted-space">&nbsp;</span>method. Examples include<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">InputStream</code>,<code
        style="font-family: 'Courier New', monospace;">OutputStream</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.sql.Connection</code>.
      Closing resources is often overlooked by clients, with predictably dire
      performance consequences. While many of these resources use finalizers as
      a safety net, finalizers don’t work very well (<a href="ch2.xhtml#lev8" style="text-decoration: none;">Item
        8</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Historically,
      a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-<code
        style="font-family: 'Courier New', monospace;">finally</code><span class="Apple-converted-space">&nbsp;</span>statement
      was the best way to guarantee that a resource would be closed properly,
      even in the face of an exception or return:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex36a" id="pch2ex36" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        try-finally - No longer the best way to close resources!</strong><br>
      static String firstLineOfFile(String path) throws IOException {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;BufferedReader br = new BufferedReader(new
      FileReader(path));<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return br.readLine();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} finally {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;br.close();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      may not look bad, but it gets worse when you add a second resource:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex37a" id="pch2ex37" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        try-finally is ugly when used with more than one resource!</strong><br>
      static void copy(String src, String dst) throws IOException {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;InputStream in = new FileInputStream(src);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OutputStream out = new
      FileOutputStream(dst);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[]
      buf = new byte[BUFFER_SIZE];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
      n;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
      ((n = in.read(buf)) &gt;= 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(buf,
      0, n);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.close();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} finally {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in.close();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      may be hard to believe, but even good programmers got this wrong most of
      the time. For starters, I got it wrong on page 88 of<span class="Apple-converted-space">&nbsp;</span><em>Java
        Puzzlers</em>[<a href="ref.xhtml#rBloch05" style="text-decoration: none;">Bloch05</a>],
      and no one noticed for years. In fact, two-thirds of the uses of the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code><span
        class="Apple-converted-space">&nbsp;</span>method in the Java libraries
      were wrong in 2007.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_35"></span>Even the correct code for
      closing resources with<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-<code style="font-family: 'Courier New', monospace;">finally</code><span
        class="Apple-converted-space">&nbsp;</span>statements, as illustrated in
      the previous two code examples, has a subtle deficiency. The code in both
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code><span
        class="Apple-converted-space">&nbsp;</span>block and the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">finally</code><span class="Apple-converted-space">&nbsp;</span>block
      is capable of throwing exceptions. For example, in the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">firstLineOfFile</code>method,
      the call to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readLine</code><span
        class="Apple-converted-space">&nbsp;</span>could throw an exception due
      to a failure in the underlying physical device, and the call to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">close</code><span class="Apple-converted-space">&nbsp;</span>could
      then fail for the same reason. Under these circumstances, the second
      exception completely obliterates the first one. There is no record of the
      first exception in the exception stack trace, which can greatly complicate
      debugging in real systems—usually it’s the first exception that you want
      to see in order to diagnose the problem. While it is possible to write
      code to suppress the second exception in favor of the first, virtually no
      one did because it’s just too verbose.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">All
      of these problems were solved in one fell swoop when Java 7 introduced the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-with-resources
      statement [JLS, 14.20.3]. To be usable with this construct, a resource
      must implement the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AutoCloseable</code><span
        class="Apple-converted-space">&nbsp;</span>interface, which consists of
      a single<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">void</code>-returning<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">close</code><span
        class="Apple-converted-space">&nbsp;</span>method. Many classes and
      interfaces in the Java libraries and in third-party libraries now
      implement or extend<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AutoCloseable</code>. If
      you write a class that represents a resource that must be closed, your
      class should implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AutoCloseable</code><span
        class="Apple-converted-space">&nbsp;</span>too.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Here’s
      how our first example looks using<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex38a" id="pch2ex38" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        try-with-resources - the the best way to close resources!</strong><br>
      static String firstLineOfFile(String path) throws IOException {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try (BufferedReader br = new BufferedReader(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
      FileReader(path))) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return br.readLine();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">And
      here’s how our second example looks using<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex39a" id="pch2ex39" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        try-with-resources on multiple resources - short and sweet</strong><br>
      static void copy(String src, String dst) throws IOException {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try (InputStream&nbsp;&nbsp;&nbsp;in = new
      FileInputStream(src);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OutputStream out = new
      FileOutputStream(dst)) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[] buf = new
      byte[BUFFER_SIZE];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ((n = in.read(buf))
      &gt;= 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(buf,
      0, n);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Not
      only are the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try</code>-with-resources
      versions shorter and more readable than the originals, but they provide
      far better diagnostics. Consider the<code style="font-family: 'Courier New', monospace;">firstLineOfFile</code><span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_36"></span>method.
      If exceptions are thrown by both the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">readLine</code><span class="Apple-converted-space">&nbsp;</span>call
      and the (invisible)<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">close</code>, the latter
      exception is<span class="Apple-converted-space">&nbsp;</span><em>suppressed</em><span
        class="Apple-converted-space">&nbsp;</span>in favor of the former. In
      fact, multiple exceptions may be suppressed in order to preserve the
      exception that you actually want to see. These suppressed exceptions are
      not merely discarded; they are printed in the stack trace with a notation
      saying that they were suppressed. You can also access them
      programmatically with the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">getSuppressed</code><span
        class="Apple-converted-space">&nbsp;</span>method, which was added to<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Throwable</code><span
        class="Apple-converted-space">&nbsp;</span>in Java 7.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      can put catch clauses on<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources
      statements, just as you can on regular<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-<code style="font-family: 'Courier New', monospace;">finally</code><span
        class="Apple-converted-space">&nbsp;</span>statements. This allows you
      to handle exceptions without sullying your code with another layer of
      nesting. As a slightly contrived example, here’s a version our<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">firstLineOfFile</code>method
      that does not throw exceptions, but takes a default value to return if it
      can’t open the file or read from it:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch2_images.xhtml#pch2ex40a" id="pch2ex40" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        try-with-resources with a catch clause</strong><br>
      static String firstLineOfFile(String path, String defaultVal) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try (BufferedReader br = new BufferedReader(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
      FileReader(path))) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return br.readLine();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return defaultVal;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      lesson is clear: Always use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-with-resources
      in preference to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">try-finally</code><span
        class="Apple-converted-space">&nbsp;</span>when working with resources
      that must be closed. The resulting code is shorter and clearer, and the
      exceptions that it generates are more useful. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try-</code>with-resources
      statement makes it easy to write correct code using resources that must be
      closed, which was practically impossible using<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try</code>-<code style="font-family: 'Courier New', monospace;">finally</code>.</p>
    <p></p>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h2 class="h2" id="ch3" style="font-size: 29px; margin-top: 30px; margin-bottom: 30px; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Chapter
      3. Methods Common to All Objects</h2>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>A</strong><small
        style="font-size: 0.7em;">LTHOUGH</small><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>is
      a concrete class, it is designed primarily for extension. All of its
      nonfinal methods (<code style="font-family: 'Courier New', monospace;">equals</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code>,
      and<code style="font-family: 'Courier New', monospace;">finalize</code>)
      have explicit<span class="Apple-converted-space">&nbsp;</span><em>general
        contracts</em><span class="Apple-converted-space">&nbsp;</span>because
      they are designed to be overridden. It is the responsibility of any class
      overriding these methods to obey their general contracts; failure to do so
      will prevent other classes that depend on the contracts (such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashMap</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code>)
      from functioning properly in conjunction with the class.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      chapter tells you when and how to override the nonfinal<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>methods.
      The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">finalize</code><span
        class="Apple-converted-space">&nbsp;</span>method is omitted from this
      chapter because it was discussed in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch2.xhtml#lev8" style="text-decoration: none;">Item 8</a>. While
      not an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>method,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable.compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>is discussed in this chapter
      because it has a similar character.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev10" style="text-decoration: none;"></a><strong>Item 10: Obey the
        general contract when overriding</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code></h3>
    <p class="noindentb" style="margin-top: 0px; margin-bottom: 15px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Overriding
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method seems simple, but
      there are many ways to get it wrong, and consequences can be dire. The
      easiest way to avoid problems is not to override the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method,
      in which case each instance of the class is equal only to itself. This is
      the right thing to do if any of the following conditions apply:</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>Each instance of the
        class is inherently unique.</strong><span class="Apple-converted-space">&nbsp;</span>This
      is true for classes such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Thread</code><span class="Apple-converted-space">&nbsp;</span>that
      represent active entities rather than values. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>implementation
      provided by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>has exactly the right
      behavior for these classes.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>There is no need for
        the class to provide a “logical equality” test.</strong><span class="Apple-converted-space">&nbsp;</span>For
      example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.regex.Pattern</code><span
        class="Apple-converted-space">&nbsp;</span>could have overridden<code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>to check whether two<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Pattern</code><span class="Apple-converted-space">&nbsp;</span>instances
      represented exactly the same regular expression, but the designers didn’t
      think that clients would need or want this functionality. Under these
      circumstances, the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>implementation inherited from<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>is ideal.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_38"></span>•<span class="Apple-converted-space">&nbsp;</span><strong>A
        superclass has already overridden</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code>,<span
        class="Apple-converted-space">&nbsp;</span><strong>and the superclass
        behavior is appropriate for this class.</strong><span class="Apple-converted-space">&nbsp;</span>For
      example, most<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Set</code>implementations
      inherit their<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>implementation from<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AbstractSet</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">List</code><span
        class="Apple-converted-space">&nbsp;</span>implementations from<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AbstractList</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code>implementations
      from<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AbstractMap</code>.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>The class is private
        or package-private, and you are certain that its</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method will never be
        invoked.</strong><span class="Apple-converted-space">&nbsp;</span>If you
      are extremely risk-averse, you can override the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      to ensure that it isn’t invoked accidentally:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex1a" id="pch3ex1" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="preb" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">@Override
      public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;throw new AssertionError(); // Method is never
      called<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      when is it appropriate to override<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>? It is when
      a class has a notion of<span class="Apple-converted-space">&nbsp;</span><em>logical
        equality</em><span class="Apple-converted-space">&nbsp;</span>that
      differs from mere object identity and a superclass has not already
      overridden<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>.
      This is generally the case for<span class="Apple-converted-space">&nbsp;</span><em>value
        classes.</em><span class="Apple-converted-space">&nbsp;</span>A value
      class is simply a class that represents a value, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Integer</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code>.
      A programmer who compares references to value objects using the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      expects to find out whether they are logically equivalent, not whether
      they refer to the same object. Not only is overriding the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      necessary to satisfy programmer expectations, it enables instances to
      serve as map keys or set elements with predictable, desirable behavior.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      kind of value class that does<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>require the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      to be overridden is a class that uses instance control (<a href="ch2.xhtml#lev1"
        style="text-decoration: none;">Item 1</a>) to ensure that at most one
      object exists with each value. Enum types (<a href="ch6.xhtml#lev34" style="text-decoration: none;">Item
        34</a>) fall into this category. For these classes, logical equality is
      the same as object identity, so<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      functions as a logical<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      you override the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, you must adhere to
      its general contract. Here is the contract, from the specification for<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>:</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method implements an<span class="Apple-converted-space">&nbsp;</span><em>equivalence
        relation.</em><span class="Apple-converted-space">&nbsp;</span>It has
      these properties:</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><em>Reflexive</em>: For any
      non-null reference value<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x.equals(x)</code><span class="Apple-converted-space">&nbsp;</span>must
      return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><em>Symmetric</em>: For any
      non-null reference values<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">y</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">x.equals(y)</code><span
        class="Apple-converted-space">&nbsp;</span>must return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code><span class="Apple-converted-space">&nbsp;</span>if
      and only if<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">y.equals(x)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><em>Transitive</em>: For any
      non-null reference values<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">y</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">z</code>, if<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x.equals(y)</code><span class="Apple-converted-space">&nbsp;</span>returns<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">y.equals(z)</code><span class="Apple-converted-space">&nbsp;</span>returns<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>,
      then<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">x.equals(z)</code><span
        class="Apple-converted-space">&nbsp;</span>must return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><em>Consistent</em>: For any
      non-null reference values<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">y</code>,
      multiple invocations of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x.equals(y)</code><span class="Apple-converted-space">&nbsp;</span>must
      consistently return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code><span class="Apple-converted-space">&nbsp;</span>or
      consistently return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>, provided no
      information used in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>comparisons
      is modified.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      For any non-null reference value<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x.equals(null)</code><span
        class="Apple-converted-space">&nbsp;</span>must return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_39"></span>Unless you are mathematically
      inclined, this might look a bit scary, but do not ignore it! If you
      violate it, you may well find that your program behaves erratically or
      crashes, and it can be very difficult to pin down the source of the
      failure. To paraphrase John Donne, no class is an island. Instances of one
      class are frequently passed to another. Many classes, including all
      collections classes, depend on the objects passed to them obeying the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Now
      that you are aware of the dangers of violating the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract,
      let’s go over the contract in detail. The good news is that, appearances
      notwithstanding, it really isn’t very complicated. Once you understand it,
      it’s not hard to adhere to it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      what is an equivalence relation? Loosely speaking, it’s an operator that
      partitions a set of elements into subsets whose elements are deemed equal
      to one another. These subsets are known as<span class="Apple-converted-space">&nbsp;</span><em>equivalence
        classes</em>. For an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      to be useful, all of the elements in each equivalence class must be
      interchangeable from the perspective of the user. Now let’s examine the
      five requirements in turn:</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Reflexivity</strong>—The
      first requirement says merely that an object must be equal to itself. It’s
      hard to imagine violating this one unintentionally. If you were to violate
      it and then add an instance of your class to a collection, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">contains</code><span class="Apple-converted-space">&nbsp;</span>method
      might well say that the collection didn’t contain the instance that you
      just added.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Symmetry</strong>—The
      second requirement says that any two objects must agree on whether they
      are equal. Unlike the first requirement, it’s not hard to imagine
      violating this one unintentionally. For example, consider the following
      class, which implements a case-insensitive string. The case of the string
      is preserved by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>but ignored in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>comparisons:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex2a" id="pch3ex2" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - violates symmetry!</strong><br>
      public final class CaseInsensitiveString {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final String s;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public CaseInsensitiveString(String s) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.s =
      Objects.requireNonNull(s);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>// Broken - violates symmetry!</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (o instanceof
      CaseInsensitiveString)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      s.equalsIgnoreCase(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CaseInsensitiveString)
      o).s);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>if (o instanceof
        String)&nbsp;&nbsp;// One-way interoperability!</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return
        s.equalsIgnoreCase((String) o);</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;// Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_40"></span>The well-intentioned<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      in this class naively attempts to interoperate with ordinary strings.
      Let’s suppose that we have one case-insensitive string and one ordinary
      one:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex3a" id="pch3ex3" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">CaseInsensitiveString
      cis = new CaseInsensitiveString("Polish");<br>
      String s = "polish";</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      expected,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">cis.equals(s)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>. The problem
      is that while the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code><span
        class="Apple-converted-space">&nbsp;</span>knows about ordinary strings,
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>is
      oblivious to case-insensitive strings. Therefore,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">s.equals(cis)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>, a clear
      violation of symmetry. Suppose you put a case-insensitive string into a
      collection:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex4a" id="pch3ex4" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">List&lt;CaseInsensitiveString&gt;
      list = new ArrayList&lt;&gt;();<br>
      list.add(cis);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">What
      does<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">list.contains(s)</code><span
        class="Apple-converted-space">&nbsp;</span>return at this point? Who
      knows? In the current OpenJDK implementation, it happens to return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>, but that’s
      just an implementation artifact. In another implementation, it could just
      as easily return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code><span
        class="Apple-converted-space">&nbsp;</span>or throw a runtime exception.<span
        class="Apple-converted-space">&nbsp;</span><strong>Once you’ve violated
        the</strong><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>contract, you simply
        don’t know how other objects will behave when confronted with your
        object.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      eliminate the problem, merely remove the ill-conceived attempt to
      interoperate with<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code><span
        class="Apple-converted-space">&nbsp;</span>from the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method.
      Once you do this, you can refactor the method into a single return
      statement:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex5a" id="pch3ex5" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">@Override
      public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return o instanceof CaseInsensitiveString
      &amp;&amp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CaseInsensitiveString)
      o).s.equalsIgnoreCase(s);<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Transitivity</strong>—The
      third requirement of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract
      says that if one object is equal to a second and the second object is
      equal to a third, then the first object must be equal to the third. Again,
      it’s not hard to imagine violating this requirement unintentionally.
      Consider the case of a subclass that adds a new<span class="Apple-converted-space">&nbsp;</span><em>value
        component</em><span class="Apple-converted-space">&nbsp;</span>to its
      superclass. In other words, the subclass adds a piece of<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_41"></span>information that affects<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>comparisons.
      Let’s start with a simple immutable two-dimensional integer point class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex6a" id="pch3ex6" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Point {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int x;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final int y;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Point(int x, int y) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x = x;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y = y;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof Point))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point p = (Point)o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p.x == x &amp;&amp;
      p.y == y;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;// Remainder omitted<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Suppose
      you want to extend this class, adding the notion of color to a point:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex7a" id="pch3ex7" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class ColorPoint extends Point {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Color color;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public ColorPoint(int x, int y, Color color) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(x, y);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.color = color;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;// Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">How
      should the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method look? If you leave it
      out entirely, the implementation is inherited from<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code><span class="Apple-converted-space">&nbsp;</span>and
      color information is ignored in<code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>comparisons. While this does
      not violate the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract, it is clearly
      unacceptable. Suppose you write an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      that returns<code style="font-family: 'Courier New', monospace;">true</code><span
        class="Apple-converted-space">&nbsp;</span>only if its argument is
      another color point with the same position and color:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex8a" id="pch3ex8" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - violates symmetry!</strong><br>
      @Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof ColorPoint))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>return super.equals(o) &amp;&amp;
        ((ColorPoint) o).color == color;</strong><br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_42"></span>The problem with this method
      is that you might get different results when comparing a point to a color
      point and vice versa. The former comparison ignores color, while the
      latter comparison always returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code><span class="Apple-converted-space">&nbsp;</span>because
      the type of the argument is incorrect. To make this concrete, let’s create
      one point and one color point:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex9a" id="pch3ex9" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Point
      p = new Point(1, 2);<br>
      ColorPoint cp = new ColorPoint(1, 2, Color.RED);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Then<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">p.equals(cp)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>, while<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">cp.equals(p)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>. You might
      try to fix the problem by having<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ColorPoint.equals</code><span
        class="Apple-converted-space">&nbsp;</span>ignore color when doing
      “mixed comparisons”:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex10a" id="pch3ex10" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - violates transitivity!</strong><br>
      @Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof Point))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>// If o is a normal Point, do a
        color-blind comparison</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>if (!(o instanceof ColorPoint))</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return
        o.equals(this);</strong><br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// o is a ColorPoint; do a full comparison<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return super.equals(o) &amp;&amp; ((ColorPoint)
      o).color == color;<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      approach does provide symmetry, but at the expense of transitivity:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex11a" id="pch3ex11" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">ColorPoint
      p1 = new ColorPoint(1, 2, Color.RED);<br>
      Point p2 = new Point(1, 2);<br>
      ColorPoint p3 = new ColorPoint(1, 2, Color.BLUE);</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Now<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">p1.equals(p2)</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">p2.equals(p3)</code><span
        class="Apple-converted-space">&nbsp;</span>return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>, while<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">p1.equals(p3)</code><span
        class="Apple-converted-space">&nbsp;</span>returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code>, a clear
      violation of transitivity. The first two comparisons are “color-blind,”
      while the third takes color into account.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Also,
      this approach can cause infinite recursion: Suppose there are two
      subclasses of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code>,
      say<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">ColorPoint</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">SmellPoint</code>, each
      with this sort of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method. Then a call to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">myColorPoint.equals(mySmellPoint)</code><span
        class="Apple-converted-space">&nbsp;</span>will throw a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">StackOverflowError</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      what’s the solution? It turns out that this is a fundamental problem of
      equivalence relations in object-oriented languages.<span class="Apple-converted-space">&nbsp;</span><strong>There
        is no way to extend an instantiable class and add a value component
        while preserving the</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>contract</strong>,
      unless you’re willing to forgo the benefits of object-oriented
      abstraction.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_43"></span>You may hear it said that you
      can extend an instantiable class and add a value component while
      preserving the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract by using a<code style="font-family: 'Courier New', monospace;">getClass</code><span
        class="Apple-converted-space">&nbsp;</span>test in place of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">instanceof</code><span class="Apple-converted-space">&nbsp;</span>test
      in the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex12a" id="pch3ex12" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - violates Liskov substitution principle (page 43)</strong><br>
      @Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>if (o == null || o.getClass() !=
        getClass())</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return false;</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;Point p = (Point) o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return p.x == x &amp;&amp; p.y == y;<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      has the effect of equating objects only if they have the same
      implementation class. This may not seem so bad, but the consequences are
      unacceptable: An instance of a subclass of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code><span class="Apple-converted-space">&nbsp;</span>is
      still a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code>,
      and it still needs to function as one, but it fails to do so if you take
      this approach! Let’s suppose we want to write a method to tell whether a
      point is on the unit circle. Here is one way we could do it:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex13a" id="pch3ex13" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Initialize unitCircle to contain all Points on the unit circle</strong><br>
      private static final Set&lt;Point&gt; unitCircle = Set.of(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Point(
      1,&nbsp;&nbsp;0), new Point( 0,&nbsp;&nbsp;1),<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
      Point(-1,&nbsp;&nbsp;0), new Point( 0, -1));<br>
      <br>
      public static boolean onUnitCircle(Point p) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return unitCircle.contains(p);<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      this may not be the fastest way to implement the functionality, it works
      fine. Suppose you extend<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code><span class="Apple-converted-space">&nbsp;</span>in
      some trivial way that doesn’t add a value component, say, by having its
      constructor keep track of how many instances have been created:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex14a" id="pch3ex14" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class CounterPoint extends Point {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final AtomicInteger counter =<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new
      AtomicInteger();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public CounterPoint(int x, int y) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(x, y);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter.incrementAndGet();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static int numberCreated() { return
      counter.get(); }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><em>Liskov substitution
        principle</em><span class="Apple-converted-space">&nbsp;</span>says that
      any important property of a type should also hold for all its subtypes so
      that any method written for the type should work equally well on its
      subtypes [<a href="ref.xhtml#rLiskov87" style="text-decoration: none;">Liskov87</a>].
      This is the formal statement of our<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_44"></span>earlier claim that a subclass
      of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code><span
        class="Apple-converted-space">&nbsp;</span>(such as<code style="font-family: 'Courier New', monospace;">CounterPoint</code>)
      is still a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code><span
        class="Apple-converted-space">&nbsp;</span>and must act as one. But
      suppose we pass a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CounterPoint</code><span
        class="Apple-converted-space">&nbsp;</span>to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">onUnitCircle</code><span
        class="Apple-converted-space">&nbsp;</span>method. If the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code><span class="Apple-converted-space">&nbsp;</span>class
      uses a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">getClass</code>-based<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">onUnitCircle</code><span
        class="Apple-converted-space">&nbsp;</span>method will return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code><span class="Apple-converted-space">&nbsp;</span>regardless
      of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CounterPoint</code><span
        class="Apple-converted-space">&nbsp;</span>instance’s<span class="Apple-converted-space">&nbsp;</span><em>x</em><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><em>y</em><span
        class="Apple-converted-space">&nbsp;</span>coordinates. This is so
      because most collections, including the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code><span class="Apple-converted-space">&nbsp;</span>used
      by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">onUnitCircle</code><span
        class="Apple-converted-space">&nbsp;</span>method, use the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      to test for containment, and no<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CounterPoint</code><span
        class="Apple-converted-space">&nbsp;</span>instance is equal to any<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code>.
      If, however, you use a proper<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">instanceof</code>-based<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method on<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code>, the same<code
        style="font-family: 'Courier New', monospace;">onUnitCircle</code><span
        class="Apple-converted-space">&nbsp;</span>method works fine when
      presented with a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CounterPoint</code><span
        class="Apple-converted-space">&nbsp;</span>instance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      there is no satisfactory way to extend an instantiable class and add a
      value component, there is a fine workaround: Follow the advice of<a href="ch4.xhtml#lev18"
        style="text-decoration: none;">Item 18</a>, “<a href="ch4.xhtml#lev18" style="text-decoration: none;">Favor
        composition over inheritance</a>.” Instead of having<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ColorPoint</code><span class="Apple-converted-space">&nbsp;</span>extend<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code>,
      give<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">ColorPoint</code><span
        class="Apple-converted-space">&nbsp;</span>a private<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Point</code><span class="Apple-converted-space">&nbsp;</span>field
      and a public<em>view</em><span class="Apple-converted-space">&nbsp;</span>method
      (<a href="ch2.xhtml#lev6" style="text-decoration: none;">Item 6</a>) that
      returns the point at the same position as this color point:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex15a" id="pch3ex15" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Adds a value component without violating the equals contract</strong><br>
      public class ColorPoint {<br>
      &nbsp;&nbsp; private final Point point;<br>
      &nbsp;&nbsp; private final Color color;<br>
      <br>
      &nbsp;&nbsp; public ColorPoint(int x, int y, Color color) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point = new Point(x, y);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.color =
      Objects.requireNonNull(color);<br>
      &nbsp;&nbsp; }<br>
      <br>
      &nbsp;&nbsp; /**<br>
      &nbsp;&nbsp;&nbsp;&nbsp;* Returns the point-view of this color point.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;*/<br>
      &nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span><strong>public
        Point asPoint()</strong><span class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return point;<br>
      &nbsp;&nbsp; }<br>
      <br>
      &nbsp;&nbsp; @Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof ColorPoint))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColorPoint cp = (ColorPoint) o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cp.point.equals(point)
      &amp;&amp; cp.color.equals(color);<br>
      &nbsp;&nbsp; }<br>
      <br>
      &nbsp;&nbsp; ...&nbsp;&nbsp;&nbsp;&nbsp;// Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are some classes in the Java platform libraries that do extend an
      instantiable class and add a value component. For example,<code style="font-family: 'Courier New', monospace;">java.sql.Timestamp</code><span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_45"></span>extends<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.Date</code><span
        class="Apple-converted-space">&nbsp;</span>and adds a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">nanoseconds</code><span class="Apple-converted-space">&nbsp;</span>field.
      The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>implementation for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Timestamp</code><span class="Apple-converted-space">&nbsp;</span>does
      violate symmetry and can cause erratic behavior if<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Timestamp</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Date</code><span
        class="Apple-converted-space">&nbsp;</span>objects are used in the same
      collection or are otherwise intermixed. The<code style="font-family: 'Courier New', monospace;">Timestamp</code><span
        class="Apple-converted-space">&nbsp;</span>class has a disclaimer
      cautioning programmers against mixing dates and timestamps. While you
      won’t get into trouble as long as you keep them separate, there’s nothing
      to prevent you from mixing them, and the resulting errors can be hard to
      debug. This behavior of the<code style="font-family: 'Courier New', monospace;">Timestamp</code><span
        class="Apple-converted-space">&nbsp;</span>class was a mistake and
      should not be emulated.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that you<span class="Apple-converted-space">&nbsp;</span><em>can</em><span
        class="Apple-converted-space">&nbsp;</span>add a value component to a
      subclass of an<span class="Apple-converted-space">&nbsp;</span><em>abstract</em><span
        class="Apple-converted-space">&nbsp;</span>class without violating the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract. This is important
      for the sort of class hierarchies that you get by following the advice in<span
        class="Apple-converted-space">&nbsp;</span><a href="ch4.xhtml#lev23" style="text-decoration: none;">Item
        23</a>, “Prefer class hierarchies to tagged classes.” For example, you
      could have an abstract class<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Shape</code><span class="Apple-converted-space">&nbsp;</span>with
      no value components, a subclass<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Circle</code><span class="Apple-converted-space">&nbsp;</span>that
      adds a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">radius</code><span
        class="Apple-converted-space">&nbsp;</span>field, and a subclass<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Rectangle</code><span class="Apple-converted-space">&nbsp;</span>that
      adds<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">length</code><span
        class="Apple-converted-space">&nbsp;</span>and<code style="font-family: 'Courier New', monospace;">width</code><span
        class="Apple-converted-space">&nbsp;</span>fields. Problems of the sort
      shown earlier won’t occur so long as it is impossible to create a
      superclass instance directly.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Consistency</strong>—The
      fourth requirement of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract
      says that if two objects are equal, they must remain equal for all time
      unless one (or both) of them is modified. In other words, mutable objects
      can be equal to different objects at different times while immutable
      objects can’t. When you write a class, think hard about whether it should
      be immutable (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item
        17</a>). If you conclude that it should, make sure that your<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>method
      enforces the restriction that equal objects remain equal and unequal
      objects remain unequal for all time.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Whether
      or not a class is immutable,<span class="Apple-converted-space">&nbsp;</span><strong>do
        not write an</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method that depends
        on unreliable resources.</strong><span class="Apple-converted-space">&nbsp;</span>It’s
      extremely difficult to satisfy the consistency requirement if you violate
      this prohibition. For example,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.net.URL</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method relies on comparison
      of the IP addresses of the hosts associated with the URLs. Translating a
      host name to an IP address can require network access, and it isn’t
      guaranteed to yield the same results over time. This can cause the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">URL equals</code><span class="Apple-converted-space">&nbsp;</span>method
      to violate the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract and has caused
      problems in practice. The behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">URL</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      was a big mistake and should not be emulated. Unfortunately, it cannot be
      changed due to compatibility requirements. To avoid this sort of problem,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>methods should perform only
      deterministic computations on memory-resident objects.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Non-nullity—</strong>The
      final requirement lacks an official name, so I have taken the liberty of
      calling it “non-nullity.” It says that all objects must be unequal to<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">null</code>.
      While it is hard to imagine accidentally returning<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code><span class="Apple-converted-space">&nbsp;</span>in
      response to the invocation<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">o.equals(null)</code>, it
      isn’t hard to imagine accidentally throwing a<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_46"></span><code style="font-family: 'Courier New', monospace;">NullPointerException</code>.
      The general contract prohibits this. Many classes have<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>methods
      that guard against it with an explicit test for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex16a" id="pch3ex16" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">@Override
      public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (o == null)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      test is unnecessary. To test its argument for equality, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      must first cast its argument to an appropriate type so its accessors can
      be invoked or its fields accessed. Before doing the cast, the method must
      use the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">instanceof</code><span
        class="Apple-converted-space">&nbsp;</span>operator to check that its
      argument is of the correct type:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex17a" id="pch3ex17" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">@Override
      public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof MyType))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;MyType mt = (MyType) o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      this type check were missing and the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      were passed an argument of the wrong type, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      would throw a<code style="font-family: 'Courier New', monospace;">ClassCastException</code>,
      which violates the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>contract. But the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">instanceof</code><span class="Apple-converted-space">&nbsp;</span>operator
      is specified to return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code><span class="Apple-converted-space">&nbsp;</span>if
      its first operand is<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>, regardless
      of what type appears in the second operand [JLS, 15.20.2]. Therefore, the
      type check will return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">false</code><span class="Apple-converted-space">&nbsp;</span>if<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">null</code><span
        class="Apple-converted-space">&nbsp;</span>is passed in, so you don’t
      need an explicit<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">null</code><span
        class="Apple-converted-space">&nbsp;</span>check.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Putting
      it all together, here’s a recipe for a high-quality<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method:</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">1.<span
        class="Apple-converted-space">&nbsp;</span><strong>Use the</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>==</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>operator to check if
        the argument is a reference to this object.</strong><span class="Apple-converted-space">&nbsp;</span>If
      so, return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>.
      This is just a performance optimization but one that is worth doing if the
      comparison is potentially expensive.</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">2.<span
        class="Apple-converted-space">&nbsp;</span><strong>Use the</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>instanceof</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>operator to check if
        the argument has the correct type.</strong><span class="Apple-converted-space">&nbsp;</span>If
      not, return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">false</code>.
      Typically, the correct type is the class in which the method occurs.
      Occasionally, it is some interface implemented by this class. Use an
      interface if the class implements an interface that refines the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract
      to permit comparisons across classes that implement the interface.
      Collection interfaces such as<code style="font-family: 'Courier New', monospace;">Set</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">List</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code>,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map.Entry</code><span
        class="Apple-converted-space">&nbsp;</span>have this property.</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">3.<span
        class="Apple-converted-space">&nbsp;</span><strong>Cast the argument to
        the correct type.</strong><span class="Apple-converted-space">&nbsp;</span>Because
      this cast was preceded by an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">instanceof</code><span class="Apple-converted-space">&nbsp;</span>test,
      it is guaranteed to succeed.</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_47"></span>4.<span class="Apple-converted-space">&nbsp;</span><strong>For
        each “significant” field in the class, check if that field of the
        argument matches the corresponding field of this object.</strong><span class="Apple-converted-space">&nbsp;</span>If
      all these tests succeed, return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>; otherwise,
      return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">false</code>.
      If the type in Step 2 is an interface, you must access the argument’s
      fields via interface methods; if the type is a class, you may be able to
      access the fields directly, depending on their accessibility.</p>
    <p class="numberp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      primitive fields whose type is not<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">float</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">double</code>,
      use the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">==</code><span
        class="Apple-converted-space">&nbsp;</span>operator for comparisons; for
      object reference fields, call the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      recursively; for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">float</code><span
        class="Apple-converted-space">&nbsp;</span>fields, use the static<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Float.compare(float,
        float)</code><span class="Apple-converted-space">&nbsp;</span>method;
      and for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">double</code><span
        class="Apple-converted-space">&nbsp;</span>fields, use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Double.compare(double,
        double)</code>. The special treatment of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">float</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">double</code><span
        class="Apple-converted-space">&nbsp;</span>fields is made necessary by
      the existence of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Float.NaN</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">-0.0f</code><span
        class="Apple-converted-space">&nbsp;</span>and the analogous<code style="font-family: 'Courier New', monospace;">double</code><span
        class="Apple-converted-space">&nbsp;</span>values; see JLS 15.21.1 or
      the documentation of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Float.equals</code><span
        class="Apple-converted-space">&nbsp;</span>for details. While you could
      compare<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">float</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">double</code><span class="Apple-converted-space">&nbsp;</span>fields
      with the static methods<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Float.equals</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Double.equals</code>,
      this would entail autoboxing on every comparison, which would have poor
      performance. For array fields, apply these guidelines to each element. If
      every element in an array field is significant, use one of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Arrays.equals</code>methods.</p>
    <p class="numberp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Some
      object reference fields may legitimately contain<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>. To avoid the
      possibility of a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">NullPointerException</code>,
      check such fields for equality using the static method<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Objects.equals(Object,
        Object)</code>.</p>
    <p class="numberp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      some classes, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code><span
        class="Apple-converted-space">&nbsp;</span>above, field comparisons are
      more complex than simple equality tests. If this is the case, you may want
      to store a<span class="Apple-converted-space">&nbsp;</span><em>canonical
        form</em><span class="Apple-converted-space">&nbsp;</span>of the field
      so the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method can do a cheap exact
      comparison on canonical forms rather than a more costly nonstandard
      comparison. This technique is most appropriate for immutable classes (<a href="ch4.xhtml#lev17"
        style="text-decoration: none;">Item 17</a>); if the object can change,
      you must keep the canonical form up to date.</p>
    <p class="numberp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      performance of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method may be affected by the
      order in which fields are compared. For best performance, you should first
      compare fields that are more likely to differ, less expensive to compare,
      or, ideally, both. You must not compare fields that are not part of an
      object’s logical state, such as lock fields used to synchronize
      operations. You need not compare<span class="Apple-converted-space">&nbsp;</span><em>derived
        fields</em>, which can be calculated from “significant fields,” but
      doing so may improve the performance of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method.
      If a derived field amounts to a summary description of the entire object,
      comparing this field will save you the expense of comparing the actual
      data if the comparison fails. For example, suppose you have a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Polygon</code><span class="Apple-converted-space">&nbsp;</span>class,
      and you cache the area. If two polygons have unequal areas, you needn’t
      bother comparing their edges and vertices.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_48"></span><strong>When you are finished
        writing your</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method, ask yourself
        three questions: Is it symmetric? Is it transitive? Is it consistent?</strong><span
        class="Apple-converted-space">&nbsp;</span>And don’t just ask yourself;
      write unit tests to check, unless you used AutoValue (page 49) to generate
      your<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, in which case you can
      safely omit the tests. If the properties fail to hold, figure out why, and
      modify the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method accordingly. Of course
      your<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>method
      must also satisfy the other two properties (reflexivity and non-nullity),
      but these two usually take care of themselves.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">An<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method constructed according
      to the previous recipe is shown in this simplistic<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex18a" id="pch3ex18" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Class with a typical equals method</strong><br>
      public final class PhoneNumber {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final short areaCode, prefix, lineNum;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public PhoneNumber(int areaCode, int prefix, int
      lineNum) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.areaCode =
      rangeCheck(areaCode,&nbsp;&nbsp;999, "area code");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.prefix&nbsp;&nbsp; =
      rangeCheck(prefix,&nbsp;&nbsp;&nbsp;&nbsp;999, "prefix");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.lineNum&nbsp;&nbsp;=
      rangeCheck(lineNum,&nbsp;&nbsp;9999, "line num");<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static short rangeCheck(int val, int max,
      String arg) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (val &lt; 0 || val &gt;
      max)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new
      IllegalArgumentException(arg + ": " + val);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (short) val;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>@Override public boolean equals(Object o)</strong><span
        class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (o == this)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      true;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof
      PhoneNumber))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PhoneNumber pn =
      (PhoneNumber)o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return pn.lineNum ==
      lineNum &amp;&amp; pn.prefix == prefix<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;
      pn.areaCode == areaCode;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="noindentb" style="margin-top: 0px; margin-bottom: 15px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Here
      are a few final caveats:</p>
    <p class="bullb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>Always override</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>hashCode</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>when you override</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch3.xhtml#lev11" style="text-decoration: none;">Item
        11</a>).</p>
    <p class="bullb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>Don’t try to be too
        clever.</strong><span class="Apple-converted-space">&nbsp;</span>If you
      simply test fields for equality, it’s not hard to adhere to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract.
      If you are overly aggressive in searching for equivalence, it’s easy to
      get into trouble. It is generally a bad idea to take any form of aliasing
      into account. For example, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">File</code>class
      shouldn’t attempt to equate symbolic links referring to the same file.
      Thankfully, it doesn’t.</p>
    <p class="bullb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_49"></span>•<span class="Apple-converted-space">&nbsp;</span><strong>Don’t
        substitute another type for</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>Object</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>in the</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>declaration.</strong><span
        class="Apple-converted-space">&nbsp;</span>It is not uncommon for a
      programmer to write an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      that looks like this and then spend hours puzzling over why it doesn’t
      work properly:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex19a" id="pch3ex19" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="prebb" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 0px; margin-bottom: 6.666667px; margin-left: 57.333336px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - parameter type must be Object!</strong><br>
      public boolean equals(MyClass o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      }</p>
    <p class="bullp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 42.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      problem is that this method does not<span class="Apple-converted-space">&nbsp;</span><em>override</em><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object.equals</code>,
      whose argument is of type<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>, but<span class="Apple-converted-space">&nbsp;</span><em>overloads</em><span
        class="Apple-converted-space">&nbsp;</span>it instead (<a href="ch8.xhtml#lev52"
        style="text-decoration: none;">Item 52</a>). It is unacceptable to
      provide such a “strongly typed”<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      even in addition to the normal one, because it can cause<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Override</code>annotations
      in subclasses to generate false positives and provide a false sense of
      security.</p>
    <p class="bullp" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 42.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Consistent
      use of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Override</code><span
        class="Apple-converted-space">&nbsp;</span>annotation, as illustrated
      throughout this item, will prevent you from making this mistake (<a href="ch6.xhtml#lev40"
        style="text-decoration: none;">Item 40</a>). This<code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method won’t compile, and the
      error message will tell you exactly what is wrong:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex20a" id="pch3ex20" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="prebb" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 0px; margin-bottom: 6.666667px; margin-left: 57.333336px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Still broken, but won’t compile</strong><br>
      <strong>@Override</strong><span class="Apple-converted-space">&nbsp;</span>public
      boolean equals(MyClass o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Writing
      and testing<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>(and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>) methods
      is tedious, and the resulting code is mundane. An excellent alternative to
      writing and testing these methods manually is to use Google’s open source
      AutoValue framework, which automatically generates these methods for you,
      triggered by a single annotation on the class . In most cases, the methods
      generated by AutoValue are essentially identical to those you’d write
      yourself.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">IDEs,
      too, have facilities to generate<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>methods, but the resulting
      source code is more verbose and less readable than code that uses
      AutoValue, does not track changes in the class automatically, and
      therefore requires testing. That said, having IDEs generate<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>(and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>) methods
      is generally preferable to implementing them manually because IDEs do not
      make careless mistakes, and humans do.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, don’t override the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      unless you have to: in many cases, the implementation inherited from<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>does exactly what you want.
      If you do override<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>,
      make sure to compare all of the class’s significant fields and to compare
      them in a manner that preserves all five provisions of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev11" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_50"></span><strong>Item 11: Always override</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>hashCode</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>when you override</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>equals</strong></code></h3>
    <p class="noindentb" style="margin-top: 0px; margin-bottom: 15px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>You
        must override</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>hashCode</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>in every class that
        overrides</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>equals</strong></code><strong>.</strong><span
        class="Apple-converted-space">&nbsp;</span>If you fail to do so, your
      class will violate the general contract for<code style="font-family: 'Courier New', monospace;">hashCode</code>,
      which will prevent it from functioning properly in collections such as<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashMap</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>. Here is
      the contract, adapted from the<code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>specification :</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      When the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method is invoked on an
      object repeatedly during an execution of an application, it must
      consistently return the same value, provided no information used in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>comparisons
      is modified. This value need not remain consistent from one execution of
      an application to another.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      If two objects are equal according to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals(Object)</code><span
        class="Apple-converted-space">&nbsp;</span>method, then calling<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>on
      the two objects must produce the same integer result.</p>
    <p class="bull1" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 40px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      If two objects are unequal according to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals(Object)</code><span
        class="Apple-converted-space">&nbsp;</span>method, it is<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>required that calling<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>on
      each of the objects must produce distinct results. However, the programmer
      should be aware that producing distinct results for unequal objects may
      improve the performance of hash tables.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        key provision that is violated when you fail to override</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>hashCode</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>is the second one:
        equal objects must have equal hash codes.</strong><span class="Apple-converted-space">&nbsp;</span>Two
      distinct instances may be logically equal according to a class’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method,
      but to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method, they’re just two
      objects with nothing much in common. Therefore,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>method
      returns two seemingly random numbers instead of two equal numbers as
      required by the contract.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      example, suppose you attempt to use instances of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      from<span class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev10"
        style="text-decoration: none;">Item 10</a><span class="Apple-converted-space">&nbsp;</span>as
      keys in a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashMap</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex21a" id="pch3ex21" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="preba" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 50.666668px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Map&lt;PhoneNumber,
      String&gt; m = new HashMap&lt;&gt;();<br>
      m.put(new PhoneNumber(707, 867, 5309), "Jenny");</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">At
      this point, you might expect<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">m.get(new PhoneNumber(707</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">867</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">5309))</code><span
        class="Apple-converted-space">&nbsp;</span>to return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">"Jenny"</code>, but
      instead, it returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>. Notice that
      two<code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>instances are involved: one
      is used for insertion into the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashMap</code>, and a
      second, equal instance is used for (attempted) retrieval. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class’s
      failure to override<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>causes
      the two equal instances to have unequal hash codes, in violation of the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code>contract.
      Therefore, the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">get</code><span
        class="Apple-converted-space">&nbsp;</span>method is likely to look for
      the phone number in a different hash bucket from the one in which it was
      stored by the<code style="font-family: 'Courier New', monospace;">put</code><span
        class="Apple-converted-space">&nbsp;</span>method. Even if the two
      instances happen to hash to the same bucket, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">get</code><span class="Apple-converted-space">&nbsp;</span>method
      will almost certainly return<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>, because<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashMap</code>has
      an optimization that caches the hash code associated with each entry and
      doesn’t bother checking for object equality if the hash codes don’t match.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_51"></span>Fixing this problem is as
      simple as writing a proper<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>method
      for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code>.
      So what should a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method look like? It’s
      trivial to write a bad one. This one, for example, is always legal but
      should never be used:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex22a" id="pch3ex22" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        The worst possible legal hashCode implementation - never use!</strong><br>
      @Override public int hashCode() { return 42; }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It’s
      legal because it ensures that equal objects have the same hash code. It’s
      atrocious because it ensures that<span class="Apple-converted-space">&nbsp;</span><em>every</em><span
        class="Apple-converted-space">&nbsp;</span>object has the same hash
      code. Therefore, every object hashes to the same bucket, and hash tables
      degenerate to linked lists. Programs that should run in linear time
      instead run in quadratic time. For large hash tables, this is the
      difference between working and not working.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      good hash function tends to produce unequal hash codes for unequal
      instances. This is exactly what is meant by the third part of the<code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>contract. Ideally, a hash
      function should distribute any reasonable collection of unequal instances
      uniformly across all<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>values.
      Achieving this ideal can be difficult. Luckily it’s not too hard to
      achieve a fair approximation. Here is a simple recipe:</p>
    <p class="number" style="margin-top: 0px; margin-bottom: 4px; margin-left: 20px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">1.
      Declare an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">int</code><span
        class="Apple-converted-space">&nbsp;</span>variable named<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">result</code>, and
      initialize it to the hash code<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">c</code><span class="Apple-converted-space">&nbsp;</span>for
      the first significant field in your object, as computed in step 2.a.
      (Recall from<span class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev10"
        style="text-decoration: none;">Item 10</a><span class="Apple-converted-space">&nbsp;</span>that
      a significant field is a field that affects equals comparisons.)</p>
    <p class="number" style="margin-top: 0px; margin-bottom: 4px; margin-left: 20px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">2.
      For every remaining significant field<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">f</code><span class="Apple-converted-space">&nbsp;</span>in
      your object, do the following:</p>
    <p class="alpha" style="margin-top: 0px; margin-bottom: 4px; margin-left: 41.333336px; text-indent: -17.333334px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">a.
      Compute an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">int</code><span
        class="Apple-converted-space">&nbsp;</span>hash code<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">c</code><span class="Apple-converted-space">&nbsp;</span>for
      the field:</p>
    <p class="roman" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 56px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">i.
      If the field is of a primitive type, compute<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><em>Type</em>.hashCode(f)</code>,
      where<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><em>Type</em></code><span
        class="Apple-converted-space">&nbsp;</span>is the boxed primitive class
      corresponding to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">f</code>’s
      type.</p>
    <p class="roman1" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 56px; text-indent: -14.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">ii.
      If the field is an object reference and this class’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method
      compares the field by recursively invoking<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>,
      recursively invoke<code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>on the field. If a more
      complex comparison is required, compute a “canonical representation” for
      this field and invoke<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>on the
      canonical representation. If the value of the field is<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">null</code>, use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">0</code><span class="Apple-converted-space">&nbsp;</span>(or
      some other constant, but<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">0</code><span class="Apple-converted-space">&nbsp;</span>is
      traditional).</p>
    <p class="roman2" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 54.666668px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">iii.
      If the field is an array, treat it as if each significant element were a
      separate field. That is, compute a hash code for each significant element
      by applying these rules recursively, and combine the values per step 2.b.
      If the array has no significant elements, use a constant, preferably not<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">0</code>.
      If all elements are significant, use<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Arrays.hashCode</code>.</p>
    <p class="alpha" style="margin-top: 0px; margin-bottom: 4px; margin-left: 41.333336px; text-indent: -17.333334px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">b.
      Combine the hash code<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">c</code><span class="Apple-converted-space">&nbsp;</span>computed
      in step 2.a into<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">result</code><span
        class="Apple-converted-space">&nbsp;</span>as follows:</p>
    <p class="codep1" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 92px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">result
      = 31 * result + c;</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">3.
      Return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">result</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_52"></span>When you are finished writing
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method, ask yourself whether
      equal instances have equal hash codes. Write unit tests to verify your
      intuition (unless you used AutoValue to generate your<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>methods, in which case you
      can safely omit these tests). If equal instances have unequal hash codes,
      figure out why and fix the problem.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      may exclude<span class="Apple-converted-space">&nbsp;</span><em>derived
        fields</em><span class="Apple-converted-space">&nbsp;</span>from the
      hash code computation. In other words, you may ignore any field whose
      value can be computed from fields included in the computation. You<span class="Apple-converted-space">&nbsp;</span><em>must</em><span
        class="Apple-converted-space">&nbsp;</span>exclude any fields that are
      not used in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>comparisons, or you risk
      violating the second provision of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>contract.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      multiplication in step 2.b makes the result depend on the order of the
      fields, yielding a much better hash function if the class has multiple
      similar fields. For example, if the multiplication were omitted from a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code><span
        class="Apple-converted-space">&nbsp;</span>hash function, all anagrams
      would have identical hash codes. The value 31 was chosen because it is an
      odd prime. If it were even and the multiplication overflowed, information
      would be lost, because multiplication by 2 is equivalent to shifting. The
      advantage of using a prime is less clear, but it is traditional. A nice
      property of 31 is that the multiplication can be replaced by a shift and a
      subtraction for better performance on some architectures:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">31 * i == (i &lt;&lt; 5)
        - i</code>. Modern VMs do this sort of optimization automatically.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Let’s
      apply the previous recipe to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex23a" id="pch3ex23" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Typical hashCode method</strong><br>
      @Override public int hashCode() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;int result = Short.hashCode(areaCode);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;result = 31 * result + Short.hashCode(prefix);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;result = 31 * result + Short.hashCode(lineNum);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      this method returns the result of a simple deterministic computation whose
      only inputs are the three significant fields in a<code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>instance, it is clear that
      equal<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>instances have equal hash
      codes. This method is, in fact, a perfectly good<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>implementation
      for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code>,
      on par with those in the Java platform libraries. It is simple, is
      reasonably fast, and does a reasonable job of dispersing unequal phone
      numbers into different hash buckets.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      the recipe in this item yields reasonably good hash functions, they are
      not state-of-the-art. They are comparable in quality to the hash functions
      found in the Java platform libraries’ value types and are adequate for
      most uses. If you have a bona fide need for hash functions less likely to
      produce collisions, see Guava’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">com.google.common.hash.Hashing</code><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rGuava" style="text-decoration: none;">Guava</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_53"></span>The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Objects</code><span class="Apple-converted-space">&nbsp;</span>class
      has a static method that takes an arbitrary number of objects and returns
      a hash code for them. This method, named<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hash</code>, lets you
      write one-line<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>methods whose quality is
      comparable to those written according to the recipe in this item.
      Unfortunately, they run more slowly because they entail array creation to
      pass a variable number of arguments, as well as boxing and unboxing if any
      of the arguments are of primitive type. This style of hash function is
      recommended for use only in situations where performance is not critical.
      Here is a hash function for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>written
      using this technique:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex24a" id="pch3ex24" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        One-line hashCode method - mediocre performance</strong><br>
      @Override public int hashCode() {<br>
      &nbsp;&nbsp;&nbsp;return Objects.hash(lineNum, prefix, areaCode);<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      a class is immutable and the cost of computing the hash code is
      significant, you might consider caching the hash code in the object rather
      than recalculating it each time it is requested. If you believe that most
      objects of this type will be used as hash keys, then you should calculate
      the hash code when the instance is created. Otherwise, you might choose to<span
        class="Apple-converted-space">&nbsp;</span><em>lazily initialize</em><span
        class="Apple-converted-space">&nbsp;</span>the hash code the first time<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hash-Code</code><span
        class="Apple-converted-space">&nbsp;</span>is invoked. Some care is
      required to ensure that the class remains thread-safe in the presence of a
      lazily initialized field (<a href="ch11.xhtml#lev83" style="text-decoration: none;">Item
        83</a>). Our<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>class does not merit this
      treatment, but just to show you how it’s done, here it is. Note that the
      initial value for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>field
      (in this case, 0) should not be the hash code of a commonly created
      instance:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex25a" id="pch3ex25" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        hashCode method with lazily initialized cached hash code</strong><br>
      private int hashCode; // Automatically initialized to 0<br>
      <br>
      @Override public int hashCode() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;int result = hashCode;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (result == 0) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result =
      Short.hashCode(areaCode);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 31 * result +
      Short.hashCode(prefix);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 31 * result +
      Short.hashCode(lineNum);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hashCode = result;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Do
        not be tempted to exclude significant fields from the hash code
        computation to improve performance.</strong><span class="Apple-converted-space">&nbsp;</span>While
      the resulting hash function may run faster, its poor quality may degrade
      hash tables’ performance to the point where they become unusable. In
      particular, the hash function may be confronted with a<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_54"></span>large collection of instances
      that differ mainly in regions you’ve chosen to ignore. If this happens,
      the hash function will map all these instances to a few hash codes, and
      programs that should run in linear time will instead run in quadratic
      time.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      is not just a theoretical problem. Prior to Java 2, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>hash
      function used at most sixteen characters evenly spaced throughout the
      string, starting with the first character. For large collections of
      hierarchical names, such as URLs, this function displayed exactly the
      pathological behavior described earlier.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Don’t
        provide a detailed specification for the value returned by</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>hashCode</strong></code><strong>,
        so clients can’t reasonably depend on it; this gives you the flexibility
        to change it.</strong><span class="Apple-converted-space">&nbsp;</span>Many
      classes in the Java libraries, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Integer</code>,
      specify the exact value returned by their<code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method as a function of the
      instance value. This is<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>a good idea but a mistake
      that we’re forced to live with: It impedes the ability to improve the hash
      function in future releases. If you leave the details unspecified and a
      flaw is found in the hash function or a better hash function is
      discovered, you can change it in a subsequent release.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, you<span class="Apple-converted-space">&nbsp;</span><em>must</em><span
        class="Apple-converted-space">&nbsp;</span>override<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>every
      time you override<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>,
      or your program will not run correctly. Your<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>method
      must obey the general contract specified in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>and
      must do a reasonable job assigning unequal hash codes to unequal
      instances. This is easy to achieve, if slightly tedious, using the recipe
      on page 51. As mentioned in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch3.xhtml#lev10" style="text-decoration: none;">Item 10</a>, the
      AutoValue framework provides a fine alternative to writing<code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>methods
      manually, and IDEs also provide some of this functionality.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev12" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_55"></span><strong>Item 12: Always override</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>toString</strong></code></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>provides an implementation of
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method, the string that it
      returns is generally not what the user of your class wants to see. It
      consists of the class name followed by an “at” sign (<code style="font-family: 'Courier New', monospace;">@</code>)
      and the unsigned hexadecimal representation of the hash code, for example,<code
        style="font-family: 'Courier New', monospace;">PhoneNumber@163b91</code>.
      The general contract for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>says
      that the returned string should be “a concise but informative
      representation that is easy for a person to read.” While it could be
      argued that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber@163b91</code><span
        class="Apple-converted-space">&nbsp;</span>is concise and easy to read,
      it isn’t very informative when compared to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">707-867-5309</code>. The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>contract goes on to say, “It
      is recommended that all subclasses override this method.” Good advice,
      indeed!</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      it isn’t as critical as obeying the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>contracts (<a href="ch3.xhtml#lev10"
        style="text-decoration: none;">Items 10</a><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev11" style="text-decoration: none;">11</a>),<span
        class="Apple-converted-space">&nbsp;</span><strong>providing a good</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>toString</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>implementation makes
        your class much more pleasant to use and makes systems using the class
        easier to debug</strong>. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      is automatically invoked when an object is passed to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">println</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">printf</code>, the string
      concatenation operator, or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">assert</code>, or is
      printed by a debugger. Even if you never call<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>on
      an object, others may. For example, a component that has a reference to
      your object may include the string representation of the object in a
      logged error message. If you fail to override<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code>, the
      message may be all but useless.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you’ve provided a good<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code>,
      generating a useful diagnostic message is as easy as this:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex26a" id="pch3ex26" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="preba" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 50.666668px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">System.out.println("Failed
      to connect to " + phoneNumber);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Programmers
      will generate diagnostic messages in this fashion whether or not you
      override<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code>,
      but the messages won’t be useful unless you do. The benefits of providing
      a good<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method extend beyond
      instances of the class to objects containing references to these
      instances, especially collections. Which would you rather see when
      printing a map,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">{Jenny=PhoneNumber@163b91}</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">{Jenny=707-867-5309}</code>?</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>When
        practical, the</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>toString</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method should return</strong><span
        class="Apple-converted-space">&nbsp;</span><em><strong>all</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>of the interesting
        information contained in the object</strong>, as shown in the phone
      number example. It is impractical if the object is large or if it contains
      state that is not conducive to string representation. Under these
      circumstances,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>should return a summary such
      as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Manhattan
        residential phone directory (1487536 listings)</code><span class="Apple-converted-space">&nbsp;</span>or<code
        style="font-family: 'Courier New', monospace;">Thread[main,5,main]</code>.
      Ideally, the string should be self-explanatory. (The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Thread</code><span class="Apple-converted-space">&nbsp;</span>example
      flunks this test.) A particularly annoying penalty for failing to<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_56"></span>include all of an object’s
      interesting information in its string representation is test failure
      reports that look like this:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex27a" id="pch3ex27" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="preb" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Assertion
      failure: expected {abc, 123}, but was {abc, 123}.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      important decision you’ll have to make when implementing a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      is whether to specify the format of the return value in the documentation.
      It is recommended that you do this for<span class="Apple-converted-space">&nbsp;</span><em>value
        classes</em>, such as phone number or matrix. The advantage of
      specifying the format is that it serves as a standard, unambiguous,
      human-readable representation of the object. This representation can be
      used for input and output and in persistent human-readable data objects,
      such as CSV files. If you specify the format, it’s usually a good idea to
      provide a matching static factory or constructor so programmers can easily
      translate back and forth between the object and its string representation.
      This approach is taken by many value classes in the Java platform
      libraries, including<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code>, and
      most of the boxed primitive classes.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      disadvantage of specifying the format of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>return
      value is that once you’ve specified it, you’re stuck with it for life,
      assuming your class is widely used. Programmers will write code to parse
      the representation, to generate it, and to embed it into persistent data.
      If you change the representation in a future release, you’ll break their
      code and data, and they will yowl. By choosing not to specify a format,
      you preserve the flexibility to add information or improve the format in a
      subsequent release.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Whether
        or not you decide to specify the format, you should clearly document
        your intentions.</strong><span class="Apple-converted-space">&nbsp;</span>If
      you specify the format, you should do so precisely. For example, here’s a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method to go with the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      in<span class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev11"
        style="text-decoration: none;">Item 11</a>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex28a" id="pch3ex28" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">/**<br>
      &nbsp;* Returns the string representation of this phone number.<br>
      &nbsp;* The string consists of twelve characters whose format is<br>
      &nbsp;* "XXX-YYY-ZZZZ", where XXX is the area code, YYY is the<br>
      &nbsp;* prefix, and ZZZZ is the line number. Each of the capital<br>
      &nbsp;* letters represents a single decimal digit.<br>
      &nbsp;*<br>
      &nbsp;* If any of the three parts of this phone number is too small<br>
      &nbsp;* to fill up its field, the field is padded with leading zeros.<br>
      &nbsp;* For example, if the value of the line number is 123, the last<br>
      &nbsp;* four characters of the string representation will be "0123".<br>
      &nbsp;*/<br>
      @Override public String toString() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return String.format("%03d-%03d-%04d",<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;areaCode,
      prefix, lineNum);<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_57"></span>If you decide not to specify a
      format, the documentation comment should read something like this:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex29a" id="pch3ex29" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">/**<br>
      &nbsp;* Returns a brief description of this potion. The exact details<br>
      &nbsp;* of the representation are unspecified and subject to change,<br>
      &nbsp;* but the following may be regarded as typical:<br>
      &nbsp;*<br>
      &nbsp;* "[Potion #9: type=love, smell=turpentine, look=india ink]"<br>
      &nbsp;*/<br>
      @Override public String toString() { ... }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">After
      reading this comment, programmers who produce code or persistent data that
      depends on the details of the format will have no one but themselves to
      blame when the format is changed.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Whether
      or not you specify the format,<span class="Apple-converted-space">&nbsp;</span><strong>provide
        programmatic access to the information contained in the value returned
        by</strong><code style="font-family: 'Courier New', monospace;"><strong>toString</strong></code><strong>.</strong><span
        class="Apple-converted-space">&nbsp;</span>For example, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      should contain accessors for the area code, prefix, and line number. If
      you fail to do this, you<em>force</em><span class="Apple-converted-space">&nbsp;</span>programmers
      who need this information to parse the string. Besides reducing
      performance and making unnecessary work for programmers, this process is
      error-prone and results in fragile systems that break if you change the
      format. By failing to provide accessors, you turn the string format into a
      de facto API, even if you’ve specified that it’s subject to change.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      makes no sense to write a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      in a static utility class (<a href="ch2.xhtml#lev4" style="text-decoration: none;">Item
        4</a>). Nor should you write a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      in most enum types (<a href="ch6.xhtml#lev34" style="text-decoration: none;">Item
        34</a>) because Java provides a perfectly good one for you. You should,
      however, write a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method in any abstract class
      whose subclasses share a common string representation. For example, the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>methods on most collection
      implementations are inherited from the abstract collection classes.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Google’s
      open source AutoValue facility, discussed in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch3.xhtml#lev10" style="text-decoration: none;">Item 10</a>, will
      generate a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method for you, as will most
      IDEs. These methods are great for telling you the contents of each field
      but aren’t specialized to the<span class="Apple-converted-space">&nbsp;</span><em>meaning</em><span
        class="Apple-converted-space">&nbsp;</span>of the class. So, for
      example, it would be inappropriate to use an automatically generated<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>method for our<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      (as phone numbers have a standard string representation), but it would be
      perfectly acceptable for our<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Potion</code><span class="Apple-converted-space">&nbsp;</span>class.
      That said, an automatically generated<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      is far preferable to the one inherited from<code style="font-family: 'Courier New', monospace;">Object</code>,
      which tells you<span class="Apple-converted-space">&nbsp;</span><em>nothing</em><span
        class="Apple-converted-space">&nbsp;</span>about an object’s value.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      recap, override<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code><span
        class="Apple-converted-space">&nbsp;</span>implementation in every
      instantiable class you write, unless a superclass has already done so. It
      makes classes much more pleasant to use and aids in debugging. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>method
      should return a concise, useful description of the object, in an
      aesthetically pleasing format.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev13" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_58"></span><strong>Item 13: Override</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>judiciously</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code><span
        class="Apple-converted-space">&nbsp;</span>interface was intended as a<span
        class="Apple-converted-space">&nbsp;</span><em>mixin interface</em><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch4.xhtml#lev20" style="text-decoration: none;">Item
        20</a>) for classes to advertise that they permit cloning.
      Unfortunately, it fails to serve this purpose. Its primary flaw is that it
      lacks a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method, and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      is protected. You cannot, without resorting to<em>reflection</em><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch9.xhtml#lev65" style="text-decoration: none;">Item 65</a>),
      invoke<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>on an object merely because
      it implements<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>.
      Even a reflective invocation may fail, because there is no guarantee that
      the object has an accessible<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method.
      Despite this flaw and many others, the facility is in reasonably wide use,
      so it pays to understand it. This item tells you how to implement a
      well-behaved<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method, discusses when it is
      appropriate to do so, and presents alternatives.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So
      what<span class="Apple-converted-space">&nbsp;</span><em>does</em><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>do,
      given that it contains no methods? It determines the behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>’s protected<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>implementation: if a class
      implements<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method returns a
      field-by-field copy of the object; otherwise it throws<code style="font-family: 'Courier New', monospace;">CloneNotSupportedException</code>.
      This is a highly atypical use of interfaces and not one to be emulated.
      Normally, implementing an interface says something about what a class can
      do for its clients. In this case, it modifies the behavior of a protected
      method on a superclass.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Though
      the specification doesn’t say it,<span class="Apple-converted-space">&nbsp;</span><strong>in
        practice, a class implementing</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>Cloneable</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>is expected to
        provide a properly functioning public</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method.</strong><span
        class="Apple-converted-space">&nbsp;</span>In order to achieve this, the
      class and all of its superclasses must obey a complex, unenforceable,
      thinly documented protocol. The resulting mechanism is fragile, dangerous,
      and<span class="Apple-converted-space">&nbsp;</span><em>extralinguistic</em>:
      it creates objects without calling a constructor.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      general contract for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      is weak. Here it is, copied from the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>specification
      :</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Creates
      and returns a copy of this object. The precise meaning of “copy” may
      depend on the class of the object. The general intent is that, for any
      object<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">x</code>,
      the expression</p>
    <p class="codepbi" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 9.333334px; margin-bottom: 9.333334px; margin-left: 32px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">x.clone()
      != x</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">will
      be<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>,
      and the expression</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex30a" id="pch3ex30" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="codep" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 22.666668px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">x.clone().getClass()
      == x.getClass()</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">will
      be<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>,
      but these are not absolute requirements. While it is typically the case
      that</p>
    <p class="codep" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 22.666668px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">x.clone().equals(x)</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">will
      be<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>,
      this is not an absolute requirement.</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_59"></span>By convention, the object
      returned by this method should be obtained by calling<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>. If a
      class and all of its superclasses (except<code style="font-family: 'Courier New', monospace;">Object</code>)
      obey this convention, it will be the case that</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex31a" id="pch3ex31" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="codep2" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 53.333336px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">x.clone().getClass()
      == x.getClass().</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">By
      convention, the returned object should be independent of the object being
      cloned. To achieve this independence, it may be necessary to modify one or
      more fields of the object returned by<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code><span class="Apple-converted-space">&nbsp;</span>before
      returning it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      mechanism is vaguely similar to constructor chaining, except that it isn’t
      enforced: if a class’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      returns an instance that is<span class="Apple-converted-space">&nbsp;</span><em>not</em>obtained
      by calling<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">super.clone</code><span
        class="Apple-converted-space">&nbsp;</span>but by calling a constructor,
      the compiler won’t complain, but if a subclass of that class calls<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>, the
      resulting object will have the wrong class, preventing the subclass from<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method from working properly.
      If a class that overrides<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>is
      final, this convention may be safely ignored, as there are no subclasses
      to worry about. But if a final class has a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      that does not invoke<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>, there
      is no reason for the class to implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code>, as it
      doesn’t rely on the behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>’s clone
      implementation.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Suppose
      you want to implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>in
      a class whose superclass provides a well-behaved<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method.
      First call<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">super.clone</code>.
      The object you get back will be a fully functional replica of the
      original. Any fields declared in your class will have values identical to
      those of the original. If every field contains a primitive value or a
      reference to an immutable object, the returned object may be exactly what
      you need, in which case no further processing is necessary. This is the
      case, for example, for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      in<span class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev11"
        style="text-decoration: none;">Item 11</a>, but note that<span class="Apple-converted-space">&nbsp;</span><strong>immutable
        classes should never provide a</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method</strong><span
        class="Apple-converted-space">&nbsp;</span>because it would merely
      encourage wasteful copying. With that caveat, here’s how a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code>method for<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>would look:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex32a" id="pch3ex32" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Clone method for class with no references to mutable state</strong><br>
      @Override public PhoneNumber clone() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (PhoneNumber)
      super.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} catch (CloneNotSupportedException e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      AssertionError();&nbsp;&nbsp;// Can't happen<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      order for this method to work, the class declaration for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>would
      have to be modified to indicate that it implements<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code>. Though<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>, this<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code>. It is
      legal<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_60"></span>and desirable to do this because Java supports<span
        class="Apple-converted-space">&nbsp;</span><em>covariant return types</em>.
      In other words, an overriding method’s return type can be a subclass of
      the overridden method’s return type. This eliminates the need for casting
      in the client. We must cast the result of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code><span class="Apple-converted-space">&nbsp;</span>from<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>before
      returning it, but the cast is guaranteed to succeed.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      call to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">super.clone</code><span
        class="Apple-converted-space">&nbsp;</span>is contained in a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">try-catch</code><span class="Apple-converted-space">&nbsp;</span>block.
      This is because<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>declares its<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      to throw<code style="font-family: 'Courier New', monospace;">CloneNotSupportedException</code>,
      which is a<span class="Apple-converted-space">&nbsp;</span><em>checked
        exception</em>. Because<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>implements<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>,
      we know the call to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>will
      succeed. The need for this boilerplate indicates that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CloneNotSupportedException</code><span
        class="Apple-converted-space">&nbsp;</span>should have been unchecked (<a
        href="ch10.xhtml#lev71" style="text-decoration: none;">Item 71</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      an object contains fields that refer to mutable objects, the simple<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>implementation
      shown earlier can be disastrous. For example, consider the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>class
      in<span class="Apple-converted-space">&nbsp;</span><a href="ch2.xhtml#lev7"
        style="text-decoration: none;">Item 7</a>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex33a" id="pch3ex33" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Stack {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Object[] elements;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int size = 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final int DEFAULT_INITIAL_CAPACITY
      = 16;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Stack() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elements = new
      Object[DEFAULT_INITIAL_CAPACITY];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void push(Object e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacity();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements[size++] = e;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Object pop() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (size == 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw
      new EmptyStackException();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object result =
      elements[--size];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements[size] = null; //
      Eliminate obsolete reference<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Ensure space for at least one more element.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private void ensureCapacity() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elements.length ==
      size)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements
      = Arrays.copyOf(elements, 2 * size + 1);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Suppose
      you want to make this class cloneable. If the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      merely returns<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">super.clone()</code>,
      the resulting<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Stack</code><span
        class="Apple-converted-space">&nbsp;</span>instance will have the
      correct value in<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_61"></span>its<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">size</code><span class="Apple-converted-space">&nbsp;</span>field,
      but its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">elements</code><span
        class="Apple-converted-space">&nbsp;</span>field will refer to the same
      array as the original<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>instance.
      Modifying the original will destroy the invariants in the clone and vice
      versa. You will quickly find that your program produces nonsensical
      results or throws a<code style="font-family: 'Courier New', monospace;">NullPointerException</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      situation could never occur as a result of calling the sole constructor in
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Stack</code><span
        class="Apple-converted-space">&nbsp;</span>class.<span class="Apple-converted-space">&nbsp;</span><strong>In
        effect, the</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>method functions as a
        constructor; you must ensure that it does no harm to the original object
        and that it properly establishes invariants on the clone</strong>. In
      order for the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method on<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>to
      work properly, it must copy the internals of the stack. The easiest way to
      do this is to call<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code>recursively
      on the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">elements</code><span
        class="Apple-converted-space">&nbsp;</span>array:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex34a" id="pch3ex34" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Clone method for class with references to mutable state</strong><br>
      @Override public Stack clone() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack result = (Stack)
      super.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.elements =
      elements.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} catch (CloneNotSupportedException e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      AssertionError();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that we do not have to cast the result of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">elements.clone</code><span
        class="Apple-converted-space">&nbsp;</span>to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object[]</code>. Calling<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>on an array returns an array
      whose runtime and compile-time types are identical to those of the array
      being cloned. This is the preferred idiom to duplicate an array. In fact,
      arrays are the sole compelling use of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>facility.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      also that the earlier solution would not work if the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">elements</code><span class="Apple-converted-space">&nbsp;</span>field
      were final because<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>would be prohibited from
      assigning a new value to the field. This is a fundamental problem: like
      serialization,<span class="Apple-converted-space">&nbsp;</span><strong>the</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>Cloneable</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>architecture is
        incompatible with normal use of final fields referring to mutable
        objects</strong>, except in cases where the mutable objects may be
      safely shared between an object and its clone. In order to make a class
      cloneable, it may be necessary to remove<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">final</code><span class="Apple-converted-space">&nbsp;</span>modifiers
      from some fields.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is not always sufficient merely to call<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>recursively.
      For example, suppose you are writing a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      for a hash table whose internals consist of an array of buckets, each of
      which references the first entry in a linked list of key-value pairs. For
      performance, the class implements its own lightweight singly linked list
      instead of using<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.LinkedList</code><span
        class="Apple-converted-space">&nbsp;</span>internally:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex35a" id="pch3ex35" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class HashTable implements Cloneable {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Entry[] buckets = ...;<br>
      <span epub:type="pagebreak" id="page_62"></span>&nbsp;&nbsp;&nbsp;&nbsp;private
      static class Entry {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final Object key;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object value;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;&nbsp;next;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry(Object key, Object
      value, Entry next) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;
      = key;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value
      = value;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.next&nbsp;&nbsp;=
      next;&nbsp;&nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Suppose
      you merely clone the bucket array recursively, as we did for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex36a" id="pch3ex36" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken clone method - results in shared mutable state!</strong><br>
      @Override public HashTable clone() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashTable result =
      (HashTable) super.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.buckets =
      buckets.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;} catch (CloneNotSupportedException e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      AssertionError();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Though
      the clone has its own bucket array, this array references the same linked
      lists as the original, which can easily cause nondeterministic behavior in
      both the clone and the original. To fix this problem, you’ll have to copy
      the linked list that comprises each bucket. Here is one common approach:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex37a" id="pch3ex37" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Recursive clone method for class with complex mutable state</strong><br>
      public class HashTable implements Cloneable {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private Entry[] buckets = ...;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static class Entry {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final Object key;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object value;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;&nbsp;next;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry(Object key, Object
      value, Entry next) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;
      = key;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value
      = value;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.next&nbsp;&nbsp;=
      next;&nbsp;&nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      <span epub:type="pagebreak" id="page_63"></span><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>// Recursively
        copy the linked list headed by this Entry</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry deepCopy() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      new Entry(key, value,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next
      == null ? null : next.deepCopy());<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public HashTable clone() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashTable
      result = (HashTable) super.clone();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.buckets
      = new Entry[buckets.length];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
      (int i = 0; i &lt; buckets.length; i++)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
      (buckets[i] != null)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.buckets[i]
      = buckets[i].deepCopy();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      result;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch
      (CloneNotSupportedException e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw
      new AssertionError();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      private class<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashTable.Entry</code><span
        class="Apple-converted-space">&nbsp;</span>has been augmented to support
      a “deep copy” method. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      on<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashTable</code><span
        class="Apple-converted-space">&nbsp;</span>allocates a new<code style="font-family: 'Courier New', monospace;">buckets</code><span
        class="Apple-converted-space">&nbsp;</span>array of the proper size and
      iterates over the original<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">buckets</code><span class="Apple-converted-space">&nbsp;</span>array,
      deep-copying each nonempty bucket. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">deepCopy</code><span class="Apple-converted-space">&nbsp;</span>method
      on<code style="font-family: 'Courier New', monospace;">Entry</code><span class="Apple-converted-space">&nbsp;</span>invokes
      itself recursively to copy the entire linked list headed by the entry.
      While this technique is cute and works fine if the buckets aren’t too
      long, it is not a good way to clone a linked list because it consumes one
      stack frame for each element in the list. If the list is long, this could
      easily cause a stack overflow. To prevent this from happening, you can
      replace the recursion in<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">deepCopy</code><span class="Apple-converted-space">&nbsp;</span>with
      iteration:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex38a" id="pch3ex38" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Iteratively copy the linked list headed by this Entry</strong><br>
      Entry deepCopy() {<br>
      &nbsp;&nbsp;&nbsp;Entry result = new Entry(key, value, next);<br>
      &nbsp;&nbsp;&nbsp;for (Entry p = result; p.next != null; p = p.next)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.next = new Entry(p.next.key,
      p.next.value, p.next.next);<br>
      &nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      final approach to cloning complex mutable objects is to call<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>, set
      all of the fields in the resulting object to their initial state, and then
      call higher-level methods to regenerate the state of the original object.
      In the case of our<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashTable</code><span
        class="Apple-converted-space">&nbsp;</span>example, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">buckets</code><span class="Apple-converted-space">&nbsp;</span>field
      would be initialized to a new bucket array, and the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">put(key, value)</code><span
        class="Apple-converted-space">&nbsp;</span>method (not shown) would be
      invoked for each key-value<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_64"></span>mapping in the hash table
      being cloned. This approach typically yields a simple, reasonably elegant<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method that does not run as
      quickly as one that directly manipulates the innards of the clone. While
      this approach is clean, it is antithetical to the whole<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>architecture
      because it blindly overwrites the field-by-field object copy that forms
      the basis of the architecture.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Like
      a constructor, a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method must never invoke an
      overridable method on the clone under construction (<a href="ch4.xhtml#lev19"
        style="text-decoration: none;">Item 19</a>). If<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>invokes
      a method that is overridden in a subclass, this method will execute before
      the subclass has had a chance to fix its state in the clone, quite
      possibly leading to corruption in the clone and the original. Therefore,
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">put(key,
        value)</code><span class="Apple-converted-space">&nbsp;</span>method
      discussed in the previous paragraph should be either final or private. (If
      it is private, it is presumably the “helper method” for a nonfinal public
      method.)</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><code
        style="font-family: 'Courier New', monospace;">Object</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      is declared to throw<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CloneNotSupportedException</code>,
      but overriding methods need not.<span class="Apple-converted-space">&nbsp;</span><strong>Public</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>methods should omit
        the</strong><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>throws</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>clause</strong>, as
      methods that don’t throw checked exceptions are easier to use (<a href="ch10.xhtml#lev71"
        style="text-decoration: none;">Item 71</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      have two choices when designing a class for inheritance (<a href="ch4.xhtml#lev19"
        style="text-decoration: none;">Item 19</a>), but whichever one you
      choose, the class should<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>implement<code style="font-family: 'Courier New', monospace;">Cloneable</code>.
      You may choose to mimic the behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>by
      implementing a properly functioning protected<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      that is declared to throw<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CloneNotSupportedException</code>.
      This gives subclasses the freedom to implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>or
      not, just as if they extended<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code>directly.
      Alternatively, you may choose<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>to implement a working<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method,
      and to prevent subclasses from implementing one, by providing the
      following degenerate<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>implementation:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex39a" id="pch3ex39" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        clone method for extendable class not supporting Cloneable</strong><br>
      @Override<br>
      protected final Object clone() throws CloneNotSupportedException {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;throw new CloneNotSupportedException();<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      is one more detail that bears noting. If you write a thread-safe class
      that implements<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>,
      remember that its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method must be properly
      synchronized, just like any other method (<a href="ch11.xhtml#lev78" style="text-decoration: none;">Item
        78</a>).<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method is not synchronized,
      so even if its implementation is otherwise satisfactory, you may have to
      write a synchronized<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      that returns<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">super.clone()</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      recap, all classes that implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>should
      override<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>with a public method whose
      return type is the class itself. This method should first call<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.clone</code>, then
      fix any fields that need fixing. Typically, this means copying any mutable
      objects that comprise the internal “deep structure” of the object and
      replacing the clone’s references to these objects with references to their
      copies.<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_65"></span>While these internal copies can usually be made by
      calling<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>recursively, this is not
      always the best approach. If the class contains only primitive fields or
      references to immutable objects, then it is likely the case that no fields
      need to be fixed. There are exceptions to this rule. For example, a field
      representing a serial number or other unique ID will need to be fixed even
      if it is primitive or immutable.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Is
      all this complexity really necessary? Rarely. If you extend a class that
      already implements<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>,
      you have little choice but to implement a well-behaved<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method.
      Otherwise, you are usually better off providing an alternative means of
      object copying.<span class="Apple-converted-space">&nbsp;</span><strong>A
        better approach to object copying is to provide a</strong><span class="Apple-converted-space">&nbsp;</span><em><strong>copy
          constructor</strong></em><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><em><strong>copy factory</strong></em><strong>.</strong><span
        class="Apple-converted-space">&nbsp;</span>A copy constructor is simply
      a constructor that takes a single argument whose type is the class
      containing the constructor, for example,</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex40a" id="pch3ex40" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Copy constructor</strong><br>
      public Yum(Yum yum) { ... };</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      copy factory is the static factory (<a href="ch2.xhtml#lev1" style="text-decoration: none;">Item
        1</a>) analogue of a copy constructor:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex41a" id="pch3ex41" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Copy factory</strong><br>
      public static Yum newInstance(Yum yum) { ... };</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      copy constructor approach and its static factory variant have many
      advantages over<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>/<code
        style="font-family: 'Courier New', monospace;">clone</code>: they don’t
      rely on a risk-prone extralinguistic object creation mechanism; they don’t
      demand unenforceable adherence to thinly documented conventions; they
      don’t conflict with the proper use of final fields; they don’t throw
      unnecessary checked exceptions; and they don’t require casts.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Furthermore,
      a copy constructor or factory can take an argument whose type is an
      interface implemented by the class. For example, by convention all
      general-purpose collection implementations provide a constructor whose
      argument is of type<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Collection</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code>.
      Interface-based copy constructors and factories, more properly known as<span
        class="Apple-converted-space">&nbsp;</span><em>conversion constructors</em><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><em>conversion
        factories</em>, allow the client to choose the implementation type of
      the copy rather than forcing the client to accept the implementation type
      of the original. For example, suppose you have a<code style="font-family: 'Courier New', monospace;">HashSet</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">s</code>,
      and you want to copy it as a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">TreeSet</code>. The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method can’t offer this
      functionality, but it’s easy with a conversion constructor:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">new TreeSet&lt;&gt;(s)</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Given
      all the problems associated with<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code>, new
      interfaces should not extend it, and new extendable classes should not
      implement it. While it’s less harmful for final classes to implement<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code>,
      this should be viewed as a performance optimization, reserved for the rare
      cases where it is justified (<a href="ch9.xhtml#lev67" style="text-decoration: none;">Item
        67</a>). As a rule, copy functionality is best provided by constructors
      or factories. A notable exception to this rule is arrays, which are best
      copied with the clone method.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev14" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_66"></span><strong>Item 14: Consider implementing</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>Comparable</strong></code></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Unlike
      the other methods discussed in this chapter, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      is not declared in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>.
      Rather, it is the sole method in the<code style="font-family: 'Courier New', monospace;">Comparable</code><span
        class="Apple-converted-space">&nbsp;</span>interface. It is similar in
      character to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, except that it
      permits order comparisons in addition to simple equality comparisons, and
      it is generic. By implementing<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code>, a
      class indicates that its instances have a<span class="Apple-converted-space">&nbsp;</span><em>natural
        ordering.</em><span class="Apple-converted-space">&nbsp;</span>Sorting
      an array of objects that implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code><span class="Apple-converted-space">&nbsp;</span>is
      as simple as this:</p>
    <p class="codep" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 22.666668px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Arrays.sort(a);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is similarly easy to search, compute extreme values, and maintain
      automatically sorted collections of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code><span class="Apple-converted-space">&nbsp;</span>objects.
      For example, the following program, which relies on the fact that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>implements<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Comparable</code>,
      prints an alphabetized list of its command-line arguments with duplicates
      eliminated:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex42a" id="pch3ex42" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class WordList {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;String&gt; s = new
      TreeSet&lt;&gt;();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collections.addAll(s,
      args);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">By
      implementing<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Comparable</code>,
      you allow your class to interoperate with all of the many generic
      algorithms and collection implementations that depend on this interface.
      You gain a tremendous amount of power for a small amount of effort.
      Virtually all of the value classes in the Java platform libraries, as well
      as all enum types (<a href="ch6.xhtml#lev34" style="text-decoration: none;">Item
        34</a>), implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code>. If you
      are writing a value class with an obvious natural ordering, such as
      alphabetical order, numerical order, or chronological order, you should
      implement the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Comparable</code><span
        class="Apple-converted-space">&nbsp;</span>interface:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex43a" id="pch3ex43" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      interface Comparable&lt;T&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;int compareTo(T t);<br>
      }</p>
    <p class="noindentb" style="margin-top: 0px; margin-bottom: 15px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      general contract of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      is similar to that of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>:</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Compares
      this object with the specified object for order. Returns a negative
      integer, zero, or a positive integer as this object is less than, equal
      to, or greater than the specified object. Throws<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ClassCastException</code><span
        class="Apple-converted-space">&nbsp;</span>if the specified object’s
      type prevents it from being compared to this object.</p>
    <p class="indenti" style="margin-top: 6.666667px; margin-bottom: 6.666667px; margin-left: 18.666668px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_67"></span>In the following description,
      the notation<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">sgn</code>(<em>expression</em>)
      designates the mathematical<span class="Apple-converted-space">&nbsp;</span><em>signum</em><span
        class="Apple-converted-space">&nbsp;</span>function, which is defined to
      return<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">-</code>1,
      0, or 1, according to whether the value of<span class="Apple-converted-space">&nbsp;</span><em>expression</em><span
        class="Apple-converted-space">&nbsp;</span>is negative, zero, or
      positive.</p>
    <p class="bull1i" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 32px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      The implementor must ensure that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">sgn(x.compareTo(y)) ==
        -sgn(y. compareTo(x))</code><span class="Apple-converted-space">&nbsp;</span>for
      all<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">x</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">y</code>. (This implies
      that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">x.compareTo(y)</code>must
      throw an exception if and only if<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">y.compareTo(x)</code><span
        class="Apple-converted-space">&nbsp;</span>throws an exception.)</p>
    <p class="bull1i" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 32px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      The implementor must also ensure that the relation is transitive:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">(x. compareTo(y) &gt; 0
        &amp;&amp; y.compareTo(z) &gt; 0)</code><span class="Apple-converted-space">&nbsp;</span>implies<code
        style="font-family: 'Courier New', monospace;">x.compareTo(z) &gt; 0</code>.</p>
    <p class="bull1i" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 32px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      Finally, the implementor must ensure that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">x.compareTo(y) == 0</code><span
        class="Apple-converted-space">&nbsp;</span>implies that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">sgn(x.compareTo(z)) ==
        sgn(y.compareTo(z))</code>, for all<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">z</code>.</p>
    <p class="bull1i" style="margin-top: 0px; margin-bottom: 9.333334px; margin-left: 32px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•
      It is strongly recommended, but not required, that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">(x.compareTo(y) == 0) ==
        (x.equals(y))</code>. Generally speaking, any class that implements the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Comparable</code><span
        class="Apple-converted-space">&nbsp;</span>interface and violates this
      condition should clearly indicate this fact. The recommended language is
      “Note: This class has a natural ordering that is inconsistent with<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>.”</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Don’t
      be put off by the mathematical nature of this contract. Like the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>contract
      (<a href="ch3.xhtml#lev10" style="text-decoration: none;">Item 10</a>),
      this contract isn’t as complicated as it looks. Unlike the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method,
      which imposes a global equivalence relation on all objects,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>doesn’t
      have to work across objects of different types: when confronted with
      objects of different types,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>is
      permitted to throw<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">ClassCastException</code>.
      Usually, that is exactly what it does. The contract does<span class="Apple-converted-space">&nbsp;</span><em>permit</em><span
        class="Apple-converted-space">&nbsp;</span>intertype comparisons, which
      are typically defined in an interface implemented by the objects being
      compared.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Just
      as a class that violates the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code><span class="Apple-converted-space">&nbsp;</span>contract
      can break other classes that depend on hashing, a class that violates the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>contract can break other
      classes that depend on comparison. Classes that depend on comparison
      include the sorted collections<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">TreeSet</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">TreeMap</code><span
        class="Apple-converted-space">&nbsp;</span>and the utility classes<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Collections</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Arrays</code>, which
      contain searching and sorting algorithms.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Let’s
      go over the provisions of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>contract.
      The first provision says that if you reverse the direction of a comparison
      between two object references, the expected thing happens: if the first
      object is less than the second, then the second must be greater than the
      first; if the first object is equal to the second, then the second must be
      equal to the first; and if the first object is greater than the second,
      then the second must be less than the first. The second provision says
      that if one object is greater than a second and the second is greater than
      a third, then the first must be greater than the third. The final
      provision says that all objects that compare as equal must yield the same
      results when compared to any other object.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_68"></span>One consequence of these three
      provisions is that the equality test imposed by a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      must obey the same restrictions imposed by the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>con-tract:
      reflexivity, symmetry, and transitivity. Therefore, the same caveat
      applies: there is no way to extend an instantiable class with a new value
      component while preserving the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>contract,
      unless you are willing to forgo the benefits of object-oriented
      abstraction (<a href="ch3.xhtml#lev10" style="text-decoration: none;">Item
        10</a>). The same workaround applies, too. If you want to add a value
      component to a class that implements<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code>, don’t
      extend it; write an unrelated class containing an instance of the first
      class. Then provide a “view” method that returns the contained instance.
      This frees you to implement whatever<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      you like on the containing class, while allowing its client to view an
      instance of the containing class as an instance of the contained class
      when needed.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      final paragraph of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>contract,
      which is a strong suggestion rather than a true requirement, simply states
      that the equality test imposed by the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      should generally return the same results as the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method.
      If this provision is obeyed, the ordering imposed by the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      is said to be<span class="Apple-converted-space">&nbsp;</span><em>consistent
        with</em><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><em>equals</em></code>.
      If it’s violated, the ordering is said to be<span class="Apple-converted-space">&nbsp;</span><em>inconsistent
        with</em><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><em>equals</em></code>.
      A class whose<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>method imposes an order that
      is inconsistent with<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>will
      still work, but sorted collections containing elements of the class may
      not obey the general contract of the appropriate collection interfaces (<code
        style="font-family: 'Courier New', monospace;">Collection</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code>, or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code>). This is
      because the general contracts for these interfaces are defined in terms of
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, but sorted
      collections use the equality test imposed by<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>in
      place of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>.
      It is not a catastrophe if this happens, but it’s something to be aware
      of.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      example, consider the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code><span class="Apple-converted-space">&nbsp;</span>class,
      whose<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>method is inconsistent with<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code>.
      If you create an empty<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code><span class="Apple-converted-space">&nbsp;</span>instance
      and then add<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">new
        BigDecimal("1.0")</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">new
        BigDecimal("1.00")</code>, the set will contain two elements because the
      two<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigDecimal</code><span
        class="Apple-converted-space">&nbsp;</span>instances added to the set
      are unequal when compared using the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>method.
      If, however, you perform the same procedure using a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">TreeSet</code><span class="Apple-converted-space">&nbsp;</span>instead
      of a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code>,
      the set will contain only one element because the two<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code><span class="Apple-converted-space">&nbsp;</span>instances
      are equal when compared using the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method.
      (See the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigDecimal</code><span
        class="Apple-converted-space">&nbsp;</span>documentation for details.)</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Writing
      a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>method is similar to writing
      an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>method, but there are a few
      key differences. Because the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code><span class="Apple-converted-space">&nbsp;</span>interface
      is parameterized, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      is statically typed, so you don’t need to type check or cast its argument.
      If the argument is of the wrong type, the invocation won’t even compile.
      If the argument is<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">null</code>,
      the invocation should throw a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">NullPointer-Exception</code>,
      and it will, as soon as the method attempts to access its members.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_69"></span>In a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method,
      fields are compared for order rather than equality. To compare object
      reference fields, invoke the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      recursively. If a field does not implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code><span class="Apple-converted-space">&nbsp;</span>or
      you need a nonstandard ordering, use a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator</code><span class="Apple-converted-space">&nbsp;</span>instead.
      You can write your own comparator or use an existing one, as in this<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>method for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code><span
        class="Apple-converted-space">&nbsp;</span>in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch3.xhtml#lev10" style="text-decoration: none;">Item 10</a>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex44a" id="pch3ex44" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Single-field Comparable with object reference field</strong><br>
      public final class CaseInsensitiveString<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;implements
      Comparable&lt;CaseInsensitiveString&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public int compareTo(CaseInsensitiveString cis) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code><span
        class="Apple-converted-space">&nbsp;</span>implements<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable&lt;CaseInsensitiveString&gt;</code>.
      This means that a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code>reference
      can be compared only to another<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">CaseInsensitiveString</code><span
        class="Apple-converted-space">&nbsp;</span>reference. This is the normal
      pattern to follow when declaring a class to implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Prior
      editions of this book recommended that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>methods
      compare integral primitive fields using the relational operators<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">&lt;</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">&gt;</code>,
      and floating point primitive fields using the static methods<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Double.compare</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Float.compare</code>. In
      Java 7, static<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compare</code><span
        class="Apple-converted-space">&nbsp;</span>methods were added to all of
      Java’s boxed primitive classes.<span class="Apple-converted-space">&nbsp;</span><strong>Use
        of the relational operators</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>&lt;</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>and</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>&gt;</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>in</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>compareTo</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>methods is verbose
        and error-prone and no longer recommended.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      a class has multiple significant fields, the order in which you compare
      them is critical. Start with the most significant field and work your way
      down. If a comparison results in anything other than zero (which
      represents equality), you’re done; just return the result. If the most
      significant field is equal, compare the next-most-significant field, and
      so on, until you find an unequal field or compare the least significant
      field. Here is a<code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>method for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>class
      in<span class="Apple-converted-space">&nbsp;</span><a href="ch3.xhtml#lev11"
        style="text-decoration: none;">Item 11</a><span class="Apple-converted-space">&nbsp;</span>demonstrating
      this technique:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex45a" id="pch3ex45" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Multiple-field Comparable with primitive fields</strong><br>
      public int compareTo(PhoneNumber pn) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;int result = Short.compare(areaCode, pn.areaCode);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if (result == 0)&nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result =
      Short.compare(prefix, pn.prefix);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (result == 0)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result
      = Short.compare(lineNum, pn.lineNum);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_70"></span>In Java 8, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator</code><span class="Apple-converted-space">&nbsp;</span>interface
      was outfitted with a set of<span class="Apple-converted-space">&nbsp;</span><em>comparator
        construction methods</em>, which enable fluent construction of
      comparators. These comparators can then be used to implement a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method,
      as required by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Comparable</code><span
        class="Apple-converted-space">&nbsp;</span>interface. Many programmers
      prefer the conciseness of this approach, though it does come at a modest
      performance cost: sorting arrays of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code>instances
      is about 10% slower on my machine. When using this approach, consider
      using Java’s<span class="Apple-converted-space">&nbsp;</span><em>static
        import</em><span class="Apple-converted-space">&nbsp;</span>facility so
      you can refer to static comparator construction methods by their simple
      names for clarity and brevity. Here’s how the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>method
      for<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>looks using this approach:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex46a" id="pch3ex46" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Comparable with comparator construction methods</strong><br>
      private static final Comparator&lt;PhoneNumber&gt; COMPARATOR =<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comparingInt((PhoneNumber
      pn) -&gt; pn.areaCode)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.thenComparingInt(pn
      -&gt; pn.prefix)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.thenComparingInt(pn
      -&gt; pn.lineNum);<br>
      <br>
      public int compareTo(PhoneNumber pn) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return COMPARATOR.compare(this, pn);<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      implementation builds a comparator at class initialization time, using two
      comparator construction methods. The first is<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">comparingInt</code>. It
      is a static method that takes a<span class="Apple-converted-space">&nbsp;</span><em>key
        extractor function</em><span class="Apple-converted-space">&nbsp;</span>that
      maps an object reference to a key of type<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>and
      returns a comparator that orders instances according to that key. In the
      previous example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">comparingInt</code><span
        class="Apple-converted-space">&nbsp;</span>takes a<span class="Apple-converted-space">&nbsp;</span><em>lambda</em><span
        class="Apple-converted-space">&nbsp;</span>() that extracts the area
      code from a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>and returns a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator&lt;PhoneNumber&gt;</code><span
        class="Apple-converted-space">&nbsp;</span>that orders phone numbers
      according to their area codes. Note that the lambda explicitly specifies
      the type of its input parameter (<code style="font-family: 'Courier New', monospace;">PhoneNumber
        pn</code>). It turns out that in this situation, Java’s type inference
      isn’t powerful enough to figure the type out for itself, so we’re forced
      to help it in order to make the program compile.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      two phone numbers have the same area code, we need to further refine the
      comparison, and that’s exactly what the second comparator construction
      method,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">thenComparingInt</code>,
      does. It is an instance method on<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator</code><span class="Apple-converted-space">&nbsp;</span>that
      takes an<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">int</code><span
        class="Apple-converted-space">&nbsp;</span>key extractor function, and
      returns a comparator that first applies the original comparator and then
      uses the extracted key to break ties. You can stack up as many calls to<code
        style="font-family: 'Courier New', monospace;">thenComparingInt</code><span
        class="Apple-converted-space">&nbsp;</span>as you like, resulting in a<span
        class="Apple-converted-space">&nbsp;</span><em>lexicographic ordering</em>.
      In the example above, we stack up two calls to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">thenComparingInt</code>,
      resulting in an ordering whose secondary key is the prefix and whose
      tertiary key is the line number. Note that we did<span class="Apple-converted-space">&nbsp;</span><em>not</em><span
        class="Apple-converted-space">&nbsp;</span>have to specify the parameter
      type of the key extractor function passed to either of the calls to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">thenComparingInt</code>:
      Java’s type inference was smart enough to figure this one out for itself.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_71"></span>The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator</code><span class="Apple-converted-space">&nbsp;</span>class
      has a full complement of construction methods. There are analogues to<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">comparingInt</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">thenComparingInt</code><span
        class="Apple-converted-space">&nbsp;</span>for the primitive types<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">long</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">double</code>. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>versions
      can also be used for narrower integral types, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">short</code>, as in our<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>example. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">double</code><span class="Apple-converted-space">&nbsp;</span>versions
      can also be used for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">float</code>. This
      provides coverage of all of Java’s numerical primitive types.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are also comparator construction methods for object reference types. The
      static method, named<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">comparing</code>, has two
      overloadings. One takes a key extractor and uses the keys’ natural order.
      The second takes both a key extractor and a comparator to be used on the
      extracted keys. There are three overloadings of the instance method, which
      is named<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">thenComparing</code>.
      One overloading takes only a comparator and uses it to provide a secondary
      order. A second overloading takes only a key extractor and uses the key’s
      natural order as a secondary order. The final overloading takes both a key
      extractor and a comparator to be used on the extracted keys.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Occasionally
      you may see<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compareTo</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compare</code><span class="Apple-converted-space">&nbsp;</span>methods
      that rely on the fact that the difference between two values is negative
      if the first value is less than the second, zero if the two values are
      equal, and positive if the first value is greater. Here is an example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex47a" id="pch3ex47" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        BROKEN difference-based comparator - violates transitivity!</strong><br>
      static Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public int compare(Object o1, Object o2) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return o1.hashCode() -
      o2.hashCode();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      };</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Do
      not use this technique. It is fraught with danger from integer overflow
      and IEEE 754 floating point arithmetic artifacts [<a href="ref.xhtml#rJLS"
        style="text-decoration: none;">JLS 15.20.1, 15.21.1</a>]. Furthermore,
      the resulting methods are unlikely to be significantly faster than those
      written using the techniques described in this item. Use either a static<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compare</code><span
        class="Apple-converted-space">&nbsp;</span>method:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex48a" id="pch3ex48" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Comparator based on static compare method</strong><br>
      static Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public int compare(Object o1, Object o2) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      Integer.compare(o1.hashCode(), o2.hashCode());<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      };</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">or
      a comparator construction method:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch3_images.xhtml#pch3ex49a" id="pch3ex49" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Comparator based on Comparator construction method</strong><br>
      static Comparator&lt;Object&gt; hashCodeOrder =<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Comparator.comparingInt(o
      -&gt; o.hashCode());</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_72"></span>In summary, whenever you
      implement a value class that has a sensible ordering, you should have the
      class implement the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code>interface
      so that its instances can be easily sorted, searched, and used in
      comparison-based collections. When comparing field values in the
      implementations of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">compareTo</code><span class="Apple-converted-space">&nbsp;</span>methods,
      avoid the use of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">&lt;</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">&gt;</code><span
        class="Apple-converted-space">&nbsp;</span>operators. Instead, use the
      static<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">compare</code><span
        class="Apple-converted-space">&nbsp;</span>methods in the boxed
      primitive classes or the comparator construction methods in the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparator</code><span class="Apple-converted-space">&nbsp;</span>interface.</p>
    <p></p>
    <p>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
    </p>
    <h2 class="h2" id="ch4" style="font-size: 29px; margin-top: 30px; margin-bottom: 30px; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Chapter
      4. Classes and Interfaces</h2>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>C</strong><small
        style="font-size: 0.7em;">LASSES</small><span class="Apple-converted-space">&nbsp;</span>and
      interfaces lie at the heart of the Java programming language. They are its
      basic units of abstraction. The language provides many powerful elements
      that you can use to design classes and interfaces. This chapter contains
      guidelines to help you make the best use of these elements so that your
      classes and interfaces are usable, robust, and flexible.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev15" style="text-decoration: none;"></a><strong>Item 15: Minimize
        the accessibility of classes and members</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      single most important factor that distinguishes a well-designed component
      from a poorly designed one is the degree to which the component hides its
      internal data and other implementation details from other components. A
      well-designed component hides all its implementation details, cleanly
      separating its API from its implementation. Components then communicate
      only through their APIs and are oblivious to each others’ inner workings.
      This concept, known as<span class="Apple-converted-space">&nbsp;</span><em>information
        hiding</em><span class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><em>encapsulation</em>,
      is a fundamental tenet of software design [<a href="ref.xhtml#rParnas72" style="text-decoration: none;">Parnas72</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Information
      hiding is important for many reasons, most of which stem from the fact
      that it<span class="Apple-converted-space">&nbsp;</span><em>decouples</em><span
        class="Apple-converted-space">&nbsp;</span>the components that comprise
      a system, allowing them to be developed, tested, optimized, used,
      understood, and modified in isolation. This speeds up system development
      because components can be developed in parallel. It eases the burden of
      maintenance because components can be understood more quickly and debugged
      or replaced with little fear of harming other components. While
      information hiding does not, in and of itself, cause good performance, it
      enables effective performance tuning: once a system is complete and
      profiling has determined which components are causing performance problems
      (<a href="ch9.xhtml#lev67" style="text-decoration: none;">Item 67</a>),
      those components can be optimized without affecting the correctness of
      others. Information hiding increases software reuse because components
      that aren’t tightly coupled often prove useful in other contexts besides
      the ones for which they were<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_74"></span>developed. Finally,
      information hiding decreases the risk in building large systems because
      individual components may prove successful even if the system does not.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Java
      has many facilities to aid in information hiding. The<span class="Apple-converted-space">&nbsp;</span><em>access
        control</em><span class="Apple-converted-space">&nbsp;</span>mechanism
      [JLS, 6.6] specifies the<span class="Apple-converted-space">&nbsp;</span><em>accessibility</em><span
        class="Apple-converted-space">&nbsp;</span>of classes, interfaces, and
      members. The accessibility of an entity is determined by the location of
      its declaration and by which, if any, of the access modifiers (<code style="font-family: 'Courier New', monospace;">private</code>,<code
        style="font-family: 'Courier New', monospace;">protected</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">public</code>)
      is present on the declaration. Proper use of these modifiers is essential
      to information hiding.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      rule of thumb is simple:<span class="Apple-converted-space">&nbsp;</span><strong>make
        each class or member as inaccessible as possible.</strong><span class="Apple-converted-space">&nbsp;</span>In
      other words, use the lowest possible access level consistent with the
      proper functioning of the software that you are writing.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      top-level (non-nested) classes and interfaces, there are only two possible
      access levels:<span class="Apple-converted-space">&nbsp;</span><em>package-private</em><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><em>public</em>.
      If you declare a top-level class or interface with the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">public</code><span class="Apple-converted-space">&nbsp;</span>modifier,
      it will be public; otherwise, it will be package-private. If a top-level
      class or interface can be made package-private, it should be. By making it
      package-private, you make it part of the implementation rather than the
      exported API, and you can modify it, replace it, or eliminate it in a
      subsequent release without fear of harming existing clients. If you make
      it public, you are obligated to support it forever to maintain
      compatibility.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      a package-private top-level class or interface is used by only one class,
      consider making the top-level class a private static nested class of the
      sole class that uses it (<a href="ch4.xhtml#lev24" style="text-decoration: none;">Item
        24</a>). This reduces its accessibility from all the classes in its
      package to the one class that uses it. But it is far more important to
      reduce the accessibility of a gratuitously public class than of a
      package-private top-level class: the public class is part of the package’s
      API, while the package-private top-level class is already part of its
      implementation.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      members (fields, methods, nested classes, and nested interfaces), there
      are four possible access levels, listed here in order of increasing
      accessibility:</p>
    <p class="bullb1" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>private</strong>—The
      member is accessible only from the top-level class where it is declared.</p>
    <p class="bullb1" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>package-private</strong>—The
      member is accessible from any class in the package where it is declared.
      Technically known as<span class="Apple-converted-space">&nbsp;</span><em>default</em><span
        class="Apple-converted-space">&nbsp;</span>access, this is the access
      level you get if no access modifier is specified (except for interface
      members, which are public by default).</p>
    <p class="bullb1" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>protected</strong>—The
      member is accessible from subclasses of the class where it is declared
      (subject to a few restrictions [JLS, 6.6.2]) and from any class in the
      package where it is declared.</p>
    <p class="bullb1" style="margin-top: 0px; margin-bottom: 6.666667px; margin-left: 20px; text-indent: -10.666667px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">•<span
        class="Apple-converted-space">&nbsp;</span><strong>public</strong>—The
      member is accessible from anywhere.</p>
    <p class="indentt" style="margin-top: 13.333334px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_75"></span>After carefully designing your
      class’s public API, your reflex should be to make all other members
      private. Only if another class in the same package really needs to access
      a member should you remove the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">private</code><span class="Apple-converted-space">&nbsp;</span>modifier,
      making the member package-private. If you find yourself doing this often,
      you should reexamine the design of your system to see if another
      decomposition might yield classes that are better decoupled from one
      another. That said, both private and package-private members are part of a
      class’s implementation and do not normally impact its exported API. These
      fields can, however, “leak” into the exported API if the class implements<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch12.xhtml#lev86" style="text-decoration: none;">Items
        86</a><span class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><a
        href="ch12.xhtml#lev87" style="text-decoration: none;">87</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      members of public classes, a huge increase in accessibility occurs when
      the access level goes from package-private to protected. A protected
      member is part of the class’s exported API and must be supported forever.
      Also, a protected member of an exported class represents a public
      commitment to an implementation detail (<a href="ch4.xhtml#lev19" style="text-decoration: none;">Item
        19</a>). The need for protected members should be relatively rare.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      is a key rule that restricts your ability to reduce the accessibility of
      methods. If a method overrides a superclass method, it cannot have a more
      restrictive access level in the subclass than in the superclass [JLS,
      8.4.8.3]. This is necessary to ensure that an instance of the subclass is
      usable anywhere that an instance of the superclass is usable (the<span class="Apple-converted-space">&nbsp;</span><em>Liskov
        substitution principle</em>, see<span class="Apple-converted-space">&nbsp;</span><a
        href="ch4.xhtml#lev15" style="text-decoration: none;">Item 15</a>). If
      you violate this rule, the compiler will generate an error message when
      you try to compile the subclass. A special case of this rule is that if a
      class implements an interface, all of the class methods that are in the
      interface must be declared public in the class.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      facilitate testing your code, you may be tempted to make a class,
      interface, or member more accessible than otherwise necessary. This is
      fine up to a point. It is acceptable to make a private member of a public
      class package-private in order to test it, but it is not acceptable to
      raise the accessibility any higher. In other words, it is not acceptable
      to make a class, interface, or member a part of a pack-age’s exported API
      to facilitate testing. Luckily, it isn’t necessary either because tests
      can be made to run as part of the package being tested, thus gaining
      access to its package-private elements.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Instance
        fields of public classes should rarely be public</strong><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch4.xhtml#lev16" style="text-decoration: none;">Item 16</a>). If
      an instance field is nonfinal or is a reference to a mutable object, then
      by making it public, you give up the ability to limit the values that can
      be stored in the field. This means you give up the ability to enforce
      invariants involving the field. Also, you give up the ability to take any
      action when the field is modified, so<span class="Apple-converted-space">&nbsp;</span><strong>classes
        with public mutable fields are not generally thread-safe.</strong><span
        class="Apple-converted-space">&nbsp;</span>Even if a field is final and
      refers to an immutable object, by making it public you give up the
      flexibility to switch to a new internal data representation in which the
      field does not exist.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_76"></span>The same advice applies to
      static fields, with one exception. You can expose constants via public
      static final fields, assuming the constants form an integral part of the
      abstraction provided by the class. By convention, such fields have names
      consisting of capital letters, with words separated by underscores (<a href="ch9.xhtml#lev68"
        style="text-decoration: none;">Item 68</a>). It is critical that these
      fields contain either primitive values or references to immutable objects
      (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item 17</a>). a
      field containing a reference to a mutable object has all the disadvantages
      of a nonfinal field. While the reference cannot be modified, the
      referenced object can be modified—with disastrous results.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that a nonzero-length array is always mutable, so<span class="Apple-converted-space">&nbsp;</span><strong>it
        is wrong for a class to have a public static final array field, or an
        accessor that returns such a field.</strong><span class="Apple-converted-space">&nbsp;</span>If
      a class has such a field or accessor, clients will be able to modify the
      contents of the array. This is a frequent source of security holes:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex1a" id="pch4ex1" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Potential security hole!</strong><br>
      public static final Thing[] VALUES = { ... };</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Beware
      of the fact that some IDEs generate accessors that return references to
      private array fields, resulting in exactly this problem. There are two
      ways to fix the problem. You can make the public array private and add a
      public immutable list:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex2a" id="pch4ex2" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">private
      static final Thing[] PRIVATE_VALUES = { ... };<br>
      public static final List&lt;Thing&gt; VALUES =<br>
&nbsp;&nbsp;&nbsp;Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Alternatively,
      you can make the array private and add a public method that returns a copy
      of a private array:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex3a" id="pch4ex3" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">private
      static final Thing[] PRIVATE_VALUES = { ... };<br>
      public static final Thing[] values() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return PRIVATE_VALUES.clone();<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      choose between these alternatives, think about what the client is likely
      to do with the result. Which return type will be more convenient? Which
      will give better performance?</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      of Java 9, there are two additional, implicit access levels introduced as
      part of the<span class="Apple-converted-space">&nbsp;</span><em>module
        system</em>. A module is a grouping of packages, like a package is a
      grouping of classes. A module may explicitly export some of its packages
      via<span class="Apple-converted-space">&nbsp;</span><em>export
        declarations</em><span class="Apple-converted-space">&nbsp;</span>in its<span
        class="Apple-converted-space">&nbsp;</span><em>module declaration</em><span
        class="Apple-converted-space">&nbsp;</span>(which is by convention
      contained in a source file named<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">module-info.java</code>).
      Public and protected members of unexported packages in a module are
      inaccessible outside the module; within the<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_77"></span>module, accessibility is
      unaffected by export declarations. Using the module system allows you to
      share classes among packages within a module without making them visible
      to the entire world. Public and protected members of public classes in
      unexported packages give rise to the two implicit access levels, which are
      intramodular analogues of the normal public and protected levels. The need
      for this kind of sharing is relatively rare and can often be eliminated by
      rearranging the classes within your packages.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Unlike
      the four main access levels, the two module-based levels are largely
      advisory. If you place a module’s JAR file on your application’s class
      path instead of its module path, the packages in the module revert to
      their non-modular behavior: all of the public and protected members of the
      packages’ public classes have their normal accessibility, regardless of
      whether the packages are exported by the module [Reinhold, 1.2]. The one
      place where the newly introduced access levels are strictly enforced is
      the JDK itself: the unexported packages in the Java libraries are truly
      inaccessible outside of their modules.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Not
      only is the access protection afforded by modules of limited utility to
      the typical Java programmer, and largely advisory in nature; in order to
      take advantage of it, you must group your packages into modules, make all
      of their dependencies explicit in module declarations, rearrange your
      source tree, and take special actions to accommodate any access to
      non-modularized packages from within your modules [Reinhold, 3]. It is too
      early to say whether modules will achieve widespread use outside of the
      JDK itself. In the meantime, it seems best to avoid them unless you have a
      compelling need.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      summarize, you should reduce accessibility of program elements as much as
      possible (within reason). After carefully designing a minimal public API,
      you should prevent any stray classes, interfaces, or members from becoming
      part of the API. With the exception of public static final fields, which
      serve as constants, public classes should have no public fields. Ensure
      that objects referenced by public static final fields are immutable.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev16" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_78"></span><strong>Item 16: In public classes, use accessor
        methods, not public fields</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Occasionally,
      you may be tempted to write degenerate classes that serve no purpose other
      than to group instance fields:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex4a" id="pch4ex4" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Degenerate classes like this should not be public!</strong><br>
      class Point {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public double x;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public double y;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      the data fields of such classes are accessed directly, these classes do
      not offer the benefits of<span class="Apple-converted-space">&nbsp;</span><em>encapsulation</em><span
        class="Apple-converted-space">&nbsp;</span>(<a href="ch4.xhtml#lev15" style="text-decoration: none;">Item
        15</a>). You can’t change the representation without changing the API,
      you can’t enforce invariants, and you can’t take auxiliary action when a
      field is accessed. Hard-line object-oriented programmers feel that such
      classes are anathema and should always be replaced by classes with private
      fields and public<span class="Apple-converted-space">&nbsp;</span><em>accessor
        methods</em><span class="Apple-converted-space">&nbsp;</span>(getters)
      and, for mutable classes,<span class="Apple-converted-space">&nbsp;</span><em>mutators</em><span
        class="Apple-converted-space">&nbsp;</span>(setters):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex5a" id="pch4ex5" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Encapsulation of data by accessor methods and mutators</strong><br>
      class Point {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private double x;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private double y;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Point(double x, double y) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x = x;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y = y;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public double getX() { return x; }</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public double getY() { return y; }</strong><br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public void setX(double x) { this.x = x; }</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public void setY(double y) { this.y = y; }</strong><br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Certainly,
      the hard-liners are correct when it comes to public classes:<span class="Apple-converted-space">&nbsp;</span><strong>if
        a class is accessible outside its package, provide accessor methods</strong><span
        class="Apple-converted-space">&nbsp;</span>to preserve the flexibility
      to change the class’s internal representation. If a public class exposes
      its data fields, all hope of changing its representation is lost because
      client code can be distributed far and wide.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">However,<span
        class="Apple-converted-space">&nbsp;</span><strong>if a class is
        package-private or is a private nested class, there is nothing
        inherently wrong with exposing its data fields</strong>—assuming they do
      an<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_79"></span>adequate job of describing the abstraction provided
      by the class. This approach generates less visual clutter than the
      accessor-method approach, both in the class definition and in the client
      code that uses it. While the client code is tied to the class’s internal
      representation, this code is confined to the package containing the class.
      If a change in representation becomes desirable, you can make the change
      without touching any code outside the package. In the case of a private
      nested class, the scope of the change is further restricted to the
      enclosing class.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Several
      classes in the Java platform libraries violate the advice that public
      classes should not expose fields directly. Prominent examples include the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Point</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dimension</code><span class="Apple-converted-space">&nbsp;</span>classes
      in the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.awt</code><span
        class="Apple-converted-space">&nbsp;</span>package. Rather than examples
      to be emulated, these classes should be regarded as cautionary tales. As
      described in<span class="Apple-converted-space">&nbsp;</span><a href="ch9.xhtml#lev67"
        style="text-decoration: none;">Item 67</a>, the decision to expose the
      internals of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Dimension</code><span
        class="Apple-converted-space">&nbsp;</span>class resulted in a serious
      performance problem that is still with us today.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      it’s never a good idea for a public class to expose fields directly, it is
      less harmful if the fields are immutable. You can’t change the
      representation of such a class without changing its API, and you can’t
      take auxiliary actions when a field is read, but you can enforce
      invariants. For example, this class guarantees that each instance
      represents a valid time:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex6a" id="pch4ex6" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Public class with exposed immutable fields - questionable</strong><br>
      public final class Time {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final int
      HOURS_PER_DAY&nbsp;&nbsp;&nbsp;&nbsp;= 24;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static final int MINUTES_PER_HOUR = 60;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public final int hour;</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public final int minute;</strong><br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Time(int hour, int minute) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hour &lt; 0 || hour
      &gt;= HOURS_PER_DAY)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new
      IllegalArgumentException("Hour: " + hour);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minute &lt; 0 ||
      minute &gt;= MINUTES_PER_HOUR)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new
      IllegalArgumentException("Min: " + minute);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.hour = hour;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.minute = minute;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder omitted<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, public classes should never expose mutable fields. It is less
      harmful, though still questionable, for public classes to expose immutable
      fields. It is, however, sometimes desirable for package-private or private
      nested classes to expose fields, whether mutable or immutable.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev17" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_80"></span><strong>Item 17: Minimize mutability</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">An
      immutable class is simply a class whose instances cannot be modified. All
      of the information contained in each instance is fixed for the lifetime of
      the object, so no changes can ever be observed. The Java platform
      libraries contain many immutable classes, including<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code>, the boxed
      primitive classes, and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigDecimal</code>.
      There are many good reasons for this: Immutable classes are easier to
      design, implement, and use than mutable classes. They are less prone to
      error and are more secure.</p>
    <p class="indentb" style="margin-top: 0px; margin-bottom: 13.333334px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      make a class immutable, follow these five rules:</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">1.<span
        class="Apple-converted-space">&nbsp;</span><strong>Don’t provide methods
        that modify the object’s state</strong><span class="Apple-converted-space">&nbsp;</span>(known
      as<span class="Apple-converted-space">&nbsp;</span><em>mutators</em>).</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">2.<span
        class="Apple-converted-space">&nbsp;</span><strong>Ensure that the class
        can’t be extended.</strong><span class="Apple-converted-space">&nbsp;</span>This
      prevents careless or malicious subclasses from compromising the immutable
      behavior of the class by behaving as if the object’s state has changed.
      Preventing subclassing is generally accomplished by making the class
      final, but there is an alternative that we’ll discuss later.</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">3.<span
        class="Apple-converted-space">&nbsp;</span><strong>Make all fields
        final.</strong><span class="Apple-converted-space">&nbsp;</span>This
      clearly expresses your intent in a manner that is enforced by the system.
      Also, it is necessary to ensure correct behavior if a reference to a newly
      created instance is passed from one thread to another without
      synchronization, as spelled out in the<em>memory model</em><span class="Apple-converted-space">&nbsp;</span>[JLS,
      17.5; Goetz06, 16].</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">4.<span
        class="Apple-converted-space">&nbsp;</span><strong>Make all fields
        private.</strong><span class="Apple-converted-space">&nbsp;</span>This
      prevents clients from obtaining access to mutable objects referred to by
      fields and modifying these objects directly. While it is technically
      permissible for immutable classes to have public final fields containing
      primitive values or references to immutable objects, it is not recommended
      because it precludes changing the internal representation in a later
      release (<a href="ch4.xhtml#lev15" style="text-decoration: none;">Items 15</a><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><a
        href="ch4.xhtml#lev16" style="text-decoration: none;">16</a>).</p>
    <p class="numberb" style="margin-top: 0px; margin-bottom: 13.333334px; margin-left: 33.333336px; text-indent: -16px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">5.<span
        class="Apple-converted-space">&nbsp;</span><strong>Ensure exclusive
        access to any mutable components.</strong><span class="Apple-converted-space">&nbsp;</span>If
      your class has any fields that refer to mutable objects, ensure that
      clients of the class cannot obtain references to these objects. Never
      initialize such a field to a client-provided object reference or return
      the field from an accessor. Make<span class="Apple-converted-space">&nbsp;</span><em>defensive
        copies</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch8.xhtml#lev50"
        style="text-decoration: none;">Item 50</a>) in constructors, accessors,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readObject</code><span
        class="Apple-converted-space">&nbsp;</span>methods (<a href="ch12.xhtml#lev88"
        style="text-decoration: none;">Item 88</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Many
      of the example classes in previous items are immutable. One such class is<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code><span
        class="Apple-converted-space">&nbsp;</span>in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch3.xhtml#lev11" style="text-decoration: none;">Item 11</a>, which
      has accessors for each attribute but no corresponding mutators. Here is a
      slightly more complex example:</p>
    <span epub:type="pagebreak" id="page_81" style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"></span><span
      style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;"></span>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex7a" id="pch4ex7" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Immutable complex number class</strong><br>
      public<span class="Apple-converted-space">&nbsp;</span><strong>final</strong>&nbsp;&nbsp;class
      Complex {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>private final</strong>&nbsp;&nbsp;double
      re;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>private final</strong>&nbsp;&nbsp;double
      im;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Complex(double re, double im) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.re = re;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.im = im;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public double
      realPart()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ return re; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public double imaginaryPart() { return im; }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Complex plus(Complex c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Complex(re +
      c.re, im + c.im);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Complex minus(Complex c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Complex(re -
      c.re, im - c.im);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Complex times(Complex c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Complex(re *
      c.re - im * c.im,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      re * c.im + im * c.re);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Complex dividedBy(Complex c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double tmp = c.re * c.re +
      c.im * c.im;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Complex((re *
      c.re + im * c.im) / tmp,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      (im * c.re - re * c.im) / tmp);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (o == this)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(o instanceof Complex))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Complex c = (Complex) o;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // See page 47 to find out why we use
      compare instead of ==<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Double.compare(c.re, re) == 0<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp;
      Double.compare(c.im, im) == 0;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public int hashCode() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 31 *
      Double.hashCode(re) + Double.hashCode(im);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public String toString() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "(" + re + " + " +
      im + "i)";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_82"></span>This class represents a<span class="Apple-converted-space">&nbsp;</span><em>complex
        number</em><span class="Apple-converted-space">&nbsp;</span>(a number
      with both real and imaginary parts). In addition to the standard<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>methods,
      it provides accessors for the real and imaginary parts and provides the
      four basic arithmetic operations: addition, subtraction, multiplication,
      and division. Notice how the arithmetic operations create and return a new<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Complex</code><span
        class="Apple-converted-space">&nbsp;</span>instance rather than
      modifying this instance. This pattern is known as the<em>functional</em><span
        class="Apple-converted-space">&nbsp;</span>approach because methods
      return the result of applying a function to their operand, without
      modifying it. Contrast it to the<span class="Apple-converted-space">&nbsp;</span><em>procedural</em>or<span
        class="Apple-converted-space">&nbsp;</span><em>imperative</em><span class="Apple-converted-space">&nbsp;</span>approach
      in which methods apply a procedure to their operand, causing its state to
      change. Note that the method names are prepositions (such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">plus</code>) rather than
      verbs (such as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">add</code>).
      This emphasizes the fact that methods don’t change the values of the
      objects. The<code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code><span class="Apple-converted-space">&nbsp;</span>classes
      did<span class="Apple-converted-space">&nbsp;</span><em>not</em><span class="Apple-converted-space">&nbsp;</span>obey
      this naming convention, and it led to many usage errors.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      functional approach may appear unnatural if you’re not familiar with it,
      but it enables immutability, which has many advantages.<strong>Immutable
        objects are simple.</strong><span class="Apple-converted-space">&nbsp;</span>An
      immutable object can be in exactly one state, the state in which it was
      created. If you make sure that all constructors establish class
      invariants, then it is guaranteed that these invariants will remain true
      for all time, with no further effort on your part or on the part of the
      programmer who uses the class. Mutable objects, on the other hand, can
      have arbitrarily complex state spaces. If the documentation does not
      provide a precise description of the state transitions performed by
      mutator methods, it can be difficult or impossible to use a mutable class
      reliably.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Immutable
        objects are inherently thread-safe; they require no synchronization.</strong><span
        class="Apple-converted-space">&nbsp;</span>They cannot be corrupted by
      multiple threads accessing them concurrently. This is far and away the
      easiest approach to achieve thread safety. Since no thread can ever
      observe any effect of another thread on an immutable object,<span class="Apple-converted-space">&nbsp;</span><strong>immutable
        objects can be shared freely.</strong><span class="Apple-converted-space">&nbsp;</span>Immutable
      classes should therefore encourage clients to reuse existing instances
      wherever possible. One easy way to do this is to provide public static
      final constants for commonly used values. For example, the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Complex</code><span class="Apple-converted-space">&nbsp;</span>class
      might provide these constants:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex8a" id="pch4ex8" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      static final Complex ZERO = new Complex(0, 0);<br>
      public static final Complex ONE&nbsp;&nbsp;= new Complex(1, 0);<br>
      public static final Complex I&nbsp;&nbsp;&nbsp;&nbsp;= new Complex(0, 1);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      approach can be taken one step further. An immutable class can provide
      static factories (<a href="ch2.xhtml#lev1" style="text-decoration: none;">Item
        1</a>) that cache frequently requested instances to avoid creating new
      instances when existing ones would do. All the boxed primitive classes and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>do this. Using such static
      factories causes clients to share instances instead of creating new ones,
      reducing memory footprint and garbage collection<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_83"></span>costs. Opting for static
      factories in place of public constructors when designing a new class gives
      you the flexibility to add caching later, without modifying clients.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      consequence of the fact that immutable objects can be shared freely is
      that you never have to make<span class="Apple-converted-space">&nbsp;</span><em>defensive
        copies</em><span class="Apple-converted-space">&nbsp;</span>of them (<a
        href="ch8.xhtml#lev50" style="text-decoration: none;">Item 50</a>). In
      fact, you never have to make any copies at all because the copies would be
      forever equivalent to the originals. Therefore, you need not and should
      not provide a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clone</code><span
        class="Apple-converted-space">&nbsp;</span>method or<span class="Apple-converted-space">&nbsp;</span><em>copy
        constructor</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch3.xhtml#lev13"
        style="text-decoration: none;">Item 13</a>) on an immutable class. This
      was not well understood in the early days of the Java platform, so the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code><span
        class="Apple-converted-space">&nbsp;</span>class does have a copy
      constructor, but it should rarely, if ever, be used (<a href="ch2.xhtml#lev6"
        style="text-decoration: none;">Item 6</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Not
        only can you share immutable objects, but they can share their
        internals.</strong><span class="Apple-converted-space">&nbsp;</span>For
      example, the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>class uses a sign-magnitude
      representation internally. The sign is represented by an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code>, and the
      magnitude is represented by an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>array.
      The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">negate</code><span
        class="Apple-converted-space">&nbsp;</span>method produces a new<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code><span class="Apple-converted-space">&nbsp;</span>of
      like magnitude and opposite sign. It does not need to copy the array even
      though it is mutable; the newly created<code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>points to the same internal
      array as the original.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Immutable
        objects make great building blocks for other objects,</strong><span class="Apple-converted-space">&nbsp;</span>whether
      mutable or immutable. It’s much easier to maintain the invariants of a
      complex object if you know that its component objects will not change
      underneath it. A special case of this principle is that immutable objects
      make great map keys and set elements: you don’t have to worry about their
      values changing once they’re in the map or set, which would destroy the
      map or set’s invariants.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Immutable
        objects provide failure atomicity for free</strong><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch10.xhtml#lev76" style="text-decoration: none;">Item 76</a>).
      Their state never changes, so there is no possibility of a temporary
      inconsistency.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        major disadvantage of immutable classes is that they require a separate
        object for each distinct value.</strong><span class="Apple-converted-space">&nbsp;</span>Creating
      these objects can be costly, especially if they are large. For example,
      suppose that you have a million-bit<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code><span class="Apple-converted-space">&nbsp;</span>and
      you want to change its low-order bit:</p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">BigInteger
      moby = ...;<br>
      moby = moby.flipBit(0);</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">flipBit</code><span
        class="Apple-converted-space">&nbsp;</span>method creates a new<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code><span class="Apple-converted-space">&nbsp;</span>instance,
      also a million bits long, that differs from the original in only one bit.
      The operation requires time and space proportional to the size of the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code>.
      Contrast this to<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.BitSet</code>.
      Like<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BitSet</code><span
        class="Apple-converted-space">&nbsp;</span>represents an arbitrarily
      long sequence of bits, but unlike<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BitSet</code><span class="Apple-converted-space">&nbsp;</span>is
      mutable. The<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BitSet</code><span
        class="Apple-converted-space">&nbsp;</span>class provides a method that
      allows you to change the state of a single bit of a million-bit instance
      in constant time:</p>
    <p class="codep" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 22.666668px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">BitSet
      moby = ...;<br>
      moby.flip(0);</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_84"></span>The performance problem is
      magnified if you perform a multistep operation that generates a new object
      at every step, eventually discarding all objects except the final result.
      There are two approaches to coping with this problem. The first is to
      guess which multistep operations will be commonly required and to provide
      them as primitives. If a multistep operation is provided as a primitive,
      the immutable class does not have to create a separate object at each
      step. Internally, the immutable class can be arbitrarily clever. For
      example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>has a package-private mutable
      “companion class” that it uses to speed up multistep operations such as
      modular exponentiation. It is much harder to use the mutable companion
      class than to use<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code>,
      for all of the reasons outlined earlier. Luckily, you don’t have to use
      it: the implementors of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigInteger</code>did the
      hard work for you.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      package-private mutable companion class approach works fine if you can
      accurately predict which complex operations clients will want to perform
      on your immutable class. If not, then your best bet is to provide a<span class="Apple-converted-space">&nbsp;</span><em>public</em><span
        class="Apple-converted-space">&nbsp;</span>mutable companion class. The
      main example of this approach in the Java platform libraries is the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>class,
      whose mutable companion is<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">StringBuilder</code><span
        class="Apple-converted-space">&nbsp;</span>(and its obsolete
      predecessor,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">StringBuffer</code>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Now
      that you know how to make an immutable class and you understand the pros
      and cons of immutability, let’s discuss a few design alternatives. Recall
      that to guarantee immutability, a class must not permit itself to be
      subclassed. This can be done by making the class final, but there is
      another, more flexible alternative. Instead of making an immutable class
      final, you can make all of its constructors private or package-private and
      add public static factories in place of the public constructors (<a href="ch2.xhtml#lev1"
        style="text-decoration: none;">Item 1</a>). To make this concrete,
      here’s how<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Complex</code><span
        class="Apple-converted-space">&nbsp;</span>would look if you took this
      approach:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex9a" id="pch4ex9" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Immutable class with static factories instead of constructors</strong><br>
      public class Complex {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final double re;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final double im;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>private</strong><span class="Apple-converted-space">&nbsp;</span>Complex(double
      re, double im) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.re = re;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.im = im;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>public static Complex valueOf(double re,
        double im)</strong><span class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Complex(re,
      im);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Remainder unchanged<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_85"></span>This approach is often the
      best alternative. It is the most flexible because it allows the use of
      multiple package-private implementation classes. To its clients that
      reside outside its package, the immutable class is effectively final
      because it is impossible to extend a class that comes from another package
      and that lacks a public or protected constructor. Besides allowing the
      flexibility of multiple implementation classes, this approach makes it
      possible to tune the performance of the class in subsequent releases by
      improving the object-caching capabilities of the static factories.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      was not widely understood that immutable classes had to be effectively
      final when<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code><span class="Apple-converted-space">&nbsp;</span>were
      written, so all of their methods may be overridden. Unfortunately, this
      could not be corrected after the fact while preserving backward
      compatibility. If you write a class whose security depends on the
      immutability of a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code><span class="Apple-converted-space">&nbsp;</span>argument
      from an untrusted client, you must check to see that the argument is a
      “real”<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">BigDecimal</code>, rather
      than an instance of an untrusted subclass. If it is the latter, you must
      defensively copy it under the assumption that it might be mutable (<a href="ch8.xhtml#lev50"
        style="text-decoration: none;">Item 50</a>):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex10a" id="pch4ex10" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      static BigInteger safeInstance(BigInteger val) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return val.getClass() == BigInteger.class ?<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
      : new BigInteger(val.toByteArray());<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      list of rules for immutable classes at the beginning of this item says
      that no methods may modify the object and that all its fields must be
      final. In fact these rules are a bit stronger than necessary and can be
      relaxed to improve performance. In truth, no method may produce an<em>externally
        visible</em><span class="Apple-converted-space">&nbsp;</span>change in
      the object’s state. However, some immutable classes have one or more
      nonfinal fields in which they cache the results of expensive computations
      the first time they are needed. If the same value is requested again, the
      cached value is returned, saving the cost of recalculation. This trick
      works precisely because the object is immutable, which guarantees that the
      computation would yield the same result if it were repeated.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhoneNumber</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code><span
        class="Apple-converted-space">&nbsp;</span>method (<a href="ch3.xhtml#lev11"
        style="text-decoration: none;">Item 11</a>, page 53) computes the hash
      code the first time it’s invoked and caches it in case it’s invoked again.
      This technique, an example of<span class="Apple-converted-space">&nbsp;</span><em>lazy
        initialization</em><span class="Apple-converted-space">&nbsp;</span>(<a
        href="ch11.xhtml#lev83" style="text-decoration: none;">Item 83</a>), is
      also used by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">String</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      caveat should be added concerning serializability. If you choose to have
      your immutable class implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>and it contains one or more
      fields that refer to mutable objects, you must provide an explicit<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">readObject</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readResolve</code><span
        class="Apple-converted-space">&nbsp;</span>method, or use the<code style="font-family: 'Courier New', monospace;">ObjectOutputStream.writeUnshared</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_86"></span><code style="font-family: 'Courier New', monospace;">ObjectInputStream.readUnshared</code><span
        class="Apple-converted-space">&nbsp;</span>methods, even if the default
      serialized form is acceptable. Otherwise an attacker could create a
      mutable instance of your class. This topic is covered in detail in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch12.xhtml#lev88" style="text-decoration: none;">Item 88</a>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      summarize, resist the urge to write a setter for every getter.<span class="Apple-converted-space">&nbsp;</span><strong>Classes
        should be immutable unless there’s a very good reason to make them
        mutable.</strong><span class="Apple-converted-space">&nbsp;</span>Immutable
      classes provide many advantages, and their only disadvantage is the
      potential for performance problems under certain circumstances. You should
      always make small value objects, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">PhoneNumber</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Complex</code>,
      immutable. (There are several classes in the Java platform libraries, such
      as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.Date</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.awt.Point</code>,
      that should have been immutable but aren’t.) You should seriously consider
      making larger value objects, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">String</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">BigInteger</code>,
      immutable as well. You should provide a public mutable companion class for
      your immutable class<span class="Apple-converted-space">&nbsp;</span><em>only</em><span
        class="Apple-converted-space">&nbsp;</span>once you’ve confirmed that
      it’s necessary to achieve satisfactory performance (<a href="ch9.xhtml#lev67"
        style="text-decoration: none;">Item 67</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are some classes for which immutability is impractical.<span class="Apple-converted-space">&nbsp;</span><strong>If
        a class cannot be made immutable, limit its mutability as much as
        possible.</strong><span class="Apple-converted-space">&nbsp;</span>Reducing
      the number of states in which an object can exist makes it easier to
      reason about the object and reduces the likelihood of errors. Therefore,
      make every field final unless there is a compelling reason to make it
      nonfinal. Combining the advice of this item with that of<a href="ch4.xhtml#lev15"
        style="text-decoration: none;">Item 15</a>, your natural inclination
      should be to<span class="Apple-converted-space">&nbsp;</span><strong>declare
        every field</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>private final</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>unless there’s a good
        reason to do otherwise.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Constructors
        should create fully initialized objects with all of their invariants
        established.</strong><span class="Apple-converted-space">&nbsp;</span>Don’t
      provide a public initialization method separate from the constructor or
      static factory unless there is a<span class="Apple-converted-space">&nbsp;</span><em>compelling</em><span
        class="Apple-converted-space">&nbsp;</span>reason to do so. Similarly,
      don’t provide a “reinitialize” method that enables an object to be reused
      as if it had been constructed with a different initial state. Such methods
      generally provide little if any performance benefit at the expense of
      increased complexity.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">CountDownLatch</code><span
        class="Apple-converted-space">&nbsp;</span>class exemplifies these
      principles. It is mutable, but its state space is kept intentionally
      small. You create an instance, use it once, and it’s done: once the
      countdown latch’s count has reached zero, you may not reuse it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      final note should be added concerning the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Complex</code><span class="Apple-converted-space">&nbsp;</span>class
      in this item. This example was meant only to illustrate immutability. It
      is not an industrial-strength complex number implementation. It uses the
      standard formulas for complex multiplication and division, which are not
      correctly rounded and provide poor semantics for complex NaNs and
      infinities [<a href="ref.xhtml#rKahan91" style="text-decoration: none;">Kahan91</a>,<span
        class="Apple-converted-space">&nbsp;</span><a href="ref.xhtml#rSmith62"
        style="text-decoration: none;">Smith62</a>,<span class="Apple-converted-space">&nbsp;</span><a
        href="ref.xhtml#rThomas94" style="text-decoration: none;">Thomas94</a>].</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev18" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_87"></span><strong>Item 18: Favor composition over inheritance</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Inheritance
      is a powerful way to achieve code reuse, but it is not always the best
      tool for the job. Used inappropriately, it leads to fragile software. It
      is safe to use inheritance within a package, where the subclass and the
      superclass implementations are under the control of the same programmers.
      It is also safe to use inheritance when extending classes specifically
      designed and documented for extension (<a href="ch4.xhtml#lev19" style="text-decoration: none;">Item
        19</a>). Inheriting from ordinary concrete classes across package
      boundaries, however, is dangerous. As a reminder, this book uses the word
      “inheritance” to mean<em>implementation inheritance</em><span class="Apple-converted-space">&nbsp;</span>(when
      one class extends another). The problems discussed in this item do not
      apply to<span class="Apple-converted-space">&nbsp;</span><em>interface
        inheritance</em><span class="Apple-converted-space">&nbsp;</span>(when a
      class implements an interface or when one interface extends another).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Unlike
        method invocation, inheritance violates encapsulation</strong><span class="Apple-converted-space">&nbsp;</span>[<a
        href="ref.xhtml#rSnyder86" style="text-decoration: none;">Snyder86</a>].
      In other words, a subclass depends on the implementation details of its
      superclass for its proper function. The superclass’s implementation may
      change from release to release, and if it does, the subclass may break,
      even though its code has not been touched. As a consequence, a subclass
      must evolve in tandem with its superclass, unless the superclass’s authors
      have designed and documented it specifically for the purpose of being
      extended.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      make this concrete, let’s suppose we have a program that uses a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>. To tune
      the performance of our program, we need to query the<code style="font-family: 'Courier New', monospace;">HashSet</code><span
        class="Apple-converted-space">&nbsp;</span>as to how many elements have
      been added since it was created (not to be confused with its current size,
      which goes down when an element is removed). To provide this
      functionality, we write a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code><span class="Apple-converted-space">&nbsp;</span>variant
      that keeps count of the number of attempted element insertions and exports
      an accessor for this count. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code><span class="Apple-converted-space">&nbsp;</span>class
      contains two methods capable of adding elements,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">add</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addAll</code>,
      so we override both of these methods:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex11a" id="pch4ex11" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Broken - Inappropriate use of inheritance!</strong><br>
      public class InstrumentedHashSet&lt;E&gt; extends HashSet&lt;E&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// The number of attempted element insertions<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int addCount = 0;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public InstrumentedHashSet() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public InstrumentedHashSet(int initCap, float
      loadFactor) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(initCap,
      loadFactor);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean add(E e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCount++;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.add(e);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean addAll(Collection&lt;?
      extends E&gt; c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCount += c.size();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.addAll(c);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public int getAddCount() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return addCount;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      class looks reasonable, but it doesn’t work. Suppose we create an instance
      and add three elements using the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code><span class="Apple-converted-space">&nbsp;</span>method.
      Incidentally, note that we create a list using the static factory method<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">List.of</code>,
      which was added in Java 9; if you’re using an earlier release, use<code style="font-family: 'Courier New', monospace;">Arrays.asList</code><span
        class="Apple-converted-space">&nbsp;</span>instead:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex12a" id="pch4ex12" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">InstrumentedHashSet&lt;String&gt;
      s = new InstrumentedHashSet&lt;&gt;();<br>
      s.addAll(List.of("Snap", "Crackle", "Pop"));</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">We
      would expect the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">getAddCount</code><span
        class="Apple-converted-space">&nbsp;</span>method to return three at
      this point, but it returns six. What went wrong? Internally,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code>method is
      implemented on top of its<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">add</code><span class="Apple-converted-space">&nbsp;</span>method,
      although<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code>,
      quite reasonably, does not document this implementation detail. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code>method in<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Instrumented-HashSet</code><span
        class="Apple-converted-space">&nbsp;</span>added three to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addCount</code><span class="Apple-converted-space">&nbsp;</span>and
      then invoked<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addAll</code><span
        class="Apple-converted-space">&nbsp;</span>implementation using<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">super.addAll</code>. This
      in turn invoked the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">add</code><span class="Apple-converted-space">&nbsp;</span>method,
      as overridden in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">InstrumentedHashSet</code>,
      once for each element. Each of these three invocations added one more to<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addCount</code>,
      for a total increase of six: each element added with the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code><span class="Apple-converted-space">&nbsp;</span>method
      is double-counted.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">We
      could “fix” the subclass by eliminating its override of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code><span class="Apple-converted-space">&nbsp;</span>method.
      While the resulting class would work, it would depend for its proper
      function on the fact that<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code><span class="Apple-converted-space">&nbsp;</span>method
      is implemented on top of its<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">add</code><span class="Apple-converted-space">&nbsp;</span>method.
      This “self-use” is an implementation detail, not guaranteed to hold in all
      implementations of the Java platform and subject to change from release to
      release. Therefore, the resulting<code style="font-family: 'Courier New', monospace;">InstrumentedHashSet</code><span
        class="Apple-converted-space">&nbsp;</span>class would be fragile.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      would be slightly better to override the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">addAll</code><span class="Apple-converted-space">&nbsp;</span>method
      to iterate over the specified collection, calling the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">add</code><span class="Apple-converted-space">&nbsp;</span>method
      once for each element. This would guarantee the correct result whether or
      not<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code>’s<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addAll</code><span
        class="Apple-converted-space">&nbsp;</span>method were implemented atop
      its<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">add</code><span
        class="Apple-converted-space">&nbsp;</span>method because<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>’s<code style="font-family: 'Courier New', monospace;">addAll</code><span
        class="Apple-converted-space">&nbsp;</span>implementation would no
      longer be invoked. This technique, however, does not solve all our
      problems. It amounts to reimplementing superclass methods that may or may
      not<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_88"></span>result in self-use, which is difficult,
      time-consuming, error-prone, and may reduce performance. Additionally, it
      isn’t always possible because some methods cannot be implemented without
      access to private fields inaccessible to the subclass.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      related cause of fragility in subclasses is that their superclass can
      acquire new methods in subsequent releases. Suppose a program depends for
      its security on the fact that all elements inserted into some collection
      satisfy some predicate. This can be guaranteed by subclassing the
      collection and overriding each method capable of adding an element to
      ensure that the predicate is satisfied before adding the element. This
      works fine until a new method capable of inserting an element is added to
      the superclass in a subsequent release. Once this happens, it becomes
      possible to add an “illegal” element merely by invoking the new method,
      which is not overridden in the subclass. This is not a purely theoretical
      problem. Several security holes of this nature had to be fixed when<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Hashtable</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Vector</code><span
        class="Apple-converted-space">&nbsp;</span>were retrofitted to
      participate in the Collections Framework.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Both
      of these problems stem from overriding methods. You might think that it is
      safe to extend a class if you merely add new methods and refrain from
      overriding existing methods. While this sort of extension is much safer,
      it is not without risk. If the superclass acquires a new method in a
      subsequent release and you have the bad luck to have given the subclass a
      method with the same signature and a different return type, your subclass
      will no longer compile [JLS, 8.4.8.3]. If you’ve given the subclass a
      method with the same signature and return type as the new superclass
      method, then you’re now overriding it, so you’re subject to the problems
      described earlier. Furthermore, it is doubtful that your method will
      fulfill the contract of the new superclass method, because that contract
      had not yet been written when you wrote the subclass method.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Luckily,
      there is a way to avoid all of the problems described above. Instead of
      extending an existing class, give your new class a private field that
      references an instance of the existing class. This design is called<span class="Apple-converted-space">&nbsp;</span><em>composition</em><span
        class="Apple-converted-space">&nbsp;</span>because the existing class
      becomes a component of the new one. Each instance method in the new class
      invokes the corresponding method on the contained instance of the existing
      class and returns the results. This is known as<span class="Apple-converted-space">&nbsp;</span><em>forwarding</em>,
      and the methods in the new class are known as<span class="Apple-converted-space">&nbsp;</span><em>forwarding
        methods</em>. The resulting class will be rock solid, with no
      dependencies on the implementation details of the existing class. Even
      adding new methods to the existing class will have no impact on the new
      class. To make this concrete, here’s a replacement for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">InstrumentedHashSet</code><span
        class="Apple-converted-space">&nbsp;</span>that uses the
      composition-and-forwarding approach. Note that the implementation is
      broken into two pieces, the class itself and a reusable<span class="Apple-converted-space">&nbsp;</span><em>forwarding
        class,</em><span class="Apple-converted-space">&nbsp;</span>which
      contains all of the forwarding methods and nothing else:</p>
    <span epub:type="pagebreak" id="page_89" style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"></span><span
      style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;"></span>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex13a" id="pch4ex13" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Wrapper class - uses composition in place of inheritance</strong><br>
      public class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private int addCount = 0;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public InstrumentedSet(Set&lt;E&gt; s) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(s);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean add(E e) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCount++;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.add(e);<br>
      &nbsp;&nbsp;&nbsp;&nbsp; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp; @Override public boolean addAll(Collection&lt;?
      extends E&gt; c) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addCount += c.size();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return super.addAll(c);<br>
      &nbsp;&nbsp;&nbsp;&nbsp; }<br>
      &nbsp;&nbsp;&nbsp;&nbsp; public int getAddCount() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return addCount;<br>
      &nbsp;&nbsp;&nbsp;&nbsp; }<br>
      }<br>
      <br>
      <strong>// Reusable forwarding class</strong><br>
      public class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Set&lt;E&gt; s;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public ForwardingSet(Set&lt;E&gt; s) { this.s = s;
      }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void
      clear()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      {
s.clear();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public
      boolean contains(Object o) { return s.contains(o); }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean
      isEmpty()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      return s.isEmpty();&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public int
      size()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Iterator&lt;E&gt;
      iterator()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ return
      s.iterator();&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean add(E
      e)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return
      s.add(e);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean remove(Object o)&nbsp;&nbsp; {
      return s.remove(o);&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean containsAll(Collection&lt;?&gt; c)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.containsAll(c); }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean addAll(Collection&lt;? extends
      E&gt; c)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.addAll(c);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean removeAll(Collection&lt;?&gt; c)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.removeAll(c);&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public boolean retainAll(Collection&lt;?&gt; c)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.retainAll(c);&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Object[]
      toArray()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
      return s.toArray();&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; T[] toArray(T[]
      a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ return s.toArray(a); }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean equals(Object o)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      { return s.equals(o);&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public int
      hashCode()&nbsp;&nbsp;&nbsp;&nbsp;{ return s.hashCode(); }<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public String toString() { return
      s.toString(); }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_90"></span>The design of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>class is enabled by the
      existence of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Set</code><span
        class="Apple-converted-space">&nbsp;</span>interface, which captures the
      functionality of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">HashSet</code>class.
      Besides being robust, this design is extremely flexible. The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>class implements the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>interface
      and has a single constructor whose argument is also of type<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code>. In essence,
      the class transforms one<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>into
      another, adding the instrumentation functionality. Unlike the
      inheritance-based approach, which works only for a single concrete class
      and requires a separate constructor for each supported constructor in the
      superclass, the wrapper class can be used to instrument any<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>implementation
      and will work in conjunction with any preexisting constructor:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex14a" id="pch4ex14" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Set&lt;Instant&gt;
      times = new InstrumentedSet&lt;&gt;(new TreeSet&lt;&gt;(cmp));<br>
      Set&lt;E&gt; s = new InstrumentedSet&lt;&gt;(new
      HashSet&lt;&gt;(INIT_CAPACITY));</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>class can even be used to
      temporarily instrument a set instance that has already been used without
      instrumentation:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex15a" id="pch4ex15" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">static
      void walk(Set&lt;Dog&gt; dogs) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;InstrumentedSet&lt;Dog&gt; iDogs = new
      InstrumentedSet&lt;&gt;(dogs);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Within this method use iDogs instead of
      dogs<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>class is known as a<span class="Apple-converted-space">&nbsp;</span><em>wrapper</em><span
        class="Apple-converted-space">&nbsp;</span>class because each<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>instance contains (“wraps”)
      another<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Set</code><span
        class="Apple-converted-space">&nbsp;</span>instance. This is also known
      as the<span class="Apple-converted-space">&nbsp;</span><em>Decorator</em><span
        class="Apple-converted-space">&nbsp;</span>pattern [<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>] because the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">InstrumentedSet</code><span
        class="Apple-converted-space">&nbsp;</span>class “decorates” a set by
      adding instrumentation. Sometimes the combination of composition and
      forwarding is loosely referred to as<span class="Apple-converted-space">&nbsp;</span><em>delegation.</em><span
        class="Apple-converted-space">&nbsp;</span>Technically it’s not
      delegation unless the wrapper object passes itself to the wrapped object
      [Lieberman86; Gamma95].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      disadvantages of wrapper classes are few. One caveat is that wrapper
      classes are not suited for use in<span class="Apple-converted-space">&nbsp;</span><em>callback
        frameworks</em>, wherein objects pass self-references to other objects
      for subsequent invocations (“callbacks”). Because a wrapped object doesn’t
      know of its wrapper, it passes a reference to itself (<code style="font-family: 'Courier New', monospace;">this</code>)
      and callbacks elude the wrapper. This is known as the<span class="Apple-converted-space">&nbsp;</span><em>SELF
        problem</em><span class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rLieberman86"
        style="text-decoration: none;">Lieberman86</a>]. Some people worry about
      the performance impact of forwarding method invocations or the memory
      footprint impact of wrapper objects. Neither turn out to have much impact
      in practice. It’s tedious to write forwarding methods, but you have to
      write the reusable forwarding class for each interface only once, and
      forwarding classes may be provided for you. For example, Guava provides
      forwarding classes for all of the collection interfaces [<a href="ref.xhtml#rGuava"
        style="text-decoration: none;">Guava</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_91"></span>Inheritance is appropriate
      only in circumstances where the subclass really is a<span class="Apple-converted-space">&nbsp;</span><em>subtype</em><span
        class="Apple-converted-space">&nbsp;</span>of the superclass. In other
      words, a class<span class="Apple-converted-space">&nbsp;</span><em>B</em><span
        class="Apple-converted-space">&nbsp;</span>should extend a class<span class="Apple-converted-space">&nbsp;</span><em>A</em><span
        class="Apple-converted-space">&nbsp;</span>only if an “is-a”
      relationship exists between the two classes. If you are tempted to have a
      class<span class="Apple-converted-space">&nbsp;</span><em>B</em><span class="Apple-converted-space">&nbsp;</span>extend
      a class<span class="Apple-converted-space">&nbsp;</span><em>A</em>, ask
      yourself the question: Is every<span class="Apple-converted-space">&nbsp;</span><em>B</em><span
        class="Apple-converted-space">&nbsp;</span>really an<span class="Apple-converted-space">&nbsp;</span><em>A</em>?
      If you cannot truthfully answer yes to this question,<span class="Apple-converted-space">&nbsp;</span><em>B</em><span
        class="Apple-converted-space">&nbsp;</span>should not extend<span class="Apple-converted-space">&nbsp;</span><em>A</em>.
      If the answer is no, it is often the case that<span class="Apple-converted-space">&nbsp;</span><em>B</em><span
        class="Apple-converted-space">&nbsp;</span>should contain a private
      instance of<span class="Apple-converted-space">&nbsp;</span><em>A</em><span
        class="Apple-converted-space">&nbsp;</span>and expose a different API:<span
        class="Apple-converted-space">&nbsp;</span><em>A</em><span class="Apple-converted-space">&nbsp;</span>is
      not an essential part of<span class="Apple-converted-space">&nbsp;</span><em>B</em>,
      merely a detail of its implementation.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are a number of obvious violations of this principle in the Java platform
      libraries. For example, a stack is not a vector, so<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Stack</code><span class="Apple-converted-space">&nbsp;</span>should
      not extend<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Vector</code>.
      Similarly, a property list is not a hash table, so<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Properties</code><span class="Apple-converted-space">&nbsp;</span>should
      not extend<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Hashtable</code>.
      In both cases, composition would have been preferable.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you use inheritance where composition is appropriate, you needlessly
      expose implementation details. The resulting API ties you to the original
      implementation, forever limiting the performance of your class. More
      seriously, by exposing the internals you let clients access them directly.
      At the very least, it can lead to confusing semantics. For example, if<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">p</code><span
        class="Apple-converted-space">&nbsp;</span>refers to a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Properties</code><span class="Apple-converted-space">&nbsp;</span>instance,
      then<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">p.getProperty(key)</code><span
        class="Apple-converted-space">&nbsp;</span>may yield different results
      from<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">p.get(key)</code>:
      the former method takes defaults into account, while the latter method,
      which is inherited from<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Hashtable</code>, does
      not. Most seriously, the client may be able to corrupt invariants of the
      subclass by modifying the superclass directly. In the case of<code style="font-family: 'Courier New', monospace;">Properties</code>,
      the designers intended that only strings be allowed as keys and values,
      but direct access to the underlying<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Hashtable</code><span class="Apple-converted-space">&nbsp;</span>allows
      this invariant to be violated. Once violated, it is no longer possible to
      use other parts of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Properties</code><span class="Apple-converted-space">&nbsp;</span>API
      (<code style="font-family: 'Courier New', monospace;">load</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">store</code>).
      By the time this problem was discovered, it was too late to correct it
      because clients depended on the use of non-string keys and values.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      is one last set of questions you should ask yourself before deciding to
      use inheritance in place of composition. Does the class that you
      contemplate extending have any flaws in its API? If so, are you
      comfortable propagating those flaws into your class’s API? Inheritance
      propagates any flaws in the superclass’s API, while composition lets you
      design a new API that hides these flaws.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      summarize, inheritance is powerful, but it is problematic because it
      violates encapsulation. It is appropriate only when a genuine subtype
      relationship exists between the subclass and the superclass. Even then,
      inheritance may lead to fragility if the subclass is in a different
      package from the superclass and the superclass is not designed for
      inheritance. To avoid this fragility, use composition and forwarding
      instead of inheritance, especially if an appropriate interface to
      implement a wrapper class exists. Not only are wrapper classes more robust
      than subclasses, they are also more powerful.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev19" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_92"></span><strong>Item 19: Design and document for inheritance
        or else prohibit it</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Item
      18 alerted you to the dangers of subclassing a “foreign” class that was
      not designed and documented for inheritance. So what does it mean for a
      class to be designed and documented for inheritance?</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">First,
      the class must document precisely the effects of overriding any method. In
      other words,<span class="Apple-converted-space">&nbsp;</span><strong>the
        class must document its</strong><span class="Apple-converted-space">&nbsp;</span><em><strong>self-use</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>of overridable
        methods.</strong><span class="Apple-converted-space">&nbsp;</span>For
      each public or protected method, the documentation must indicate which
      overridable methods the method invokes, in what sequence, and how the
      results of each invocation affect subsequent processing. (By<span class="Apple-converted-space">&nbsp;</span><em>overridable</em>,
      we mean nonfinal and either public or protected.) More generally, a class
      must document any circumstances under which it might invoke an overridable
      method. For example, invocations might come from background threads or
      static initializers.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      method that invokes overridable methods contains a description of these
      invocations at the end of its documentation comment. The description is in
      a special section of the specification, labeled “Implementation
      Requirements,” which is generated by the Javadoc tag<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">@implSpec</code>. This
      section describes the inner workings of the method. Here’s an example,
      copied from the specification for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">java.util.AbstractCollection</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex16a" id="pch4ex16" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="codep" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 22.666668px; page-break-after: avoid; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      boolean remove(Object o)</p>
    <p class="bqa" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 37.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Removes
      a single instance of the specified element from this collection, if it is
      present (optional operation). More formally, removes an element<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">e</code><span class="Apple-converted-space">&nbsp;</span>such
      that<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Objects.equals(o,
        e)</code>, if this collection contains one or more such elements.
      Returns<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code><span
        class="Apple-converted-space">&nbsp;</span>if this collection contained
      the specified element (or equivalently, if this collection changed as a
      result of the call).</p>
    <p class="bqa" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 37.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Implementation
        Requirements:</strong><span class="Apple-converted-space">&nbsp;</span>This
      implementation iterates over the collection looking for the specified
      element. If it finds the element, it removes the element from the
      collection using the iterator’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">remove</code><span class="Apple-converted-space">&nbsp;</span>method.
      Note that this implementation throws an<code style="font-family: 'Courier New', monospace;">UnsupportedOperationException</code><span
        class="Apple-converted-space">&nbsp;</span>if the iterator returned by
      this collection’s<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">iterator</code><span
        class="Apple-converted-space">&nbsp;</span>method does not implement the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">remove</code><span
        class="Apple-converted-space">&nbsp;</span>method and this collection
      contains the specified object.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      documentation leaves no doubt that overriding the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">iterator</code><span class="Apple-converted-space">&nbsp;</span>method
      will affect the behavior of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">remove</code><span class="Apple-converted-space">&nbsp;</span>method.
      It also describes exactly how the behavior of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Iterator</code><span class="Apple-converted-space">&nbsp;</span>returned
      by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">iterator</code><span
        class="Apple-converted-space">&nbsp;</span>method will affect the
      behavior of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">remove</code><span
        class="Apple-converted-space">&nbsp;</span>method. Contrast this to the
      situation in<span class="Apple-converted-space">&nbsp;</span><a href="ch4.xhtml#lev18"
        style="text-decoration: none;">Item 18</a>, where the programmer
      subclassing<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">HashSet</code><span
        class="Apple-converted-space">&nbsp;</span>simply could not say whether
      overriding the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">add</code><span
        class="Apple-converted-space">&nbsp;</span>method would affect the
      behavior of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">addAll</code><span
        class="Apple-converted-space">&nbsp;</span>method.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_93"></span>But doesn’t this violate the
      dictum that good API documentation should describe<span class="Apple-converted-space">&nbsp;</span><em>what</em><span
        class="Apple-converted-space">&nbsp;</span>a given method does and not<span
        class="Apple-converted-space">&nbsp;</span><em>how</em><span class="Apple-converted-space">&nbsp;</span>it
      does it? Yes, it does! This is an unfortunate consequence of the fact that
      inheritance violates encapsulation. To document a class so that it can be
      safely subclassed, you must describe implementation details that should
      otherwise be left unspecified.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">@implSpec</code><span
        class="Apple-converted-space">&nbsp;</span>tag was added in Java 8 and
      used heavily in Java 9. This tag should be enabled by default, but as of
      Java 9, the Javadoc utility still ignores it unless you pass the command
      line switch<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">-tag
        "apiNote:a:API Note:"</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Designing
      for inheritance involves more than just documenting patterns of self-use.
      To allow programmers to write efficient subclasses without undue pain,<span
        class="Apple-converted-space">&nbsp;</span><strong>a class may have to
        provide hooks into its internal workings in the form of judiciously
        chosen protected methods</strong><span class="Apple-converted-space">&nbsp;</span>or,
      in rare instances, protected fields. For example, consider the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeRange</code><span class="Apple-converted-space">&nbsp;</span>method
      from<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.util.AbstractList</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex17a" id="pch4ex17" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">protected
      void removeRange(int fromIndex, int toIndex)</p>
    <p class="bq" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 19.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Removes
      from this list all of the elements whose index is between<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">fromIndex</code>,
      inclusive, and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toIndex</code>,
      exclusive. Shifts any succeeding elements to the left (reduces their
      index). This call shortens the list by<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">(toIndex - fromIndex)</code><span
        class="Apple-converted-space">&nbsp;</span>elements. (If<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toIndex == fromIndex</code>,
      this operation has no effect.)</p>
    <p class="bq" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 19.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      method is called by the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clear</code><span class="Apple-converted-space">&nbsp;</span>operation
      on this list and its sublists. Overriding this method to take advantage of
      the internals of the list implementation can substantially improve the
      performance of the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clear</code><span
        class="Apple-converted-space">&nbsp;</span>operation on this list and
      its sublists.</p>
    <p class="bq" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 19.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Implementation
        Requirements:</strong><span class="Apple-converted-space">&nbsp;</span>This
      implementation gets a list iterator positioned before<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">fromIndex</code><span class="Apple-converted-space">&nbsp;</span>and
      repeatedly calls<code style="font-family: 'Courier New', monospace;">ListIterator.next</code><span
        class="Apple-converted-space">&nbsp;</span>followed by<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">ListIterator.remove</code>,
      until the entire range has been removed.<span class="Apple-converted-space">&nbsp;</span><strong>Note:
        If</strong><span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>ListIterator.remove</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>requires linear time,
        this implementation requires quadratic time.</strong></p>
    <p class="bq" style="font-size: medium; margin-top: 7.5px; margin-bottom: 7.5px; margin-left: 19.5px; text-indent: 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Parameters:</p>
    <p class="prem" style="font-size: 0.88em; margin-top: 6.666667px; margin-bottom: 26.666668px; margin-left: 41.333336px; text-align: justify; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><code
        style="font-family: 'Courier New', monospace;">fromIndex</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index
      of first element to be removed.<br>
      <code style="font-family: 'Courier New', monospace;">toIndex</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index
      after last element to be removed.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      method is of no interest to end users of a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">List</code><span class="Apple-converted-space">&nbsp;</span>implementation.
      It is provided solely to make it easy for subclasses to provide a fast<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clear</code>method
      on sublists. In the absence of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeRange</code><span class="Apple-converted-space">&nbsp;</span>method,
      subclasses would have to make do with quadratic performance when the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">clear</code>method
      was invoked on sublists or rewrite the entire<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">subList</code><span class="Apple-converted-space">&nbsp;</span>mechanism
      from scratch—not an easy task!</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_94"></span>So how do you decide what
      protected members to expose when you design a class for inheritance?
      Unfortunately, there is no magic bullet. The best you can do is to think
      hard, take your best guess, and then test it by writing subclasses. You
      should expose as few protected members as possible because each one
      represents a commitment to an implementation detail. On the other hand,
      you must not expose too few because a missing protected member can render
      a class practically unusable for inheritance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The</strong><span
        class="Apple-converted-space">&nbsp;</span><em><strong>only</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>way to test a class
        designed for inheritance is to write subclasses.</strong><span class="Apple-converted-space">&nbsp;</span>If
      you omit a crucial protected member, trying to write a subclass will make
      the omission painfully obvious. Conversely, if several subclasses are
      written and none uses a protected member, you should probably make it
      private. Experience shows that three subclasses are usually sufficient to
      test an extendable class. One or more of these subclasses should be
      written by someone other than the superclass author.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      you design for inheritance a class that is likely to achieve wide use,
      realize that you are committing<span class="Apple-converted-space">&nbsp;</span><em>forever</em><span
        class="Apple-converted-space">&nbsp;</span>to the self-use patterns that
      you document and to the implementation decisions implicit in its protected
      methods and fields. These commitments can make it difficult or impossible
      to improve the performance or functionality of the class in a subsequent
      release. Therefore,<span class="Apple-converted-space">&nbsp;</span><strong>you
        must test your class by writing subclasses</strong><span class="Apple-converted-space">&nbsp;</span><em><strong>before</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>you release it.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Also,
      note that the special documentation required for inheritance clutters up
      normal documentation, which is designed for programmers who create
      instances of your class and invoke methods on them. As of this writing,
      there is little in the way of tools to separate ordinary API documentation
      from information of interest only to programmers implementing subclasses.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are a few more restrictions that a class must obey to allow inheritance.<span
        class="Apple-converted-space">&nbsp;</span><strong>Constructors must not
        invoke overridable methods,</strong>directly or indirectly. If you
      violate this rule, program failure will result. The superclass constructor
      runs before the subclass constructor, so the overriding method in the
      subclass will get invoked before the subclass constructor has run. If the
      overriding method depends on any initialization performed by the subclass
      constructor, the method will not behave as expected. To make this
      concrete, here’s a class that violates this rule:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex18a" id="pch4ex18" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Super {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>// Broken - constructor invokes an
        overridable method</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;public Super() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overrideMe();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public void overrideMe() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_95"></span>Here’s a subclass that
      overrides the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">overrideMe</code><span
        class="Apple-converted-space">&nbsp;</span>method, which is erroneously
      invoked by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Super</code>’s
      sole constructor:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex19a" id="pch4ex19" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      final class Sub extends Super {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Blank final, set by constructor<br>
      &nbsp;&nbsp;&nbsp;&nbsp;private final Instant instant;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;Sub() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instant = Instant.now();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>// Overriding method invoked by superclass
        constructor</strong><br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public void overrideMe() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(instant);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sub sub = new Sub();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub.overrideMe();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      might expect this program to print out the instant twice, but it prints
      out<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">null</code><span
        class="Apple-converted-space">&nbsp;</span>the first time because<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">overrideMe</code><span class="Apple-converted-space">&nbsp;</span>is
      invoked by the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Super</code>constructor
      before the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Sub</code><span
        class="Apple-converted-space">&nbsp;</span>constructor has a chance to
      initialize the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">instant</code><span
        class="Apple-converted-space">&nbsp;</span>field. Note that this program
      observes a final field in two different states! Note also that if<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">overrideMe</code><span class="Apple-converted-space">&nbsp;</span>had
      invoked any method on<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">instant</code>, it would
      have thrown a<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">NullPointerException</code><span
        class="Apple-converted-space">&nbsp;</span>when the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Super</code>constructor
      invoked<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">overrideMe</code>.
      The only reason this program doesn’t throw a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">NullPointerException</code><span
        class="Apple-converted-space">&nbsp;</span>as it stands is that the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">println</code><span
        class="Apple-converted-space">&nbsp;</span>method tolerates null
      parameters.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that it<span class="Apple-converted-space">&nbsp;</span><em>is</em><span class="Apple-converted-space">&nbsp;</span>safe
      to invoke private methods, final methods, and static methods, none of
      which are overridable, from a constructor.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Cloneable</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>interfaces present special
      difficulties when designing for inheritance. It is generally not a good
      idea for a class designed for inheritance to implement either of these
      interfaces because they place a substantial burden on programmers who
      extend the class. There are, however, special actions that you can take to
      allow subclasses to implement these interfaces without mandating that they
      do so. These actions are described in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch3.xhtml#lev13" style="text-decoration: none;">Item 13</a><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><a href="ch12.xhtml#lev86" style="text-decoration: none;">Item
        86</a>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you do decide to implement either<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Cloneable</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>in a class that is designed
      for inheritance, you should be aware that because the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readObject</code><span
        class="Apple-converted-space">&nbsp;</span>methods behave a lot like
      constructors, a similar restriction applies:<span class="Apple-converted-space">&nbsp;</span><strong>neither</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>clone</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>nor</strong><span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;"><strong>readObject</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>may invoke an
        overridable method, directly or indirectly.</strong><span class="Apple-converted-space">&nbsp;</span>In
      the case of<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readObject</code>,
      the overriding method will run before the<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_96"></span>subclass’s state has been
      deserialized. In the case of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code>, the
      overriding method will run before the subclass’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code><span class="Apple-converted-space">&nbsp;</span>method
      has a chance to fix the clone’s state. In either case, a program failure
      is likely to follow. In the case of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">clone</code>, the failure
      can damage the original object as well as the clone. This can happen, for
      example, if the overriding method assumes it is modifying the clone’s copy
      of the object’s deep structure, but the copy hasn’t been made yet.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Finally,
      if you decide to implement<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Serializable</code><span
        class="Apple-converted-space">&nbsp;</span>in a class designed for
      inheritance and the class has a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">readResolve</code><span class="Apple-converted-space">&nbsp;</span>or<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">writeReplace</code>method,
      you must make the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">readResolve</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">writeReplace</code><span
        class="Apple-converted-space">&nbsp;</span>method protected rather than
      private. If these methods are private, they will be silently ignored by
      subclasses. This is one more case where an implementation detail becomes
      part of a class’s API to permit inheritance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">By
      now it should be apparent that<span class="Apple-converted-space">&nbsp;</span><strong>designing
        a class for inheritance requires great effort and places substantial
        limitations on the class.</strong><span class="Apple-converted-space">&nbsp;</span>This
      is not a decision to be undertaken lightly. There are some situations
      where it is clearly the right thing to do, such as abstract classes,
      including<span class="Apple-converted-space">&nbsp;</span><em>skeletal
        implementations</em><span class="Apple-converted-space">&nbsp;</span>of
      interfaces (<a href="ch4.xhtml#lev20" style="text-decoration: none;">Item
        20</a>). There are other situations where it is clearly the wrong thing
      to do, such as immutable classes (<a href="ch4.xhtml#lev17" style="text-decoration: none;">Item
        17</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">But
      what about ordinary concrete classes? Traditionally, they are neither
      final nor designed and documented for subclassing, but this state of
      affairs is dangerous. Each time a change is made in such a class, there is
      a chance that subclasses extending the class will break. This is not just
      a theoretical problem. It is not uncommon to receive subclassing-related
      bug reports after modifying the internals of a nonfinal concrete class
      that was not designed and documented for inheritance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        best solution to this problem is to prohibit subclassing in classes that
        are not designed and documented to be safely subclassed.</strong><span class="Apple-converted-space">&nbsp;</span>There
      are two ways to prohibit subclassing. The easier of the two is to declare
      the class final. The alternative is to make all the constructors private
      or package-private and to add public static factories in place of the
      constructors. This alternative, which provides the flexibility to use
      subclasses internally, is discussed in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch4.xhtml#lev17" style="text-decoration: none;">Item 17</a>.
      Either approach is acceptable.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      advice may be somewhat controversial because many programmers have grown
      accustomed to subclassing ordinary concrete classes to add facilities such
      as instrumentation, notification, and synchronization or to limit
      functionality. If a class implements some interface that captures its
      essence, such as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Set</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">List</code>,
      or<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code>,
      then you should feel no compunction about prohibiting subclassing. The<span
        class="Apple-converted-space">&nbsp;</span><em>wrapper class</em><span class="Apple-converted-space">&nbsp;</span>pattern,
      described in<a href="ch4.xhtml#lev18" style="text-decoration: none;">Item
        18</a>, provides a superior alternative to inheritance for augmenting
      the functionality.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_97"></span>If a concrete class does not
      implement a standard interface, then you may inconvenience some
      programmers by prohibiting inheritance. If you feel that you must allow
      inheritance from such a class, one reasonable approach is to ensure that
      the class never invokes any of its overridable methods and to document
      this fact. In other words, eliminate the class’s self-use of overridable
      methods entirely. In doing so, you’ll create a class that is reasonably
      safe to subclass. Overriding a method will never affect the behavior of
      any other method.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      can eliminate a class’s self-use of overridable methods mechanically,
      without changing its behavior. Move the body of each overridable method to
      a private “helper method” and have each overridable method invoke its
      private helper method. Then replace each self-use of an overridable method
      with a direct invocation of the overridable method’s private helper
      method.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, designing a class for inheritance is hard work. You must document
      all of its self-use patterns, and once you’ve documented them, you must
      commit to them for the life of the class. If you fail to do this,
      subclasses may become dependent on implementation details of the
      superclass and may break if the implementation of the superclass changes.
      To allow others to write<span class="Apple-converted-space">&nbsp;</span><em>efficient</em><span
        class="Apple-converted-space">&nbsp;</span>subclasses, you may also have
      to export one or more protected methods. Unless you know there is a real
      need for subclasses, you are probably better off prohibiting inheritance
      by declaring your class final or ensuring that there are no accessible
      constructors.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev20" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_98"></span><strong>Item 20: Prefer interfaces to abstract
        classes</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Java
      has two mechanisms to define a type that permits multiple implementations:
      interfaces and abstract classes. Since the introduction of<span class="Apple-converted-space">&nbsp;</span><em>default
        methods</em><span class="Apple-converted-space">&nbsp;</span>for
      interfaces in Java 8 [<a href="ref.xhtml#rJLS" style="text-decoration: none;">JLS
        9.4.3</a>], both mechanisms allow you to provide implementations for
      some instance methods. A major difference is that to implement the type
      defined by an abstract class, a class must be a subclass of the abstract
      class. Because Java permits only single inheritance, this restriction on
      abstract classes severely constrains their use as type definitions. Any
      class that defines all the required methods and obeys the general contract
      is permitted to implement an interface, regardless of where the class
      resides in the class hierarchy.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Existing
        classes can easily be retrofitted to implement a new interface.</strong><span
        class="Apple-converted-space">&nbsp;</span>All you have to do is to add
      the required methods, if they don’t yet exist, and to add an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">implements</code><span class="Apple-converted-space">&nbsp;</span>clause
      to the class declaration. For example, many existing classes were
      retrofitted to implement the<code style="font-family: 'Courier New', monospace;">Comparable</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Iterable</code>,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Autocloseable</code><span
        class="Apple-converted-space">&nbsp;</span>interfaces when they were
      added to the platform. Existing classes cannot, in general, be retrofitted
      to extend a new abstract class. If you want to have two classes extend the
      same abstract class, you have to place it high up in the type hierarchy
      where it is an ancestor of both classes. Unfortunately, this can cause
      great collateral damage to the type hierarchy, forcing all descendants of
      the new abstract class to subclass it, whether or not it is appropriate.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Interfaces
        are ideal for defining mixins.</strong><span class="Apple-converted-space">&nbsp;</span>Loosely
      speaking, a<span class="Apple-converted-space">&nbsp;</span><em>mixin</em><span
        class="Apple-converted-space">&nbsp;</span>is a type that a class can
      implement in addition to its “primary type,” to declare that it provides
      some optional behavior. For example,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Comparable</code><span class="Apple-converted-space">&nbsp;</span>is
      a mixin interface that allows a class to declare that its instances are
      ordered with respect to other mutually comparable objects. Such an
      interface is called a mixin because it allows the optional functionality
      to be “mixed in” to the type’s primary functionality. Abstract classes
      can’t be used to define mixins for the same reason that they can’t be
      retrofitted onto existing classes: a class cannot have more than one
      parent, and there is no reasonable place in the class hierarchy to insert
      a mixin.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Interfaces
        allow for the construction of nonhierarchical type frameworks.</strong><span
        class="Apple-converted-space">&nbsp;</span>Type hierarchies are great
      for organizing some things, but other things don’t fall neatly into a
      rigid hierarchy. For example, suppose we have an interface representing a
      singer and another representing a songwriter:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex20a" id="pch4ex20" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      interface Singer {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;AudioClip sing(Song s);<br>
      }<br>
      <span epub:type="pagebreak" id="page_99"></span>public interface
      Songwriter {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Song compose(int chartPosition);<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      real life, some singers are also songwriters. Because we used interfaces
      rather than abstract classes to define these types, it is perfectly
      permissible for a single class to implement both<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Singer</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Songwriter</code>.
      In fact, we can define a third interface that extends both<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Singer</code><span class="Apple-converted-space">&nbsp;</span>and<code
        style="font-family: 'Courier New', monospace;">Songwriter</code><span class="Apple-converted-space">&nbsp;</span>and
      adds new methods that are appropriate to the combination:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex21a" id="pch4ex21" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      interface SingerSongwriter extends Singer, Songwriter {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;AudioClip strum();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;void actSensitive();<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      don’t always need this level of flexibility, but when you do, interfaces
      are a lifesaver. The alternative is a bloated class hierarchy containing a
      separate class for every supported combination of attributes. If there are<span
        class="Apple-converted-space">&nbsp;</span><em>n</em><span class="Apple-converted-space">&nbsp;</span>attributes
      in the type system, there are 2<em><sup>n</sup></em><span class="Apple-converted-space">&nbsp;</span>possible
      combinations that you might have to support. This is what’s known as a<span
        class="Apple-converted-space">&nbsp;</span><em>combinatorial explosion</em>.
      Bloated class hierarchies can lead to bloated classes with many methods
      that differ only in the type of their arguments because there are no types
      in the class hierarchy to capture common behaviors.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>Interfaces
        enable safe, powerful functionality enhancements</strong><span class="Apple-converted-space">&nbsp;</span>via
      the<span class="Apple-converted-space">&nbsp;</span><em>wrapper class</em><span
        class="Apple-converted-space">&nbsp;</span>idiom (<a href="ch4.xhtml#lev18"
        style="text-decoration: none;">Item 18</a>). If you use abstract classes
      to define types, you leave the programmer who wants to add functionality
      with no alternative but inheritance. The resulting classes are less
      powerful and more fragile than wrapper classes.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      there is an obvious implementation of an interface method in terms of
      other interface methods, consider providing implementation assistance to
      programmers in the form of a default method. For an example of this
      technique, see the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">removeIf</code><span
        class="Apple-converted-space">&nbsp;</span>method on page 104. If you
      provide default methods, be sure to document them for inheritance using
      the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">@implSpec</code><span
        class="Apple-converted-space">&nbsp;</span>Javadoc tag (<a href="ch4.xhtml#lev19"
        style="text-decoration: none;">Item 19</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are limits on how much implementation assistance you can provide with
      default methods. Although many interfaces specify the behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>methods
      such as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>, you are
      not permitted to provide default methods for them. Also, interfaces are
      not permitted to contain instance fields or nonpublic static members (with
      the exception of private static methods). Finally, you can’t add default
      methods to an interface that you don’t control.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">You
      can, however, combine the advantages of interfaces and abstract classes by
      providing an abstract<span class="Apple-converted-space">&nbsp;</span><em>skeletal
        implementation class</em><span class="Apple-converted-space">&nbsp;</span>to
      go with an interface. The interface defines the type, perhaps providing
      some default methods, while the skeletal implementation class implements
      the remaining non-primitive interface<span class="Apple-converted-space">&nbsp;</span><span
        epub:type="pagebreak" id="page_100"></span>methods atop the primitive
      interface methods. Extending a skeletal implementation takes most of the
      work out of implementing an interface. This is the<span class="Apple-converted-space">&nbsp;</span><em>Template
        Method</em><span class="Apple-converted-space">&nbsp;</span>pattern [<a
        href="ref.xhtml#rGamma95" style="text-decoration: none;">Gamma95</a>].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">By
      convention, skeletal implementation classes are called<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Abstract</code><em>Interface</em>,
      where<span class="Apple-converted-space">&nbsp;</span><em>Interface</em><span
        class="Apple-converted-space">&nbsp;</span>is the name of the interface
      they implement. For example, the Collections Framework provides a skeletal
      implementation to go along with each main collection interface:<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">AbstractCollection</code>,<code
        style="font-family: 'Courier New', monospace;">AbstractSet</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AbstractList</code>,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AbstractMap</code>.
      Arguably it would have made sense to call them<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">SkeletalCollection</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">SkeletalSet</code>,<code
        style="font-family: 'Courier New', monospace;">SkeletalList</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">SkeletalMap</code>,
      but the<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Abstract</code><span
        class="Apple-converted-space">&nbsp;</span>convention is now firmly
      established. When properly designed, skeletal implementations (whether a
      separate abstract class, or consisting solely of default methods on an
      interface) can make it<span class="Apple-converted-space">&nbsp;</span><em>very</em><span
        class="Apple-converted-space">&nbsp;</span>easy for programmers to
      provide their own implementations of an interface. For example, here’s a
      static factory method containing a complete, fully functional<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">List</code>implementation
      atop<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AbstractList</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex22a" id="pch4ex22" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Concrete implementation built atop skeletal implementation</strong><br>
      static List&lt;Integer&gt; intArrayAsList(int[] a) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(a);<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// The diamond operator is only legal here in Java
      9 and later<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// If you're using an earlier release, specify
      &lt;Integer&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return new AbstractList<strong>&lt;&gt;</strong>()
      {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public Integer
      get(int i) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      a[i];&nbsp;&nbsp;// Autoboxing (<a href="ch2.xhtml#lev6" style="text-decoration: none;">Item
        6</a>)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public Integer
      set(int i, Integer val) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
      oldVal = a[i];<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]
      = val;&nbsp;&nbsp;&nbsp;&nbsp; // Auto-unboxing<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      oldVal;&nbsp;&nbsp;// Autoboxing<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override public int
      size() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      a.length;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;};<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      you consider all that a<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">List</code><span class="Apple-converted-space">&nbsp;</span>implementation
      does for you, this example is an impressive demonstration of the power of
      skeletal implementations. Incidentally, this example is an<span class="Apple-converted-space">&nbsp;</span><em>Adapter</em><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>] that allows an<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>array
      to be viewed as a list of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Integer</code><span class="Apple-converted-space">&nbsp;</span>instances.
      Because of all the translation back and forth between<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">int</code><span class="Apple-converted-space">&nbsp;</span>values
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Integer</code><span
        class="Apple-converted-space">&nbsp;</span>instances (boxing and
      unboxing), its performance is not terribly good. Note that the
      implementation takes the form of an<span class="Apple-converted-space">&nbsp;</span><em>anonymous
        class</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch4.xhtml#lev24"
        style="text-decoration: none;">Item 24</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_101"></span>The beauty of skeletal
      implementation classes is that they provide all of the implementation
      assistance of abstract classes without imposing the severe constraints
      that abstract classes impose when they serve as type definitions. For most
      implementors of an interface with a skeletal implementation class,
      extending this class is the obvious choice, but it is strictly optional.
      If a class cannot be made to extend the skeletal implementation, the class
      can always implement the interface directly. The class still benefits from
      any default methods present on the interface itself. Furthermore, the
      skeletal implementation can still aid the implementor’s task. The class
      implementing the interface can forward invocations of interface methods to
      a contained instance of a private inner class that extends the skeletal
      implementation. This technique, known as<span class="Apple-converted-space">&nbsp;</span><em>simulated
        multiple inheritance</em>, is closely related to the wrapper class idiom
      discussed in<span class="Apple-converted-space">&nbsp;</span><a href="ch4.xhtml#lev18"
        style="text-decoration: none;">Item 18</a>. It provides many of the
      benefits of multiple inheritance, while avoiding the pitfalls.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Writing
      a skeletal implementation is a relatively simple, if somewhat tedious,
      process. First, study the interface and decide which methods are the
      primitives in terms of which the others can be implemented. These
      primitives will be the abstract methods in your skeletal implementation.
      Next, provide default methods in the interface for all of the methods that
      can be implemented directly atop the primitives, but recall that you may
      not provide default methods for<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>methods
      such as<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">equals</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>. If the
      primitives and default methods cover the interface, you’re done, and have
      no need for a skeletal implementation class. Otherwise, write a class
      declared to implement the interface, with implementations of all of the
      remaining interface methods. The class may contain any nonpublic fields
      ands methods appropriate to the task.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      a simple example, consider the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map.Entry</code><span class="Apple-converted-space">&nbsp;</span>interface.
      The obvious primitives are<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">getKey</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">getValue</code>, and
      (optionally)<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">setValue</code>.
      The interface specifies the behavior of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">hashCode</code>,
      and there is an obvious implementation of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">toString</code><span class="Apple-converted-space">&nbsp;</span>in
      terms of the primitives. Since you are not allowed to provide default
      implementations for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Object</code><span class="Apple-converted-space">&nbsp;</span>methods,
      all implementations are placed in the skeletal implementation class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex23a" id="pch4ex23" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Skeletal implementation class</strong><br>
      public abstract class AbstractMapEntry&lt;K,V&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;implements
      Map.Entry&lt;K,V&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Entries in a modifiable map must override this
      method<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public V setValue(V value) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new
      UnsupportedOperationException();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <span epub:type="pagebreak" id="page_102"></span>&nbsp;&nbsp;&nbsp;&nbsp;//
      Implements the general contract of Map.Entry.equals<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public boolean equals(Object o) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (o == this)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      true;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(o instanceof
      Map.Entry))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&lt;?,?&gt; e =
      (Map.Entry) o;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      Objects.equals(e.getKey(),&nbsp;&nbsp;getKey())<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;
      Objects.equals(e.getValue(), getValue());<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Implements the general contract of
      Map.Entry.hashCode<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public int hashCode() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      Objects.hashCode(getKey())<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^
      Objects.hashCode(getValue());<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public String toString() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return getKey() + "=" +
      getValue();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that this skeletal implementation could not be implemented in the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map.Entry</code><span class="Apple-converted-space">&nbsp;</span>interface
      or as a subinterface because default methods are not permitted to override<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Object</code><span
        class="Apple-converted-space">&nbsp;</span>methods such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">equals</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">hashCode</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">toString</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Because
      skeletal implementations are designed for inheritance, you should follow
      all of the design and documentation guidelines in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch4.xhtml#lev19" style="text-decoration: none;">Item 19</a>. For
      brevity’s sake, the documentation comments were omitted from the previous
      example, but<span class="Apple-converted-space">&nbsp;</span><strong>good
        documentation is absolutely essential in a skeletal implementation,</strong><span
        class="Apple-converted-space">&nbsp;</span>whether it consists of
      default methods on an interface or a separate abstract class.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      minor variant on the skeletal implementation is the<span class="Apple-converted-space">&nbsp;</span><em>simple
        implementation,</em><span class="Apple-converted-space">&nbsp;</span>exemplified
      by<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">AbstractMap.SimpleEntry</code>.
      A simple implementation is like a skeletal implementation in that it
      implements an interface and is designed for inheritance, but it differs in
      that it isn’t abstract: it is the simplest possible working
      implementation. You can use it as it stands or subclass it as
      circumstances warrant.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      summarize, an interface is generally the best way to define a type that
      permits multiple implementations. If you export a nontrivial interface,
      you should strongly consider providing a skeletal implementation to go
      with it. To the extent possible, you should provide the skeletal
      implementation via default methods on the interface so that all
      implementors of the interface can make use of it. That said, restrictions
      on interfaces typically mandate that a skeletal implementation take the
      form of an abstract class.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev21" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_103"></span><strong>Item 21: Design interfaces for posterity</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Prior
      to Java 8, it was impossible to add methods to interfaces without breaking
      existing implementations. If you added a new method to an interface,
      existing implementations would, in general, lack the method, resulting in
      a compile-time error. In Java 8, the<span class="Apple-converted-space">&nbsp;</span><em>default
        method</em><span class="Apple-converted-space">&nbsp;</span>construct
      was added [<a href="ref.xhtml#rJLS" style="text-decoration: none;">JLS 9.4</a>],
      with the intent of allowing the addition of methods to existing
      interfaces. But adding new methods to existing interfaces is fraught with
      risk.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      declaration for a default method includes a<span class="Apple-converted-space">&nbsp;</span><em>default
        implementation</em><span class="Apple-converted-space">&nbsp;</span>that
      is used by all classes that implement the interface but do not implement
      the default method. While the addition of default methods to Java makes it
      possible to add methods to an existing interface, there is no guarantee
      that these methods will work in all preexisting implementations. Default
      methods are “injected” into existing implementations without the knowledge
      or consent of their implementors. Before Java 8, these implementations
      were written with the tacit understanding that their interfaces would<span
        class="Apple-converted-space">&nbsp;</span><em>never</em><span class="Apple-converted-space">&nbsp;</span>acquire
      any new methods.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Many
      new default methods were added to the core collection interfaces in Java
      8, primarily to facilitate the use of lambdas (<a href="ch6.xhtml#ch6" style="text-decoration: none;">Chapter
        6</a>). The Java libraries’ default methods are high-quality
      general-purpose implementations, and in most cases, they work fine. But<span
        class="Apple-converted-space">&nbsp;</span><strong>it is not always
        possible to write a default method that maintains all invariants of
        every conceivable implementation.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">For
      example, consider the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code><span class="Apple-converted-space">&nbsp;</span>method,
      which was added to the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Collection</code><span class="Apple-converted-space">&nbsp;</span>interface
      in Java 8. This method removes all elements for which a given<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">boolean</code><span class="Apple-converted-space">&nbsp;</span>function
      (or<span class="Apple-converted-space">&nbsp;</span><em>predicate</em>)
      returns<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">true</code>.
      The default implementation is specified to traverse the collection using
      its iterator, invoking the predicate on each element, and using the
      iterator’s<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">remove</code><span
        class="Apple-converted-space">&nbsp;</span>method to remove the elements
      for which the predicate returns<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">true</code>. Presumably
      the declaration looks something like this:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex24a" id="pch4ex24" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Default method added to the Collection interface in Java 8</strong><br>
      default boolean removeIf(Predicate&lt;? super E&gt; filter) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(filter);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;boolean result = false;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;for (Iterator&lt;E&gt; it = iterator();
      it.hasNext(); ) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
      (filter.test(it.next())) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it.remove();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result
      = true;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;return result;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_104"></span>This is the best
      general-purpose implementation one could possibly write for the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code><span class="Apple-converted-space">&nbsp;</span>method,
      but sadly, it fails on some real-world<code style="font-family: 'Courier New', monospace;">Collection</code><span
        class="Apple-converted-space">&nbsp;</span>implementations. For example,
      consider<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">org.apache.commons.collections4.-collection.SynchronizedCollection</code>.
      This class, from the Apache Commons library, is similar to the one
      returned by the static factory<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Collections.-synchronizedCollection</code><span
        class="Apple-converted-space">&nbsp;</span>in<code style="font-family: 'Courier New', monospace;">java.util</code>.
      The Apache version additionally provides the ability to use a
      client-supplied object for locking, in place of the collection. In other
      words, it is a wrapper class (<a href="ch4.xhtml#lev18" style="text-decoration: none;">Item
        18</a>), all of whose methods synchronize on a locking object before
      delegating to the wrapped collection.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      Apache<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">SynchronizedCollection</code><span
        class="Apple-converted-space">&nbsp;</span>class is still being actively
      maintained, but as of this writing, it does not override the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code><span class="Apple-converted-space">&nbsp;</span>method.
      If this class is used in conjunction with Java 8, it will therefore
      inherit the default implementation of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code>, which
      does not, indeed<span class="Apple-converted-space">&nbsp;</span><em>cannot</em>,
      maintain the class’s fundamental promise: to automatically synchronize
      around each method invocation. The default implementation knows nothing
      about synchronization and has no access to the field that contains the
      locking object. If a client calls the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code><span class="Apple-converted-space">&nbsp;</span>method
      on a<code style="font-family: 'Courier New', monospace;">SynchronizedCollection</code><span
        class="Apple-converted-space">&nbsp;</span>instance in the presence of
      concurrent modification of the collection by another thread, a<code style="font-family: 'Courier New', monospace;">ConcurrentModificationException</code><span
        class="Apple-converted-space">&nbsp;</span>or other unspecified behavior
      may result.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      order to prevent this from happening in similar Java platform libraries
      implementations, such as the package-private class returned by<code style="font-family: 'Courier New', monospace;">Collections.synchronizedCollection</code>,
      the JDK maintainers had to override the default<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">removeIf</code><span class="Apple-converted-space">&nbsp;</span>implementation
      and other methods like it to perform the necessary synchronization before
      invoking the default implementation. Preexisting collection
      implementations that were not part of the Java platform did not have the
      opportunity to make analogous changes in lockstep with the interface
      change, and some have yet to do so.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>In
        the presence of default methods, existing implementations of an
        interface may compile without error or warning but fail at runtime.</strong><span
        class="Apple-converted-space">&nbsp;</span>While not terribly common,
      this problem is not an isolated incident either. A handful of the methods
      added to the collections interfaces in Java 8 are known to be susceptible,
      and a handful of existing implementations are known to be affected.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Using
      default methods to add new methods to existing interfaces should be
      avoided unless the need is critical, in which case you should think long
      and hard about whether an existing interface implementation might be
      broken by your default method implementation. Default methods are,
      however, extremely useful for providing standard method implementations
      when an interface is created, to ease the task of implementing the
      interface (<a href="ch4.xhtml#lev20" style="text-decoration: none;">Item
        20</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_105"></span>It is also worth noting that
      default methods were not designed to support removing methods from
      interfaces or changing the signatures of existing methods. Neither of
      these interface changes is possible without breaking existing clients.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      moral is clear. Even though default methods are now a part of the Java
      platform,<span class="Apple-converted-space">&nbsp;</span><strong>it is
        still of the utmost importance to design interfaces with great care.</strong><span
        class="Apple-converted-space">&nbsp;</span>While default methods make it<span
        class="Apple-converted-space">&nbsp;</span><em>possible</em><span class="Apple-converted-space">&nbsp;</span>to
      add methods to existing interfaces, there is great risk in doing so. If an
      interface contains a minor flaw, it may irritate its users forever; if an
      interface is severely deficient, it may doom the API that contains it.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Therefore,
      it is critically important to test each new interface before you release
      it. Multiple programmers should implement each interface in different
      ways. At a minimum, you should aim for three diverse implementations.
      Equally important is to write multiple client programs that use instances
      of each new interface to perform various tasks. This will go a long way
      toward ensuring that each interface satisfies all of its intended uses.
      These steps will allow you to discover flaws in interfaces before they are
      released, when you can still correct them easily.<span class="Apple-converted-space">&nbsp;</span><strong>While
        it may be possible to correct some interface flaws after an interface is
        released, you cannot count on it</strong>.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev22" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_106"></span><strong>Item 22: Use interfaces only to define
        types</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">When
      a class implements an interface, the interface serves as a<span class="Apple-converted-space">&nbsp;</span><em>type</em><span
        class="Apple-converted-space">&nbsp;</span>that can be used to refer to
      instances of the class. That a class implements an interface should
      therefore say something about what a client can do with instances of the
      class. It is inappropriate to define an interface for any other purpose.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      kind of interface that fails this test is the so-called<span class="Apple-converted-space">&nbsp;</span><em>constant
        interface</em>. Such an interface contains no methods; it consists
      solely of static final fields, each exporting a constant. Classes using
      these constants implement the interface to avoid the need to qualify
      constant names with a class name. Here is an example:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex25a" id="pch4ex25" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Constant interface antipattern - do not use!</strong><br>
      public interface PhysicalConstants {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Avogadro's number (1/mol)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;static final double AVOGADROS_NUMBER&nbsp;&nbsp; =
      6.022_140_857e23;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Boltzmann constant (J/K)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;static final double BOLTZMANN_CONSTANT =
      1.380_648_52e-23;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Mass of the electron (kg)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;static final double
      ELECTRON_MASS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 9.109_383_56e-31;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>The
        constant interface pattern is a poor use of interfaces.</strong><span class="Apple-converted-space">&nbsp;</span>That
      a class uses some constants internally is an implementation detail.
      Implementing a constant interface causes this implementation detail to
      leak into the class’s exported API. It is of no consequence to the users
      of a class that the class implements a constant interface. In fact, it may
      even confuse them. Worse, it represents a commitment: if in a future
      release the class is modified so that it no longer needs to use the
      constants, it still must implement the interface to ensure binary
      compatibility. If a nonfinal class implements a constant interface, all of
      its subclasses will have their namespaces polluted by the constants in the
      interface.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are several constant interfaces in the Java platform libraries, such as<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">java.io.ObjectStreamConstants</code>.
      These interfaces should be regarded as anomalies and should not be
      emulated.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you want to export constants, there are several reasonable choices. If the
      constants are strongly tied to an existing class or interface, you should
      add them to the class or interface. For example, all of the boxed
      numerical primitive classes, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Integer</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Double,</code><span
        class="Apple-converted-space">&nbsp;</span>export<code style="font-family: 'Courier New', monospace;">MIN_VALUE</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">MAX_VALUE</code><span class="Apple-converted-space">&nbsp;</span>constants.
      If the constants are best viewed as members of an enumerated type, you
      should export<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_107"></span>them with an<span class="Apple-converted-space">&nbsp;</span><em>enum
        type</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch6.xhtml#lev34"
        style="text-decoration: none;">Item 34</a>). Otherwise, you should
      export the constants with a noninstantiable<span class="Apple-converted-space">&nbsp;</span><em>utility
        class</em><span class="Apple-converted-space">&nbsp;</span>(<a href="ch2.xhtml#lev4"
        style="text-decoration: none;">Item 4</a>). Here is a utility class
      version of the<code style="font-family: 'Courier New', monospace;">PhysicalConstants</code><span
        class="Apple-converted-space">&nbsp;</span>example shown earlier:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex26a" id="pch4ex26" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Constant utility class</strong><br>
      package com.effectivejava.science;<br>
      <br>
      public class PhysicalConstants {<br>
      &nbsp;&nbsp;private PhysicalConstants() { }&nbsp;&nbsp;// Prevents
      instantiation<br>
      <br>
      &nbsp;&nbsp;public static final double AVOGADROS_NUMBER =
      6.022_140_857e23;<br>
      &nbsp;&nbsp;public static final double BOLTZMANN_CONST&nbsp;&nbsp;=
      1.380_648_52e-23;<br>
      &nbsp;&nbsp;public static final double
      ELECTRON_MASS&nbsp;&nbsp;&nbsp;&nbsp;= 9.109_383_56e-31;<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Incidentally,
      note the use of the underscore character (<code style="font-family: 'Courier New', monospace;">_</code>)
      in the numeric literals. Underscores, which have been legal since Java 7,
      have no effect on the values of numeric literals, but can make them much
      easier to read if used with discretion. Consider adding underscores to
      numeric literals, whether fixed of floating point, if they contain five or
      more consecutive digits. For base ten literals, whether integral or
      floating point, you should use underscores to separate literals into
      groups of three digits indicating positive and negative powers of one
      thousand.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Normally
      a utility class requires clients to qualify constant names with a class
      name, for example,<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">PhysicalConstants.AVOGADROS_NUMBER</code>.
      If you make heavy use of the constants exported by a utility class, you
      can avoid the need for qualifying the constants with the class name by
      making use of the<span class="Apple-converted-space">&nbsp;</span><em>static
        import</em><span class="Apple-converted-space">&nbsp;</span>facility:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex27a" id="pch4ex27" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Use of static import to avoid qualifying constants</strong><br>
      import static com.effectivejava.science.PhysicalConstants.*;<br>
      <br>
      public class Test {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;atoms(double mols) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return AVOGADROS_NUMBER *
      mols;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Many more uses of PhysicalConstants justify
      static import<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, interfaces should be used only to define types. They should not
      be used merely to export constants.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev23" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_108"></span><strong>Item 23: Prefer class hierarchies to tagged
        classes</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Occasionally
      you may run across a class whose instances come in two or more flavors and
      contain a<span class="Apple-converted-space">&nbsp;</span><em>tag</em><span
        class="Apple-converted-space">&nbsp;</span>field indicating the flavor
      of the instance. For example, consider this class, which is capable of
      representing a circle or a rectangle:</p>
    <span epub:type="pagebreak" id="page_109" style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"></span><span
      style="color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;"></span>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex28a" id="pch4ex28" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Tagged class - vastly inferior to a class hierarchy!</strong><br>
      class Figure {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;enum Shape { RECTANGLE, CIRCLE };<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Tag field - the shape of this figure<br>
      &nbsp;&nbsp;&nbsp;&nbsp;final Shape shape;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// These fields are used only if shape is
      RECTANGLE<br>
      &nbsp;&nbsp;&nbsp;&nbsp;double length;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;double width;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// This field is used only if shape is CIRCLE<br>
      &nbsp;&nbsp;&nbsp;&nbsp;double radius;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Constructor for circle<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Figure(double radius) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shape = Shape.CIRCLE;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.radius = radius;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;// Constructor for rectangle<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Figure(double length, double width) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shape = Shape.RECTANGLE;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.length = length;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width = width;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;double area() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(shape) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
      RECTANGLE:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      length * width;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case CIRCLE:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
      Math.PI * (radius * radius);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw
      new AssertionError(shape);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_110"></span>Such<span class="Apple-converted-space">&nbsp;</span><em>tagged
        classes</em><span class="Apple-converted-space">&nbsp;</span>have
      numerous shortcomings. They are cluttered with boilerplate, including enum
      declarations, tag fields, and switch statements. Readability is further
      harmed because multiple implementations are jumbled together in a single
      class. Memory footprint is increased because instances are burdened with
      irrelevant fields belonging to other flavors. Fields can’t be made final
      unless constructors initialize irrelevant fields, resulting in more
      boilerplate. Constructors must set the tag field and initialize the right
      data fields with no help from the compiler: if you initialize the wrong
      fields, the program will fail at runtime. You can’t add a flavor to a
      tagged class unless you can modify its source file. If you do add a
      flavor, you must remember to add a case to every switch statement, or the
      class will fail at runtime. Finally, the data type of an instance gives no
      clue as to its flavor. In short,<span class="Apple-converted-space">&nbsp;</span><strong>tagged
        classes are verbose, error-prone, and inefficient.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Luckily,
      object-oriented languages such as Java offer a far better alternative for
      defining a single data type capable of representing objects of multiple
      flavors: subtyping.<span class="Apple-converted-space">&nbsp;</span><strong>A
        tagged class is just a pallid imitation of a class hierarchy.</strong></p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      transform a tagged class into a class hierarchy, first define an abstract
      class containing an abstract method for each method in the tagged class
      whose behavior depends on the tag value. In the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Figure</code><span class="Apple-converted-space">&nbsp;</span>class,
      there is only one such method, which is<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">area</code>. This
      abstract class is the root of the class hierarchy. If there are any
      methods whose behavior does not depend on the value of the tag, put them
      in this class. Similarly, if there are any data fields used by all the
      flavors, put them in this class. There are no such flavor-independent
      methods or fields in the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Figure</code><span class="Apple-converted-space">&nbsp;</span>class.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Next,
      define a concrete subclass of the root class for each flavor of the
      original tagged class. In our example, there are two: circle and
      rectangle. Include in each subclass the data fields particular to its
      flavor. In our example,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">radius</code><span class="Apple-converted-space">&nbsp;</span>is
      particular to circle, and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">length</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">width</code><span
        class="Apple-converted-space">&nbsp;</span>are particular to rectangle.
      Also include in each subclass the appropriate implementation of each
      abstract method in the root class. Here is the class hierarchy
      corresponding to the original<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Figure</code><span class="Apple-converted-space">&nbsp;</span>class:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex29a" id="pch4ex29" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Class hierarchy replacement for a tagged class</strong><br>
      abstract class Figure {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;abstract double area();<br>
      }<br>
      <br>
      class Circle extends Figure {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;final double radius;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;Circle(double radius) { this.radius = radius; }<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override double area() { return Math.PI * (radius
      * radius); }<br>
      }<br>
      <span epub:type="pagebreak" id="page_111"></span>class Rectangle extends
      Figure {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;final double length;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;final double width;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;Rectangle(double length, double width) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.length = length;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width&nbsp;&nbsp;=
      width;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override double area() { return length * width; }<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">This
      class hierarchy corrects every shortcoming of tagged classes noted
      previously. The code is simple and clear, containing none of the
      boilerplate found in the original. The implementation of each flavor is
      allotted its own class, and none of these classes is encumbered by
      irrelevant data fields. All fields are final. The compiler ensures that
      each class’s constructor initializes its data fields and that each class
      has an implementation for every abstract method declared in the root
      class. This eliminates the possibility of a runtime failure due to a
      missing switch case. Multiple programmers can extend the hierarchy
      independently and interoperably without access to the source for the root
      class. There is a separate data type associated with each flavor, allowing
      programmers to indicate the flavor of a variable and to restrict variables
      and input parameters to a particular flavor.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Another
      advantage of class hierarchies is that they can be made to reflect natural
      hierarchical relationships among types, allowing for increased flexibility
      and better compile-time type checking. Suppose the tagged class in the
      original example also allowed for squares. The class hierarchy could be
      made to reflect the fact that a square is a special kind of rectangle
      (assuming both are immutable):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex30a" id="pch4ex30" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">class
      Square extends Rectangle {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;Square(double side) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(side, side);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Note
      that the fields in the above hierarchy are accessed directly rather than
      by accessor methods. This was done for brevity and would be a poor design
      if the hierarchy were public (<a href="ch4.xhtml#lev16" style="text-decoration: none;">Item
        16</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">In
      summary, tagged classes are seldom appropriate. If you’re tempted to write
      a class with an explicit tag field, think about whether the tag could be
      eliminated and the class replaced by a hierarchy. When you encounter an
      existing class with a tag field, consider refactoring it into a hierarchy.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev24" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_112"></span><strong>Item 24: Favor static member classes over
        nonstatic</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A<span
        class="Apple-converted-space">&nbsp;</span><em>nested class</em><span class="Apple-converted-space">&nbsp;</span>is
      a class defined within another class. A nested class should exist only to
      serve its enclosing class. If a nested class would be useful in some other
      context, then it should be a top-level class. There are four kinds of
      nested classes:<span class="Apple-converted-space">&nbsp;</span><em>static
        member classes</em>,<span class="Apple-converted-space">&nbsp;</span><em>nonstatic
        member classes</em>,<span class="Apple-converted-space">&nbsp;</span><em>anonymous
        classes</em>, and<span class="Apple-converted-space">&nbsp;</span><em>local
        classes</em>. All but the first kind are known as<span class="Apple-converted-space">&nbsp;</span><em>inner
        classes</em>. This item tells you when to use which kind of nested class
      and why.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      static member class is the simplest kind of nested class. It is best
      thought of as an ordinary class that happens to be declared inside another
      class and has access to all of the enclosing class’s members, even those
      declared private. A static member class is a static member of its
      enclosing class and obeys the same accessibility rules as other static
      members. If it is declared private, it is accessible only within the
      enclosing class, and so forth.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">One
      common use of a static member class is as a public helper class, useful
      only in conjunction with its outer class. For example, consider an enum
      describing the operations supported by a calculator (<a href="ch6.xhtml#lev34"
        style="text-decoration: none;">Item 34</a>). The<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Operation</code><span class="Apple-converted-space">&nbsp;</span>enum
      should be a public static member class of the<code style="font-family: 'Courier New', monospace;">Calculator</code><span
        class="Apple-converted-space">&nbsp;</span>class. Clients of<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Calculator</code><span class="Apple-converted-space">&nbsp;</span>could
      then refer to operations using names like<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Calculator.Operation.PLUS</code><span
        class="Apple-converted-space">&nbsp;</span>and<code style="font-family: 'Courier New', monospace;">Calculator.Operation.MINUS</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Syntactically,
      the only difference between static and nonstatic member classes is that
      static member classes have the modifier<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">static</code><span class="Apple-converted-space">&nbsp;</span>in
      their declarations. Despite the syntactic similarity, these two kinds of
      nested classes are very different. Each instance of a nonstatic member
      class is implicitly associated with an<span class="Apple-converted-space">&nbsp;</span><em>enclosing
        instance</em><span class="Apple-converted-space">&nbsp;</span>of its
      containing class. Within instance methods of a nonstatic member class, you
      can invoke methods on the enclosing instance or obtain a reference to the
      enclosing instance using the<span class="Apple-converted-space">&nbsp;</span><em>qualified
        this</em><span class="Apple-converted-space">&nbsp;</span>construct
      [JLS, 15.8.4]. If an instance of a nested class can exist in isolation
      from an instance of its enclosing class, then the nested class<span class="Apple-converted-space">&nbsp;</span><em>must</em><span
        class="Apple-converted-space">&nbsp;</span>be a static member class: it
      is impossible to create an instance of a nonstatic member class without an
      enclosing instance.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      association between a nonstatic member class instance and its enclosing
      instance is established when the member class instance is created and
      cannot be modified thereafter. Normally, the association is established
      automatically by invoking a nonstatic member class constructor from within
      an instance method of the enclosing class. It is possible, though rare, to
      establish the association manually using the expression<code style="font-family: 'Courier New', monospace;">enclosingInstance.new
        MemberClass(args)</code>. As you would expect, the association takes up
      space in the nonstatic member class instance and adds time to its
      construction.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span
        epub:type="pagebreak" id="page_113"></span>One common use of a nonstatic
      member class is to define an<span class="Apple-converted-space">&nbsp;</span><em>Adapter</em><span
        class="Apple-converted-space">&nbsp;</span>[<a href="ref.xhtml#rGamma95"
        style="text-decoration: none;">Gamma95</a>] that allows an instance of
      the outer class to be viewed as an instance of some unrelated class. For
      example, implementations of the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code><span class="Apple-converted-space">&nbsp;</span>interface
      typically use nonstatic member classes to implement their<em>collection
        views</em>, which are returned by<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code>’s<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">keySet</code>,<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">entrySet</code>, and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">values</code><span
        class="Apple-converted-space">&nbsp;</span>methods. Similarly,
      implementations of the collection interfaces, such as<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Set</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">List</code>,
      typically use nonstatic member classes to implement their iterators:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex31a" id="pch4ex31" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Typical use of a nonstatic member class</strong><br>
      public class MySet&lt;E&gt; extends AbstractSet&lt;E&gt; {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;... // Bulk of the class omitted<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;@Override public Iterator&lt;E&gt; iterator() {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new MyIterator();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;<strong>private class MyIterator implements
        Iterator&lt;E&gt;</strong><span class="Apple-converted-space">&nbsp;</span>{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>If
        you declare a member class that does not require access to an enclosing
        instance,</strong><span class="Apple-converted-space">&nbsp;</span><em><strong>always</strong></em><span
        class="Apple-converted-space">&nbsp;</span><strong>put the</strong><span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;"><strong>static</strong></code><span
        class="Apple-converted-space">&nbsp;</span><strong>modifier in its
        declaration,</strong><span class="Apple-converted-space">&nbsp;</span>making
      it a static rather than a nonstatic member class. If you omit this
      modifier, each instance will have a hidden extraneous reference to its
      enclosing instance. As previously mentioned, storing this reference takes
      time and space. More seriously, it can result in the enclosing instance
      being retained when it would otherwise be eligible for garbage collection
      (<a href="ch2.xhtml#lev7" style="text-decoration: none;">Item 7</a>). The
      resulting memory leak can be catastrophic. It is often difficult to detect
      because the reference is invisible.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">A
      common use of private static member classes is to represent components of
      the object represented by their enclosing class. For example, consider a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Map</code><span
        class="Apple-converted-space">&nbsp;</span>instance, which associates
      keys with values. Many<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Map</code><span class="Apple-converted-space">&nbsp;</span>implementations
      have an internal<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Entry</code><span
        class="Apple-converted-space">&nbsp;</span>object for each key-value
      pair in the map. While each entry is associated with a map, the methods on
      an entry (<code style="font-family: 'Courier New', monospace;">getKey</code>,<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">getValue</code>,
      and<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">setValue</code>)
      do not need access to the map. Therefore, it would be wasteful to use a
      nonstatic member class to represent entries: a private static member class
      is best. If you accidentally omit the<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">static</code><span class="Apple-converted-space">&nbsp;</span>modifier
      in the entry declaration, the map will still work, but each entry will
      contain a superfluous reference to the map, which wastes space and time.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It
      is doubly important to choose correctly between a static and a nonstatic
      member class if the class in question is a public or protected member of
      an<span class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak"
        id="page_114"></span>exported class. In this case, the member class is
      an exported API element and cannot be changed from a nonstatic to a static
      member class in a subsequent release without violating backward
      compatibility.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">As
      you would expect, an anonymous class has no name. It is not a member of
      its enclosing class. Rather than being declared along with other members,
      it is simultaneously declared and instantiated at the point of use.
      Anonymous classes are permitted at any point in the code where an
      expression is legal. Anonymous classes have enclosing instances if and
      only if they occur in a nonstatic context. But even if they occur in a
      static context, they cannot have any static members other than<span class="Apple-converted-space">&nbsp;</span><em>constant
        variables</em>, which are final primitive or string fields initialized
      to constant expressions [JLS, 4.12.4].</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">There
      are many limitations on the applicability of anonymous classes. You can’t
      instantiate them except at the point they’re declared. You can’t perform<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">instanceof</code><span
        class="Apple-converted-space">&nbsp;</span>tests or do anything else
      that requires you to name the class. You can’t declare an anonymous class
      to implement multiple interfaces or to extend a class and implement an
      interface at the same time. Clients of an anonymous class can’t invoke any
      members except those it inherits from its supertype. Because anonymous
      classes occur in the midst of expressions, they must be kept short—about
      ten lines or fewer—or readability will suffer.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Before
      lambdas were added to Java (<a href="ch6.xhtml#ch6" style="text-decoration: none;">Chapter
        6</a>), anonymous classes were the preferred means of creating small<span
        class="Apple-converted-space">&nbsp;</span><em>function objects</em><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><em>process
        objects</em><span class="Apple-converted-space">&nbsp;</span>on the fly,
      but lambdas are now preferred (<a href="ch7.xhtml#lev42" style="text-decoration: none;">Item
        42</a>). Another common use of anonymous classes is in the
      implementation of static factory methods (see<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">intArrayAsList</code><span
        class="Apple-converted-space">&nbsp;</span>in<span class="Apple-converted-space">&nbsp;</span><a
        href="ch4.xhtml#lev20" style="text-decoration: none;">Item 20</a>).</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Local
      classes are the least frequently used of the four kinds of nested classes.
      A local class can be declared practically anywhere a local variable can be
      declared and obeys the same scoping rules. Local classes have attributes
      in common with each of the other kinds of nested classes. Like member
      classes, they have names and can be used repeatedly. Like anonymous
      classes, they have enclosing instances only if they are defined in a
      nonstatic context, and they cannot contain static members. And like
      anonymous classes, they should be kept short so as not to harm
      readability.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      recap, there are four different kinds of nested classes, and each has its
      place. If a nested class needs to be visible outside of a single method or
      is too long to fit comfortably inside a method, use a member class. If
      each instance of a member class needs a reference to its enclosing
      instance, make it nonstatic; otherwise, make it static. Assuming the class
      belongs inside a method, if you need to create instances from only one
      location and there is a preexisting type that characterizes the class,
      make it an anonymous class; otherwise, make it a local class.</p>
    <h3 class="h3" style="font-size: 21px; margin-top: 26.666668px; margin-bottom: 13.333334px; page-break-after: avoid; margin-left: 80px; text-indent: -80px; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        id="lev25" style="text-decoration: none;"></a><span epub:type="pagebreak"
        id="page_115"></span><strong>Item 25: Limit source files to a single
        top-level class</strong></h3>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">While
      the Java compiler lets you define multiple top-level classes in a single
      source file, there are no benefits associated with doing so, and there are
      significant risks. The risks stem from the fact that defining multiple
      top-level classes in a source file makes it possible to provide multiple
      definitions for a class. Which definition gets used is affected by the
      order in which the source files are passed to the compiler.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">To
      make this concrete, consider this source file, which contains only a<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Main</code><span
        class="Apple-converted-space">&nbsp;</span>class that refers to members
      of two other top-level classes (<code style="font-family: 'Courier New', monospace;">Utensil</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert</code>):</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex32a" id="pch4ex32" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">public
      class Main {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Utensil.NAME
      + Dessert.NAME);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Now
      suppose you define both<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Utensil</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Dessert</code><span
        class="Apple-converted-space">&nbsp;</span>in a single source file named<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Utensil.java</code>:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex33a" id="pch4ex33" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Two classes defined in one file. Don't ever do this!</strong><br>
      class Utensil {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;static final String NAME = "pan";<br>
      }<br>
      <br>
      class Dessert {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;static final String NAME = "cake";<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Of
      course the main program prints<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">pancake</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Now
      suppose you accidentally make<span class="Apple-converted-space">&nbsp;</span><em>another</em><span
        class="Apple-converted-space">&nbsp;</span>source file named<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert.java</code><span
        class="Apple-converted-space">&nbsp;</span>that defines the same two
      classes:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex34a" id="pch4ex34" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Two classes defined in one file. Don't ever do this!</strong><br>
      class Utensil {<br>
      &nbsp;&nbsp;&nbsp; static final String NAME = "pot";<br>
      }<br>
      <br>
      class Dessert {<br>
      &nbsp;&nbsp;&nbsp; static final String NAME = "pie";<br>
      }</p>
    <p class="noindent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 0.0026666669px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you’re lucky enough to compile the program with the command<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">javac Main.java
        Dessert.java</code>, the compilation will fail, and the compiler will<span
        class="Apple-converted-space">&nbsp;</span><span epub:type="pagebreak" id="page_116"></span>tell
      you that you’ve multiply defined the classes<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Utensil</code><span class="Apple-converted-space">&nbsp;</span>and<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Dessert</code>.
      This is so because the compiler will first compile<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Main.java</code>, and
      when it sees the reference to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Utensil</code><span class="Apple-converted-space">&nbsp;</span>(which
      precedes the reference to<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert</code>), it will
      look in<span class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Utensil.java</code><span
        class="Apple-converted-space">&nbsp;</span>for this class and find both<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Utensil</code><span
        class="Apple-converted-space">&nbsp;</span>and<code style="font-family: 'Courier New', monospace;">Dessert</code>.
      When the compiler encounters<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert.java</code><span
        class="Apple-converted-space">&nbsp;</span>on the command line, it will
      pull in that file too, causing it to encounter both definitions of<code style="font-family: 'Courier New', monospace;">Utensil</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert</code>.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">If
      you compile the program with the command<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">javac Main.java</code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">javac Main.java
        Utensil.java</code>, it will behave as it did before you wrote the<span
        class="Apple-converted-space">&nbsp;</span><code style="font-family: 'Courier New', monospace;">Dessert.java</code><span
        class="Apple-converted-space">&nbsp;</span>file, printing<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">pancake</code>. But if
      you compile the program with the command<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">javac Dessert.java
        Main.java</code>, it will print<code style="font-family: 'Courier New', monospace;">potpie</code>.
      The behavior of the program is thus affected by the order in which the
      source files are passed to the compiler, which is clearly unacceptable.</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">Fixing
      the problem is as simple as splitting the top-level classes (<code style="font-family: 'Courier New', monospace;">Utensil</code><span
        class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
        style="font-family: 'Courier New', monospace;">Dessert</code>, in the
      case of our example) into separate source files. If you are tempted to put
      multiple top-level classes into a single source file, consider using
      static member classes (<a href="ch4.xhtml#lev24" style="text-decoration: none;">Item
        24</a>) as an alternative to splitting the classes into separate source
      files. If the classes are subservient to another class, making them into
      static member classes is generally the better alternative because it
      enhances readability and makes it possible to reduce the accessibility of
      the classes by declaring them private (<a href="ch4.xhtml#lev15" style="text-decoration: none;">Item
        15</a>). Here is how our example looks with static member classes:</p>
    <p class="codelink" style="font-size: 0.88em; margin-top: 8px; margin-bottom: 8px; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); font-family: sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><a
        href="ch4_images.xhtml#pch4ex35a" id="pch4ex35" style="text-decoration: none;">Click
        here to view code image</a></p>
    <p class="pre" style="font-family: 'Courier New', monospace; font-size: 0.88em; margin-top: 13.333334px; margin-bottom: 13.333334px; margin-left: 20px; text-align: justify; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><strong>//
        Static member classes instead of multiple top-level classes</strong><br>
      public class Test {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Utensil.NAME
      + Dessert.NAME);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static class Utensil {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static final String NAME =
      "pan";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;private static class Dessert {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static final String NAME =
      "cake";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      }</p>
    <p class="indent" style="margin-top: 0px; margin-bottom: 0px; text-indent: 20px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">The
      lesson is clear:<span class="Apple-converted-space">&nbsp;</span><strong>Never
        put multiple top-level classes or interfaces in a single source file.</strong><span
        class="Apple-converted-space">&nbsp;</span>Following this rule
      guarantees that you can’t have multiple definitions for a single class at
      compile time. This in turn guarantees that the class files generated by
      compilation, and the behavior of the resulting program, are independent of
      the order in which the source files are passed to the compiler.</p>
    <p></p>
    <p><br>
    </p>
    <p>1 </p>
  </body>
</html>
