<!DOCTYPE html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type">
    <title>AkkaStream - Переклад українською: Арсеній Чеботарьов Ніжин 2016</title>
  </head>
  <body>
    <address style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 10px; line-height: 12px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: color: #cc9933;;">
      <span style="font-style: italic;">Переклад українською - <a href="mailto:ac2epsilon@gmail.com">Арсеній
          Чеботарьов</a> - Ніжин 2016</span></address>
    <p><br>
    </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Akka
      Streams</h1>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Вступ</h1>
    <div class="section" id="motivation" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Motivation" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Мотивація</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Шлях,
        яким ми споживаємо сервіси з інтернету сьогоді, включає багато
        примірників потокових даних, обоє, завантажених з сервісів, так само, як
        і надісланих до них, а також передачі даних типу точка-точка. Розглядати
        дані як потік елементів, замість як ціле, є дуже корисним, оскільки це
        співпадає зі шляхом, як комп'ютери надсилають та отримують їх
        (наприклад, через TCP), але також часто це необхідно, бо набори даних
        часто стають дуже довгими, щоб бути обробленими як ціле. Ми розпорошили
        обчислення та аналіз на великі кластери, та назвали їх "великими
        даними", де цілий принцип їх обробки є послідовне подання ціх даних як
        потока через деякі CPU.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Актори
        також можуть розглядатись як маючі справу з потоками: вони надсилають та
        отримують сервії повідомлень, щоб передавати знання (або дані) з одного
        місця в інше. Ми знайшли це виснажливим та схильним до помилок
        реалізувати всі відповідні виміри, щоб досягти стабільних потоків між
        акторами, оскільки на додаток до надсилання та отримки нам треба
        турбуватись, та не переповнити жодні буфери або поштові скриньки в
        процесі цього. Інша пастка в тому, що повідомлення акторів можуть бути
        втрачені, та мають бути повторно передані, в якому випадку потік має
        дірки на стороні отримувача. Коли маєте справу з потоками елементів
        фіксованого наданого типу, актори наразі не пропонують гарних статичних
        гарантій що того, що не відбулось помилок запису: в цьому випадку
        типо-безпечність може бути покращена.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">З
        цієї причини ми вирішили запакувати рішення ціх проблем як&nbsp; Akka
        Streams API. Призначення в наданні інтуітивного та безпечного шляху до
        формулювання налаштування обробки потоку, так що ми потім можемо їх
        ефективно обробляти, та з обмеженим використанням ресурсів&nbsp; —
        більше немає OutOfMemoryErrors. Щоб досягти цього наші потоки потребують
        змоги обмежувати буферізацію, що вони задіють, та їм треба можливість
        уповільнювати прод'юсерів, якщо споживачі не можуть поспівати за ними.
        Ця можливість називається зворотнім тиском, та належить до ядра
        ініціативи&nbsp;<span class="Apple-converted-space"></span><a class="reference external"
          href="http://reactive-streams.org/" style="color: rgb(21, 169, 206); text-decoration: none;">Reactive
          Streams</a><span class="Apple-converted-space">, до якої </span>Akka
        є засновником. Для вас це означає, що складна проблема просування та
        реагування на зворотній тиск вже була вбудована в&nbsp; розробку Akka
        Streams, так що ви маєте на одну річ менше, про яку не треба
        турбуватись; це також означає, що Akka Streams безпроблемно взаємодіє з
        усіма іншими реалізаціями Reactive Streams (де інтерфейси&nbsp; Reactive
        Streams визначають взаємодію SPI, тоді як реалізації, як Akka Streams
        надають гарний користувацький API).</p>
      <div class="section" id="relationship-with-reactive-streams">
        <h3 id="Relationship_with_Reactive_Streams" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Взаємодія
          з Reactive Streams</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
          Streams API повністю відділена від інтерфейсів Reactive Streams. Тоді
          як Akka Streams сфокусоване на формулюванні трансформацій з потоками
          даних, поле зору Reactive Streams є тільки визначити загальний
          механізм того, як пересувати дані між асинхронними межами безвтрат,
          буферизації або поглинання ресурсів.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Взаємовідносини
          між ціми двома в тому, що Akka Streams API спрямоване на кінцевого
          користувача, і в той же час реалізація Akka Streams внутрішньо
          використовує реалізацію інтерфейсів Reactive Streams для передачі
          даних між різними стадіями обробки. З цієї причини ви не знайдете
          жодної подібності між інтерфейсами Reactive Streams та Akka Streams
          API. Це співпадає з очікуваннями від проекту Reactive Streams, чиє
          первинне призначення є визначення інтерфейсів, таким чином, щоб різні
          реалізації потокв могли взаємодіяти; він не призначений щоб Reactive
          Streams описували API кінцевого користувача.</p>
      </div>
    </div>
    <div class="section" id="how-to-read-these-docs" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="How_to_read_these_docs" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Як
        читати ці документи</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Обробка
        потоків є іншою парадігмою до моделі акторів, або до компонування
        Future, і таким чином треба уважно вивчити предмет, доки ви не почнете
        почуватись знайомими з інструментами цієї технології. Ця документація
        допоможе, та для отримання кращих результатів ми рекомендуємо наступний
        підхід:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;">Прочитайте&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-quickstart.html#stream-quickstart-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Інструкцію
              зі швидкого початку</span></a><span class="Apple-converted-space">,
            щоб отримати відчуття від потоків, як вони виглядають, та що вони
            можуть робити</span>.</li>
        <li style="line-height: 18px;">Ті, хто вивчає зверху до низу, можуть
          перейти до&nbsp;<span class="Apple-converted-space"></span><a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/general/stream/stream-design.html#stream-design"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Принципи
              розробки, що стоять за Akka</span></a><span class="Apple-converted-space">
          </span>в цій точці.</li>
        <li style="line-height: 18px;">Ті, хто вивчає знизу до верху, можуть
          почуватись більш гарно, пошукавшу в&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-cookbook.html#stream-cookbook-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Повареній
              книзі Streams</span></a>.</li>
        <li style="line-height: 18px;">Для повного огляду вбудованих стадій
          обробки ви можете подивитись на таблицю в&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#stages-overview-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Огляді
              вбудованих стадій, та їх семантики &nbsp; <br>
            </span></a></li>
        <li style="line-height: 18px;">Інші розділи можна читати послідовно, або
          як вимагають попередні кроки, в кожній поринаючи в специфічні теми.</li>
      </ul>
    </div>
    <p> </p>
    <div class="section" id="quick-start-guide" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px;">Інструкція
        зі швидкого початку</h1>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Потік
        звичайно починається з джерела, так що також там починає і Akka Stream.
        Перед тим, як ми створимо один з них, ми імпортуємо повний конплект
        потокових інструментів:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">scaladsl</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
        ви бажаєте виконати приклади кода під час читання цієї інструкції, вам
        також треба наступні імпортування:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Done</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">actor</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">ActorSystem</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">util</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">scala</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">concurrent</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">scala</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">concurrent</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">duration</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">java</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">nio</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">file</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Paths</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Тепер
        ми будемо починати зі скоріше простого джерела, що видає цілі від 1 до
        100:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Тип&nbsp;<span
          class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> параметризовано двома типами</span>:
        перший є типом елемента, що видає це джерело, та другий може
        сигналізувати, що виконання джерела продукує деяке додаткове значення
        (наприклад, мережеве джерело може провадити інформацію щодо прив'язаного
        порта або адреси). Якщо додаткова інформація не продукується,
        використовується&nbsp;<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka.NotUsed</span></code><span
          class="Apple-converted-space"> </span>— та проситий диапазон цілих
        підпадає під цю категорію.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Маючи
        створеним це джерело, означає, що ми маємо опис того, як видати 100
        натуральний чисел, та це джерело ще не активне. Щоб отримати ці числа,
        ми маємо запустити його:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цей
        рядок завершить джерело за допомогою функції споживача — в прикладі ми
        просто друкуємо числа на консолі — та передаємо цей малий потік до
        актора, що виконує його. Ця активація позначається як слово “run”, що є
        частиною назви метода; існують інші методи, що виконують потокі Akka
        Streams, та всі вони слідують цьому шаблону.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ви
        можете здивуватись, де створюється актор, що виконує потік, і ви,
        можливо питаєте себе, що означає цей <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">materializer</span></code>.
        Щоб отримати це значення, спочатку ми створюємо систему акторів:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"QuickStart"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Існують
        інші шляхи створити materializer, наприклад, з&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorContext</span></code><span
          class="Apple-converted-space">, коли потоки використовуються в самих
          акторах</span>. <code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Materializer</span></code><span
          class="Apple-converted-space"> є фабрикою для пристроїв виконання
          потоку</span>, це те, що змушує потік рухатись — вам прямо зараз не
        треба турбуватись щодо жодних деталей, крім того, що вам знадобиться
        один такий матеріалізатор, для виклику методів<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">run</span></code><span
          class="Apple-converted-space"> на</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>.
        Матеріалізатор підхоплюється неявно, якщо він не вказаний в аргументах
        метода&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">run</span></code>, що
        ми будемо робити в в подальшому.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Гарна
        річ щодо Akka Streams полягає в тому, що&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> є тільки описом того, що потрібно
          використовувати, та як проект архитектора, це можна використовувати
          повторно, вбудоване в інший дизайн</span>. Ми можемо обрати
        перетворення джерела цілих та записати їх до файлу:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">factorials</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">scan</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BigInt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">next</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">acc</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">*</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">next</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">IOResult</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">factorials</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">num</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"</span></span><span class="si" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">$num</span></span><span class="s"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FileIO</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toPath</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Paths</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"factorials.txt"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Спочатку
        ми використовуємо комбінтор&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">scan</span></code><span
          class="Apple-converted-space"> для виконання обчислень над цілим
          потоком</span>: починаємо з числа 1 (<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BigInt(1)</span></code>)
        ми множимо кожне з вхідних чисел, одне за одним; операція scan видає
        початкове значення, та потім кожний обчислений результат. Це дає серію
        чисел факториала, що ми зберігаємо як&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> для майбутнього використання </span>—
        важливо пам'ятати, що наразі нічого не обчислюється, це тільки опис
        того, що ми бажаємо обчислити, коли ми виконаємо потік. Потім ми
        конвертуємо отриману серію чисел на потік об'єктів&nbsp;<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
          class="Apple-converted-space">, що описують рядки текстового файла. </span>Цей
        потік потім виконується, через додавання файла як отримувача даних. В
        термінології Akka Streams це називається приймач,<span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">IOResult</span></code><span
          class="Apple-converted-space"> є типом, що повертають операції </span>IO
        в Akka Streams, щоб сказати, як багато байтів або елементів було
        спожито, та чи потік завершився нормально або з виключенням.</p>
      <div class="section" id="reusable-pieces">
        <h2 id="Reusable_Pieces" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Поторно
          задіяні частини</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Одна
          з гарних речей в Akka Streams — aта дещо, чого не пропонують інші
          поточні бібліотеки&nbsp; — це те, що не тільки джерела можуть бути
          задіяні як плани, але також і всі інші елементи. Ми можемо взяти&nbsp;<span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>,
          що пише в файл, поставити попереду кроки обробки, потрібні для
          отримання елементів&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space"> з надходячих рядків, і так само
            запакувати це як повторно задіяну частину. Оскільки мова для написання
            цїх потоків завжди слідує зліва направо</span> (як звичайна англійська),
          нам треба початкова точка, що як джерело, але з "відкритим" входом. В
          Akka Streams це називається<span class="Apple-converted-space"> </span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lineSink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filename</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">IOResult</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FileIO</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toPath</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Paths</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filename</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Починаючи
          з потока рядків, ми конвертуємо кожний на<span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">, та потім подаємо до вже знайомого
            приймача</span><span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>,
          що пише в файл. Отримана схема є&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink[String,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Future[IOResult]]</span></code>,
          що означає, що він сприймає рядкі як свій вхід, та під час
          матеріалізації він створює додаткову інформацію типу<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[IOResult]</span></code><span
            class="Apple-converted-space">&nbsp;</span>(коли зціплюються
          операції на <code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space"> або</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">, тип допоміжної інформацїі </span>—
          що називається “матеріалізоване значення”— надаєть в самій лівій
          початковій точці; оскльіки ми бажаємо залишити те, що пропонує нам
          приймач&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FileIO.toPath</span></code>,
          нам треба сказати<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code>).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ми
          можемо використати новий та блискучий&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">, що ми тільки но створили, приєднавши
            його до нашого джерела</span><span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">factorials</span></code><span
            class="Apple-converted-space"> </span>— після невеликої адаптації
          для перетворення чисел на рядки:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">factorials</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lineSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"factorial2.txt"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="time-based-processing">
        <h2 id="Time-Based_Processing" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Обробка
          на основі часу</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перед
          тим, як ми поглянемо на більш складний приклад, ми дослідимо потокову
          природу того, що може робити Akka Streams. Починаючи з джерела&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">factorials</span></code><span
            class="Apple-converted-space"> ми трансформуємо потік, зібравши його
            разом з іншим потоком, що представлений&nbsp;</span><span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">, що видає числа з </span>0 до 100:
          перше число, що видається джерелом&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">factorials</span></code><span
            class="Apple-converted-space"> є факториал нуля, другий є
            факториалом одиниці, і так далі</span>. Ми комбінуємо ці два через
          формування рядків типу&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">"3!</span><span class="Apple-converted-space">&nbsp;</span><span
              class="pre" style="color: rgb(11, 85, 103);">=</span><span class="Apple-converted-space">&nbsp;</span><span
              class="pre" style="color: rgb(11, 85, 103);">6"</span></code>.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">done</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Done</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">factorials</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">zipWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">num</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">idx</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">s</span><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$idx</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">! = </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$num</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">throttle</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ThrottleMode</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shaping</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">До
          цього часу всі операції були незалежні від часу, та моги бути виконані
          в тому ж самому стилі на обмежених колекціях елементів. Наступний
          рядок демонструє, як, насправді, ми маємо справу з потоками, що можуть
          надходити з певною швидкістю: ми використовуємо комбінатор&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">throttle</span></code><span
            class="Apple-converted-space">&nbsp; для уповільнення потоку до </span>1
          елементу на секунду (<span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">1</span></code><span
            class="Apple-converted-space"> секунда в списку аргументів є
            максимальним прискоренням, що ми бажаємо дозволити </span>— передача<span
            class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">1</span></code><span
            class="Apple-converted-space"> означає, що перший елемент проходить
            безпосередньо, та потім другий має чекати одну секунду, і так далі</span>).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
          ви виконаєте цю програму, ви побачите друк одного рядка в секунду.
          Заслуговує згадки один аспект, що не є беспосередньо наочним: якщо ви
          спробуєте та встановите потоки для продукування мільярд чисел кожний,
          тоді ви помітите, що ваша&nbsp; JVM не впаде з OutOfMemoryError, та
          навіть ви помітите, що виконання потоків відбувається в фоні,
          асинхронно (це та причина, чому допоміжна інформація провадиться
          як&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code>).
          Секрет, що змушує це робити, є те, що Akka Streams неявно реалізує
          розширений контроль потоку, всі комбінатори поважають зворотній тиск.
          Це дозволяє комбінатору throttle сигналізувати всім своїм джерелам
          даних, що він приймає елементи тільки з певною швидкістю&nbsp; — коли
          входяций потік вищий, ніж один за секунду, комбінатор throttle буде
          накладати <em style="font-style: italic;">зворотній тиск</em>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
          в основному все щодо Akka Streams&nbsp; — прикрашене тим, що існують
          десятки джерел та приймачів, та багато більше комбінаторів перетворень
          потоку, з яких можна обирати. Також дивіться&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#stages-overview-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Огляд
              вбудованих стадій та їх семантика</span></a>.</p>
      </div>
    </div>
    <div class="section" id="reactive-tweets" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px;">Reactive
        Tweets</h1>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Типовим
        прикладом обробки потока є споживання живого потоку даних, коли ми
        бажаємо виділити або агрегувати деякі дані з нього. В цьому прикладі ми
        розглянемо споживання потоку твітів, та виділення з нього&nbsp;
        інформації щодо Akka.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Також
        ми розглянемо проблему, що постає для всіх неблокуючих поточинх рішень:<span
          class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">"Що,
          якщо підписчик є досить повільним для споживання живого потоку даних?"</em>.
        Традиційне рішення є буферизація елементів, але це може&nbsp; — та
        звичайно буде — викликати переповнення буфера та нестабільність систем.
        Замість цього Akka Streams покладається на внутрішні сигнали зворотнього
        тиску, що дозволяють контролювати, що повинно відбуватись в такому
        сценарії.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ось
        модель даних, з якою ми будемо працювати під час роботи над цім
        прикладом:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">name</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">timestamp</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Long</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Set</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">split</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">" "</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">collect</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">t</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">t</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">startsWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"#"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">t</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toSet</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">akka</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"#akka"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
          ви бажаєте отримати огляд використовуваного словника, перед тим. як
          поринути в саме приклад, подивіться на розділи <span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#core-concepts-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Ключові
              концепції</span></a><span class="Apple-converted-space"> </span>та<span
            class="Apple-converted-space"> </span><a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#defining-and-running-streams-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Визначення
              та виконання потоків</span></a> в документації, та потім
          повертайтесь до цього прикладу, щоб побачити всі частини разом в
          простому застосуванні-прикладі.</p>
      </div>
      <div class="section" id="transforming-and-consuming-simple-streams">
        <h2 id="Transforming_and_consuming_simple_streams" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Трансформація
          та споживання простих потоків</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Застосування-приклад,
          який ми розглядаємо, є простий потік Twitter, з якого ми бажаємо
          виділити певну інформацію, як для приклада шукаючи всі гачки твіттера
          до користувачів, що твітують щодо&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">#akka</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
          підготувати наше оточення через створення&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSystem</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializer</span></code>,
          що будуть відповідальні за матеріалізацію та виконання потоків, ми
          зараз створимо два неявні об'єкти:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"reactive-tweets"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializer</span></code><span
            class="Apple-converted-space"> опціонально може сприймати&nbsp;</span><span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializerSettings</span></code><span
            class="Apple-converted-space">, що може бути використаний для
            визначення властивостей матеріалізації</span>, як розмір буфера по
          замовчанню (також дивіться&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-rate.html#async-stream-buffers-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Буфери
              для асинхронних стадій</span></a>), використовуваний конвеєром
          диспечер, тощо. Вони можуть бути перевизначені за допомогою&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">withAttributes</span></code><span
            class="Apple-converted-space"> на</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Graph</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Давайте
          уявімо, що ми вже маємо готовий потік з твітів. В Akka це виражається
          як&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source[Out,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">M]</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Потоки
          завжди починають текти від&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source[Out,M1]</span></code><span
            class="Apple-converted-space">, потім вони продовжуються в елементах
          </span><span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow[In,Out,M2]</span></code><span
            class="Apple-converted-space">, або більш складних елементах графів,
            щоб кінець кінцем бути спожитими&nbsp;</span><span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink[In,M3]</span></code><span
            class="Apple-converted-space">&nbsp;</span>(поки ми ігноруємо
          параметри типів&nbsp; <span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">M1</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">M2</span></code><span
            class="Apple-converted-space"> та</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">M3</span></code>,
          вони не релевантні до типів елементів, що продукуються/споживаються
          ціма класами – вони є "матеріалізованими типами", про що ми
          поговоримо&nbsp;<a class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-quickstart.html#materialized-values-quick-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref"></span><span
              class="std std-ref">нижче</span></a>).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Операції
          повинні виглядати знайомими для кожного, хто використовував бібліотеку
          Scala Collections, однак вони оперують на потоках, та не на колекціях
          даних (що є дуже важлива різниця, бо деякі операції мають сенс тільки
          в потоках, та навпаки):</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Нарешті,
          щоб&nbsp;<span class="Apple-converted-space"></span><a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#stream-materialization-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">матеріалізувати&nbsp;</span></a><span
            class="Apple-converted-space"></span>та виконати обчислення потока,
          нам треба приєднати Flow до<span class="Apple-converted-space"> </span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">, що зробить </span>Flow працюючим.
          Найпростіший шлях зробити це є виклик&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">runWith(sink)</span></code><span
            class="Apple-converted-space"> на</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>.
          Для зручності вже визначені декілька загальних методів на <span class="Apple-converted-space"></span><a
            class="reference external" href="http://doc.akka.io/api/akka-stream-and-http-experimental/2.4.9/#akka.stream.scaladsl.Sink$"
            style="color: rgb(21, 169, 206); text-decoration: none;">об'єкті-компанйоні</a>
          <span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.
          Тепер давайте просто роздрукуємо кожного автора:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">або
          використовуючи скорочену версію (що визначена тільки для найбільш
          популярних Sink, таких як&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.fold</span></code><span
            class="Apple-converted-space"> та</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.foreach</span></code>):</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Матеріалізація
          та виконання потоку завжди потребує, щоб в неявному полі зору
          був&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Materializer</span></code>
          (або переданий явно, таким чином:<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">.run(materializer)</span></code>).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Повний
          фрагмент кода виглядає так:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"reactive-tweets"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="flattening-sequences-in-streams">
        <h2 id="Flattening_sequences_in_streams" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Сплющення
          послідовностей в потоках</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
          попередньому розділі ми робили з відношеннями 1:1 між
          елементами,&nbsp; що є найбільш загальним випадком, але інколи ми
          можемо захотіти відобразити з одного елемента до декількох елементів,
          та отримати "сплющений" потік, так само, як робить&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">flatMap</span></code><span
            class="Apple-converted-space"> з</span> Scala Collections. Щоб
          отримати сплющений потік з хештегів з нашого потоку твітів, ми можемо
          використати комбінатор<span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapConcat</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">hashtags</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapConcat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toList</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
          <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ім'я&nbsp;<span
              class="Apple-converted-space"></span><code class="docutils literal"
              style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">flatMap</span></code><span
              class="Apple-converted-space"> було навмисне уникнуте через його
              близькість до </span>for-осяжностей та композиції монад. Це
            проблематично з двох причин: перше, сплющення через конкатенацію є
            часто небажаним при обробці обмеженого потоку, через ризик глухого
            кута (де злиття є переважною стратегією), та, по-друге, закон монад
            не буде виконаний в нашій реалізації flatMap (через проблеми з
            життєспроможністю).</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Будь
            ласка зауважте, що&nbsp;<span class="Apple-converted-space"></span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">mapConcat</span></code><span
              class="Apple-converted-space"> потребує наданої функції для
              повертання обмеженої колекції </span>(<code class="docutils literal"
              style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">f:Out=&gt;immutable.Seq[T]</span></code>),
            в той час, коли&nbsp;<span class="Apple-converted-space"></span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">flatMap</span></code><span
              class="Apple-converted-space"> має оперувати з потоками, що
              надходять весь час.&nbsp;</span></p>
        </div>
      </div>
      <div class="section" id="broadcasting-a-stream">
        <h2 id="Broadcasting_a_stream" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Широкомовлення
          потоків</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Тепер,
          скажімо, ви бажаєте зберігти всі хештеги, а також всі імена авторів з
          цього одного живого потоку. Наприклад, ми хочемо записати всі зачіпки
          авторів до файлу на диск. Це означає, що ми маємо розділити потік-джерело
          на два потоки, що будуть обробляти запис ціх окремих файлів.&nbsp;</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Елементи,
          що можуть використовуватись для формування таких структурних
          розгалужень в Akka Streams&nbsp; називають "поєднаннями". Одне з
          таких, що ми використаємо в цьому прикладі, називається&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Broadcast</span></code>,
          та просто передає елементи на вхідному порті на всі свої вихідні
          порти.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
          Streams навмисне роділяє лінійні структури потоку (Flow), та
          нелінійні, як розгалуження (Graphs), щоб запропонувати найбільш
          зручний API для обох ціх випадків. Графи можуть виражати довільно
          складні потоки, ціною того, що вони не читаються так само дружньо, як
          перетворення колекцій.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Графи
          конструюються за допомогою&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code><span
            class="Apple-converted-space"> таким чином</span>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">writeAuthors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">???</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">writeHashtags</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Hashtag</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">???</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">g</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">writeAuthors</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapConcat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toList</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">writeHashtags</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">g</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Як
          ви можете бачити, в&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code><span
            class="Apple-converted-space"> ми використовуємо неявний побудовник
            графів</span><span class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">b</span></code><span
            class="Apple-converted-space"> щоб змінно конструювати граф з
            використанням</span><span class="Apple-converted-space"> </span><span
            class="Apple-converted-space">"оператора гачка" </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">~&gt;</span></code>
          (також читається є "з'єднати" або "через", або "до"). Оператор
          провадиться неявно через імпорт <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphDSL.Implicits._</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphDSL.create</span></code><span
            class="Apple-converted-space"> повертає&nbsp;</span><span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Graph</span></code>,
          в цьому випадку&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Graph[ClosedShape,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Unit]</span></code><span
            class="Apple-converted-space">, де&nbsp;</span><span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ClosedShape</span></code><span
            class="Apple-converted-space"> означає, що це </span><em style="font-style: italic;">повністю
            з'єднаний граф</em><span class="Apple-converted-space"> </span>або
          "замкнений" - немає непід'єднаних входів та виходів. Оскільки він
          замкнений, можливо трансформувати граф в&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
            class="Apple-converted-space"> з використанням</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph.fromGraph</span></code>.
          Виконуваний граф може бути виконаний через <code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
            class="Apple-converted-space"> для матеріалізації з нього потоку</span>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Обоє,&nbsp;<span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Graph</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
            class="Apple-converted-space"> є&nbsp;</span><span class="Apple-converted-space"></span><em
            style="font-style: italic;">незмінними, потік-безпечними, та вільно
            розподільними</em>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Граф
          також може мати одну з декількох інших форм, з одним або більше
          непід'єднаними портами. Маючи непід'єднані порти виражає граф, що
          є&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">частковим
            графом</em>. Концепція коло композиції та вкладання графів в великі
          структури виражена в деталях&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-composition.html#composition-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Модулярніть,
              композиція та ієрархія</span></a>. Також можливо обернути граф зі
          складними обчисленнями як Flow, Sink або Source, що буде виражене в
          деталях&nbsp;<span class="Apple-converted-space"></span><a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#constructing-sources-sinks-flows-from-partial-graphs-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Конструювання&nbsp;
              Source, Sink та Flow з часткових графів</span></a>.</p>
      </div>
      <div class="section" id="back-pressure-in-action">
        <h2 id="Back-pressure_in_action" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Зворотній
          тиск в дії</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Одна
          з головних переваг Akka Streams в тому, що вони&nbsp;<span class="Apple-converted-space"></span><em
            style="font-style: italic;">завжди</em><span class="Apple-converted-space">
          </span>пропагують інформацію зворотнього тиску від збирачів потоку
          Sink (підписчики) до їх
          джерел Source (публіканти). Це не опціональна можливість, та вона
          ввімкнена весь час. Щоб вивчити більше щодо протокола зворотнього
          тиску, що використовується в Akka Streams, та у всіх інших реалізаціях,
          сумісних з Reactive Streams, читайте <span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#back-pressure-explained-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Пояснення
              зворотнього тиску</span></a>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Типова
          проблема, з якою стикаються застосування, на кшталт цього (не
          використовуючи Akka Streams), полягає в тому, що вони не в змозі
          обробити вхідні дані досить швидко, або тимчасово, або за дизайном, та
          будуть починати буферизувати вхідні дані, доки не залишиться вільного
          простіру для буфера, що призведе до або<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutOfMemoryError</span></code><span
            class="Apple-converted-space">, або до іншої суттєвої деградації
            відповідальності сервера</span>. За допомогою Akka Streams
          буферизація може і мусить бути оброблена явно. Наприклад, якщо ми
          зацікавлені тільки в "<em style="font-style: italic;">найбільш останніх
            твітах, з буфером в 10 елементів</em>", це може бути виражене з
          використанням елементу<span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">buffer</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">slowComputation</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Елемент&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">buffer</span></code><span
            class="Apple-converted-space"> приймає явне та необхідне&nbsp;</span><span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy</span></code>,
          що визначає, як буфер повинен реагувати, коли надходить інший елемент,
          коли він вже заповнений. Запроваджені стратегії включають відкидання
          цілого буфера, сигналізацію про помилку, тощо. Переконайтесь, що
          обрали стратегію, що найкраще пасує до вашого випадка.&nbsp;</p>
      </div>
      <div class="section" id="materialized-values"><span id="materialized-values-quick-scala"></span>
        <h2 id="Materialized_values" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Матеріалізовані
          значення</h2>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">До
          тепер ми обробляли тільки дані з використанням Flows, та споживаючи їх
          в деякому різновиді зовнішнього Sink - було це друком значень, або
          зберіганням в деякій зовнішній системі. Однак іноді ми можемо бути
          зацікавлені в деякому значенні, що може бути отримане від
          матеріалізованого конвеєра обробки. Наприклад, ми бажаємо знати, як
          багато твітів ми обробили. Хоча це питання не таке очевидне, коли
          отримати відповідь для безкінечного потоку твітів (один зі шляхів
          відповісти не це запитання&nbsp; налаштуванні потоків може бути
          створення потоку з лічильників, описаних як "<em style="font-style: italic;">аж
            до тепер, </em>ми обробили N твітів"), але загалом можливо мати
          справу з кінечними потоками, та отримати гарний результат, такий, як
          загальний відлік елементів.&nbsp;</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Зпершу,
          давайте напишемо такий підрахунок елементів, з використанням&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.fold</span></code><span
            class="Apple-converted-space">, та побачимо, як будуть виглядати
            типи</span>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">count</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sumSink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">counterGraph</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">count</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sumSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">counterGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sum</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">c</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"Total tweets processed: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$c</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Зпершу,
          ми приготували повторно використовуваний&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">, що буде змінювати кожний надходящий
            твіт на значення</span><span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">1</span></code>.
          Ми використовуємо це, щоб скомбінувати це з&nbsp;<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.fold</span></code><span
            class="Apple-converted-space">, що буде підсумовувати всі</span><span
            class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Int</span></code><span
            class="Apple-converted-space"> елементи потоку, та робити результат
            доступним як</span><span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Int]</span></code>.
          Далі ми з'єднаємо потік&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">tweets</span></code><span
            class="Apple-converted-space"> до</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">count</span></code><span
            class="Apple-converted-space"> за допомогою</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">via</span></code>.
          Нарешті, ми з'єднаємо Flow до попередньо підготованого Sink з
          використанням<span class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">toMat</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Пам'ятаєте
          ці містичні типи параметрів на <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source[+Out,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">+Mat]</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow[-In,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">+Out,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">+Mat]</span></code><span
            class="Apple-converted-space"> та </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink[-In,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">+Mat]</span></code>?
          Вони представляють тип значень, чиї частини обробки повертаються, коли
          матеріалізовані. Коли ви з'єднаєте їх разом, ви можете явно
          скомбінувати їх материалізовані значення. В нашому прикладі ми
          використали попередньо визначену функцію&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code>,
          що каже реалізації турбуватись тільки про матеріалізований тип сцени,
          що наразі приєднаний зправа. Матеріалізований тип&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">sumSink</span></code><span
            class="Apple-converted-space"> є</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Int]</span></code><span
            class="Apple-converted-space">, та оскільки використовується&nbsp;</span><span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code>,
          результуючий&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
            class="Apple-converted-space"> також має параметр тиу&nbsp;</span><span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Int]</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цей
          крок&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">докі
            не </em><em>матеріалізує</em> конвеєр обробки, він тільки
          підоготував опис нашого Flow, що тепер під'єднаний до Sink, та до
          якого можна застосувати&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">run()</span></code>,
          як вказано в його типі :<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph[Future[Int]]</span></code>.
          Далі ми викликаємо&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
            class="Apple-converted-space">, що використовує неявний&nbsp;</span><span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializer</span></code><span
            class="Apple-converted-space"> для </span>матеріалізації та
          виконання Flow. Значення, що повертається викликом <code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
            class="Apple-converted-space"> </span>на<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph[T]</span></code><span
            class="Apple-converted-space"> є тип&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">T</span></code>. В
          нашому випадку цей тип&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Int]</span></code><span
            class="Apple-converted-space">, який, коли завершуєтсья, буде
            містити загальну довжину нашого потоку&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">tweets</span></code>.
          В випадку збою потоку, ця футура бавершиться з Failure.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
            class="Apple-converted-space"> може повторно використовуватись та
            матеріалізуватись декілька разів</span>, оскільки це тільки "схема"
          потока. Це означає, що якщо ми матеріалізуємо потік, наприклад, такий,
          що матеріалізує потік твітів на пртязі хвилини, матеріалізовані
          значення для ціх двох матеріалізацій будуть різними, як проілюстровано
          в цьому прикладі:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sumSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">counterRunnableGraph</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweetsInMinuteFromNow</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">contains</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">t</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sumSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// матеріалізуємо потік один раз вранці</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">morningTweetsCount</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">counterRunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// та ще раз ввечері, повторо використовуючи потік</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">eveningTweetsCount</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">counterRunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Багато
          елементів в&nbsp; Akka Streams провадять матеріалізовані значення, що
          можуть використовуватись для отримання або результатів обчислень, або
          керувати, що будуть обговорені в деталях в&nbsp;<span class="Apple-converted-space"></span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#stream-materialization-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Матеріалізації
              потока</span></a>. Підсумовуючи цей розділ, тепер ми знаємо, що
          відбуваєтсья за лаштунками, коли ми виконуємо ці однорядкові програми,
          що еквівалентні до багаторядкових версій вище:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">t</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sumSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">runWith()</span></code><span
              class="Apple-converted-space"> є зручним методом, що автоматично
              ігнорує матеріалізоване значення любих інших стадій, за винятком
              доданої самою&nbsp;</span><span class="Apple-converted-space"></span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">runWith()</span></code>.
            В прикладі вище він транслює до&nbsp;<span class="Apple-converted-space"></span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code><span
              class="Apple-converted-space">, як комбінатора для
              матеріалізованих значень</span>.</p>
        </div>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Принципи
      побудови Akka Streams</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Це
      зайняло довгий час, докі ми не були досить задоволені виглядом та
      відчуттям від API та архитектури реалізації, та доки не були направлені
      інтуіцією фази розробки, було багато пошукових досліджень. Цей розділ
      деталізує добутки та кодує їх в набір принципів, що виникали в цьому
      процесі.&nbsp;</p>
    <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
      <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
      <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Як
        детально описано у вступі, майте не увазі, що Akka Streams API повністю
        відділене від інтерфейсів Reactive Streams, що є тільки деталлю
        реалізації, як передавати дані потока між окремими стадіями обробки.</p>
    </div>
    <div class="section" id="what-shall-users-of-akka-streams-expect" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="What_shall_users_of_Akka_Streams_expect_" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Що
        можуть очікувати користувачі Akka Streams?</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        побудовано на свідоммоу рішені запропонувати API, що є мінімальними та
        узгодженими — на відміну від простих та інтуітивних. Кредо полягає в
        тому, що ми обираємо явність перед магією, та якщо ми пропонуємо
        можливість, вона має робити завжди, без винятків. Інший спосіб сказати
        те саме, це те, що ми мінімізували число правил, що має вивчити
        користувач, замість намагання утримати правила близькими до того, що, за
        нашими міркуваннями, очікує користувач.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Маючи
        це, наступні принципи були реалізовані в Akka Streams:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;">всі можливості явні в API, ніякої
              магії</li>
            <li style="line-height: 18px;">виняткова конпонованість:
              зкомбіновані шматки зостаються функцією кожної частини</li>
            <li style="line-height: 18px;">виключна модель домена розподіленох
              обмеженої обробки потоків</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
        означає, що ми провадимо всі інструменти, потрібні для виразу любих
        топологій обробки потоків, що ми моделюємо всі основні аспекти цього
        домену (зворотній тиск, буферизація, трансформації, відновлення після
        збою, тощо), та що те, що будує користувач, буде повторно використане в
        більшому контексті.</p>
      <div class="section" id="akka-streams-does-not-send-dropped-stream-elements-to-the-dead-letter-office">
        <h3 id="Akka_Streams_does_not_send_dropped_stream_elements_to_the_dead_letter_office"
          style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Akka
          Streams не надсилають пропащі елементи потоку до офісу загублених
          листів</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Одне
          віжливе слідоцтво з запропонування тільки&nbsp; можливостей, на які
          можна покладатись, є те обмеження, що бібліотека Akka Streams не може
          запевнити, що всі&nbsp; об'єкти, передані на топологію обробки, будуть
          оброблені. Елементи можуть загубитись через декілька причин:</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>
            <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
              <li style="line-height: 18px;">звичайний користувацький код може
                спожити один елемент на етапі<span class="Apple-converted-space">
                </span><cite style="font-style: normal;">map(...)</cite><span class="Apple-converted-space">,
                  та спродукувати повністі інший як результат</span></li>
              <li style="line-height: 18px;">загальні операції з потоками
                навмисне відкидають елементи, тобто це
                take/drop/filter/conflate/buffer/…</li>
              <li style="line-height: 18px;">збій потоку знесе потік без
                очікування завершення обробки, та всі підвішені елементи будуть
                відкинуті</li>
              <li style="line-height: 18px;">завершення потоку буде просувати
                догори (тобто, від оператора&nbsp;<span class="Apple-converted-space"></span><cite
                  style="font-style: normal;">take</cite>), що призаеде до
                завершення обробки горішніх кроків, без обробки всіх своїх
                вхідних елементів</li>
            </ul>
          </div>
        </blockquote>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
          означає, що надсилання JVM о'бєктів в потік, що має бути очищений,
          буде потребувати від користувача перевірки, що це відбувається за
          межами механізмів Akka Streams (тобто, очищаючи їх після таймаута, або
          коли їх результати переглянуті на виході потоку, або використовуючи
          інші важелі, як фіналізація, тощо).</p>
      </div>
      <div class="section" id="resulting-implementation-constraints">
        <h3 id="Resulting_Implementation_Constraints" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Отримані
          обмеження реалізації</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Компонованість
          тягне за собою повторне використання часткових топологій потоку, що
          веде нас до піднесеного підходу опису потоків даних як (часткових)
          графів, що можуть діяти як композитні джерела, потоки (відомі як
          канали) та приймачі даних. Ці будівельні блоки потім будуть вільно
          розподілені, з можливістю скомбінувати їх, щоб сформувати більші графи.
          Презентація ціх шматків, таким чином, мусить бути незмінним планом, що
          матеріалізується в явний спосіб, щоб почати обробку потоку. Результуючий
          рушій обробки потоків потім є незмінним, в сенсі що він має сталу
          топологію, що описана в схемі. Динамічні мережі мають бути
          змодельовані з явним використоанням інтерфейсів Reactive Streams для
          підключення різних рушиїв разом.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Процес
          матеріалізації часто буде створювати специфічні об'єкти, що корисні
          для взаємодії з рушієм обробки під час роботи, наприклад, для її
          завершення, або для виділення метрик. Це означає, що функція
          матеріалізації продукує результат під назвою&nbsp;<span class="Apple-converted-space"></span><em
            style="font-style: italic;">матеріалізоване значення графа</em>.</p>
      </div>
    </div>
    <div class="section" id="interoperation-with-other-reactive-streams-implementations"
      style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Interoperation_with_other_Reactive_Streams_implementations" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Взаємодія
        з іншими реалізаціями Reactive Streams</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Потоки
        Akka Streams повністю реалізують специфікацію Reactive Streams, та
        взаємодіють з усіма іншими відповідними реалізаціями. Ми обрали повністю
        відділити інтерфейси Reactive Streams від користувацького API, оскільки
        ми розглядаємо їх як SPI, що не нецілені на кінцевого споживача. Щоб
        отримати&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space"> або</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
          class="Apple-converted-space"> з топології</span> Akka Stream, має
        використовуватись відповідний елемент<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.asPublisher</span></code><span
          class="Apple-converted-space"> або</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.asSubscriber</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Всі
        процесори потока Processor, що продукуються по замовченню матеріалізацією
        Akka Streams, обмежені мати єдиний Subscriber, додаткові підписчики
        будуть відхилені. Причиною для цього є те, що топології потоків, що
        описуються з використанням нашого DSL, ніколи не потребують від сторони
        паблішера поведінки розгалуження, всі розгалуження робляться з
        використанням явних елементів, як<span class="Apple-converted-space"> </span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Broadcast[T]</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
        означає, що має використовуватись&nbsp; <span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.asPublisher(true)</span></code><span
          class="Apple-converted-space">&nbsp;</span>(для підтримки
        розгалуження), де потрібна широкомовна поведінка для взаємодії з іншими
        реалізаціями Reactive Streams.</p>
    </div>
    <div class="section" id="what-shall-users-of-streaming-libraries-expect" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="What_shall_users_of_streaming_libraries_expect_" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Що
        мають очікувати користувачі поточної бібліотеки?</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ми
        очікуємо, що на базі Akka Streams будуть побудовані бібліотеки, та
        фактично Akka HTTP є одна з таких прикладів, що живе в самому проекті
        Akka. Щоб дозволити користувачам мати вигоду від принципів, що описані
        вище в Akka Streams, встановлені наступні правила:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;">бібліотеки повинні провадити своїх
              користувачів повторно використовуваними частинами, тобто,
              показувати фабрики, що повертають графи, дозволяючи повну
              компонованість</li>
            <li style="line-height: 18px;">бібліотеки можуть опціонально та додатково
              провадити можливості, що споживають та матеріалізують графи</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Міркування
        поза першим правилом в тому, що компонованість буде зруйнована, якщо
        різні бібліотеки тільки приймають графи, та очікується, що вони
        матеріалізують їх: використання двох з них разом буде неможливим, бо
        матеріалізація може відбутись тільки один раз. Як наслідок,
        функціональність бібліотеки має бути виражена так, що матеріалізація
        могла бути виконана користувачем, за межами контролю бібліотеки.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Друге
        правило дозволяє бібліотеці додатково провадити гарний цукор для
        загальних випадків, прикладом чого є Akka HTTP API, що провадить метод<span
          class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">handleWith</span></code><span
          class="Apple-converted-space"> для зручної матеріалізації</span>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Один
          важливий наслідок з цьогов полягає в тому, що опис повтороно описаного
          потоку не може бути прив'язаний до “живих” ресурсів, любі вз'язки до
          розміщення таких ресурсів мають бути відкладені до часу матеріалізації.
          Прикладами "живих" ресурсів є вже існуючі TCP з'єднання, широкомовний
          Publisher, тощо; TickSource не підпадає в цю категорію, якщо таймер
          створений тільки під чс матеріалізації (як це є в випадку нашої
          реалізації).</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Виключення
          з цього правила повинні бути гарно виважені та ретельно
          задокументовані. </p>
      </div>
      <div class="section" id="id1">
        <h3 id="Resulting_Implementation_Constraints" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Отримані
          обмеження реалізації</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
          Streams має дозволяти виражати любу утіліту обробки в термінах
          незмінного плана. Найбільш загальними будівельними блоками є: </p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>
            <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
              <li style="line-height: 18px;">Source: дещо, з тільки одним вихідним
                потоком</li>
              <li style="line-height: 18px;">Sink: дещо, з тільки одним вхідним
                потоком</li>
              <li style="line-height: 18px;">Flow: дещо, з тільки рівно одним
                входом та виходом</li>
              <li style="line-height: 18px;">BidiFlow: дещо, з точно двома
                вхідними, та двома вихідними потоками, що концептуально
                поводиться як два Flows в різних напрямках</li>
              <li style="line-height: 18px;">Graph: запакована топологія обробки
                потоку, що показує певний набір вхідних та вихідних портів, що
                характеризовані як об'єкт типа<span class="Apple-converted-space">
                </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">Shape</span></code>.</li>
            </ul>
          </div>
        </blockquote>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Джерело,
            що видає потік потоків, є все ще звичайне джерело Source, тип
            елементів, які воно продукує, не відіграє ролі в статичній топології
            потоку, що він виражає.</p>
        </div>
      </div>
    </div>
    <div class="section" id="the-difference-between-error-and-failure" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="The_difference_between_Error_and_Failure" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Різниця
        між помилками Error та відмовами Failure</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Початкова
        точка цієї дискусії є<span class="Apple-converted-space"> </span><a class="reference external"
          href="http://www.reactivemanifesto.org/glossary#Failure" style="color: rgb(21, 169, 206); text-decoration: none;">визначення,
          надане Reactive Manifesto</a>. Переведене на потоки, це означає, що
        помилка (error) допустима в потоці як нормальний елемент даних, тоді як
        відмова означає, що сам потік схибив та склався. В конкретних термінах,
        на рівні елементів даних інтерфейса Reactive Streams (включаючи помилки)
        сигналюєтсья через&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onNext</span></code><span
          class="Apple-converted-space">, тоді як відмови підіймають
          сигнал&nbsp;</span><span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onError</span></code>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">На
          жаль, ім'я метода для повідомлення про&nbsp;<span class="Apple-converted-space"></span><em
            style="font-style: italic;">відмову</em><span class="Apple-converted-space">
          </span>до Subscriber назване<span class="Apple-converted-space"> </span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
            class="Apple-converted-space"> </span>з історичних причин. Завжди пам'ятайте,
          що інтерфейси Reactive Streams (Publisher/Subscription/Subscriber)
          моделюють низькорівневу інфраструктуру для передачі потоків між
          одиницями виконання, та помилки на цьоу рівні є в точності відмови,
          про які ми кажемо на вищому рівні, що можелюється в Akka Streams.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Є
        тільки обмежена підтримка для трактування&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
          class="Apple-converted-space"> в</span> Akka Streams, порівняно з
        операторами, що доступні для трансформації елементів даних,&nbsp; що є навмисним
        в дусі попереднього параметра.&nbsp; Оскільки&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
          class="Apple-converted-space"> сигналізує, що потік згортається, його
          семантика доставки не така сама, як для завершення потоку</span>:
        стадії трансформації любого сорту буде тільки згортатись разом з потоком,
        можливо все ще зберігаючи елементи в неявних і явних буферах. Це означає,
        що елементи даних, випущені до збою, все що можуть бути втрачені,
        якщо&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
          class="Apple-converted-space"> наздожене їх</span>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Здатність
        збоїв просуватись скоріше, ніж елементи даних, є базовою для зривання
        потоків, що є під зворотнім тиском — особливо оскільки зворотній тиск
        може бути в режимі збоя (тобто, відключаючи буфери нагору, що потім
        перериваються, бо не можуть робити більше нічого іншого, або в разі
        виникнення глухого блокування).</p>
      <div class="section" id="the-semantics-of-stream-recovery">
        <h3 id="The_semantics_of_stream_recovery" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Семантика
          відновлення потока</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Елемент
          відновлення (тобто люба трансформація, що абсорбує сигнал&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
            class="Apple-converted-space">, та перетворює це на можливо більше
            елементів даних, за якими слідує нормальне завершення потока</span>)
          діє як перегородка, що обмежує згортання потоку до даного регіону
          топології потоку. В згорнутому регіоні буферизовані елементи можуть
          бути втрачені, але зовні збій не має впливу.&nbsp;</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
          робить в тому ж стилі як і вираз&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">try</span></code>–<code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">catch</span></code>:
          маркується регіон, в якому перехоплюються виключення, але точний
          розмір кода, що був пропущений в цьому регіоні в разі збою, не може
          бути визначений точно&nbsp; — має значення розташування тверджень.</p>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Основи
      роботи з Flows</h1>
    <div class="section" id="core-concepts" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="core-concepts-scala"></span>
      <h2 id="Core_concepts" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Ключові
        концепції</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        Streams є бібліотекою для обробки та передачі послідовності елементів з
        використанням обмеженого простору буферів. Ця остання властивість є те,
        на що ми посилаємось як на&nbsp;<span class="Apple-converted-space"></span><em
          style="font-style: italic;">необмеженість</em><span class="Apple-converted-space">,
          та є визначною властивістю </span>Akka Streams. Перекладаючи на
        повсяденну мову це можне виразити як ланцюжок (або, як ми побачимо
        пізніше, графи) оброблюючих сутностей, кожна виконується окремо (та,
        можливо, конкурентно) від інших, при цьому беферизуючи тільки обмежене
        число число елементів в кожний окремий момент. Ця властивість обмежених
        буферів є одною з різниць від моделі акторів, де кожний актор зіичайно
        необмежену поштоку скриньку, або обмежену з відкиданням. Сутності
        обробки Akka Stream мають обмежені "поштові скриньки", що не гублять
        елементи.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перед
        тим, як ми рушимо далі, давайте визначимо деякі базові терміни, що
        будуть використовуватись на протязі всієї документацїі:</p>
      <dl class="docutils" style="margin-bottom: 18px;">
        <dt style="line-height: 18px; font-weight: bold;">Потік (Stream)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Активний процес, що
          включає пересування та трансформацію даних.</dd>
        <dt style="line-height: 18px; font-weight: bold;">Елемент (Element)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Елемент є одницею
          обробки потоків. Всі операції трансформацїй та передачі елементів від
          вхідного до вихідного потоків. Розміри буферів завжди виражені як
          число елементів, незалежно від дійсного розміру елементів.&nbsp;</dd>
        <dt style="line-height: 18px; font-weight: bold;">Зворотній тиск
          (Back-pressure)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Засіб для керування
          потоком, шлях для споживачів даних повідомляти прод'юсера щодо власної
          доступності, ефективно уповільнюючи прод'юсера апстриму, щоб
          задовільнити власну швидкість споживання. В контексті Akka Streams
          зворотній тиск завжди розуміється як&nbsp;<span class="Apple-converted-space"></span><em
            style="font-style: italic;">неблокуючий&nbsp;</em><span class="Apple-converted-space"></span>та&nbsp;<span
            class="Apple-converted-space"></span><em style="font-style: italic;">асинхронний</em>.</dd>
        <dt style="line-height: 18px; font-weight: bold;">Неблокуючий</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Спосіб, в який певна
          операція не призупиняє прогрес викликаючого потоку, навіть якщо це
          займає довгий час, щоб завершити запитану операцію.</dd>
        <dt style="line-height: 18px; font-weight: bold;">Граф</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Опис топології обробки
          потока, визначена як шляхи, якими мають слідувати елементи під час
          обробки потоку.&nbsp;</dd>
        <dt style="line-height: 18px; font-weight: bold;">Стадія обробки</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Загальне ім'я для всіх
          будівельних блоків, що складають Граф. Приклади стадії обробки будуть
          операції, такі як&nbsp;<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">map()</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">filter()</span></code>власні&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space"> </span>та поєднання графів, такі,
          як&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
            class="Apple-converted-space"> або</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Broadcast</span></code>.
          Для повного списку вбудованих стадій обробки дивіться<span class="Apple-converted-space">
          </span><a class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#stages-overview-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Огляд
              вбудованих стадій та їх семантика</span></a></dd>
      </dl>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Коли
        ми кажемо про&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">асинхронний,
          неблокуючий зворотній тиск, </em><span class="Apple-converted-space">ми
          маємо на увазі, що стадії обробки, доступні в </span>Akka Streams, не
        будуть використовувати блокуючі виклики, але асинхронну передачу
        повідомлень, для обміну повідомленнями один з одним, та вони будуть
        використовувати асинхронні механізми для уповільнення швидкого
        прод'юсера без блокування потока. Цей дизайн дружній до пулів потоків,
        оскільки сутності, що мають чекати (швидкий прод'юсер, що очікує
        повільного споживача) не будуть блокувати потік, але можуть повернути
        його для подальшого використання в пул потоків. </p>
    </div>
    <div class="section" id="defining-and-running-streams" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="defining-and-running-streams-scala"></span>
      <h2 id="Defining_and_running_streams" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Визначення
        та виконання потоків</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Лінійна
        обробка каналів може бути виражена в Akka Streams з використанням
        наступних головних абстракцій:</p>
      <dl class="docutils" style="margin-bottom: 18px;">
        <dt style="line-height: 18px; font-weight: bold;">Джерело (Source)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Стадія обробки, що
          має&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">рівно
            один вхід</em>, що випускає елементи даних, коли наступні стадій
          обробки даунстриму готові отримати їх.</dd>
        <dt style="line-height: 18px; font-weight: bold;">Приймач (Sink)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Стадія обробки з&nbsp;<span
            class="Apple-converted-space"></span><em style="font-style: italic;">рівно
            одним входом</em>, що запитує та сприймає елементи даних, можливо
          уповільнюючи прод'юсера елементів апстріму</dd>
        <dt style="line-height: 18px; font-weight: bold;">Потік (Flow)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Стадія обробки, що
          має&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">точно
            один вхід та вихід</em>, що поєднує свій ап- та даунстрім, трансформуючи
          елементи даних, що проходять через нього.&nbsp;</dd>
        <dt style="line-height: 18px; font-weight: bold;">Виконуваний граф (RunnableGraph)</dt>
        <dd style="line-height: 18px; margin-left: 9px;">Flow, що має
          під'єднаними обоє кінці до Source та Sink відповідно, та готовий до<span
            class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">run()</span></code>.</dd>
      </dl>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Можливо
        приєднати&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space"> </span>до<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">, що утворить композитне джерело, та
          також можливо поставити</span><span class="Apple-converted-space"> </span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>
        перед<span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">, щоб отримати новий приймач</span>.
        Після того, як потік відповідно завершений, маючи обоє, джерело та
        приймач, він буде представлений типом<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>,
        що вказує, що він готовий до виконання.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Важливо
        пам'ятати, що навіть після конструювання&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space"> через поєднання всіх: джерела, приймача,
          та всіх стадій обробки, </span>дані не будть текти по ньому, доки він
        не буде матеріалізований. Матеріалізація є процесом розміщення всіх
        ресурсів, потрібних для виконання обчислень, описаних в Graph (в Akka
        Streams це часто буде включати запуск акторів). Дякуючи тому, що Flows
        просто описує конвеєра обробки, вони є&nbsp;<span class="Apple-converted-space"></span><em
          style="font-style: italic;">незмінними, потоко-безпечними, та вільно
          розподіленими</em>, що означає, що, наприклад, безпечно поділяти та
        надсилати їх між акторами, щоб один актор підготував обробку, та потім
        матеріалізувати його в деякій повністю інішій частині кода.&nbsp;</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// приєднуємо Source до Sink, отримуючи RunnableGraph</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnable</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// матеріалізуємо потік, та отримуємо значення FoldSink</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runnable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Після
        виконання (матеріалізації)&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph[T]</span></code><span
          class="Apple-converted-space"> </span>ми отримуємо назад
        матеріалізоване значення типу T. Кожна стадія обробки може продукувати
        матеріалізоване значення, і це є відповідальністю користувача
        скомбінувати їх в новий тип. В прикладі вище ми використовували&nbsp;<span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">toMat</span></code><span
          class="Apple-converted-space">, щоб вказати, що ми бажаємо
          трансформувати матеріалізоване значення джерела та приймача, та ми
          використали зручну функцію&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code><span
          class="Apple-converted-space">, щоб сказати, що ми зацікавлені тільки
          в матеріалізованому значенні приймача. В нашому прикладі&nbsp;</span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FoldSink</span></code><span
          class="Apple-converted-space"> матеріалізує значення типа&nbsp;</span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space">, що буде представляти результат процесу
          згортання потоку. Загалом, потік може показувати декілька
          матеріалізованих значень, але є досить загальним цікавитись тільки
          значеннями джерела або приймача потока. З цієї причини є зручний метод
          з назвою&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runWith()</span></code><span
          class="Apple-converted-space">, доступний для&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> або</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">, що вимагає відповідно, наданного&nbsp;</span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>(щоб робити з<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>),&nbsp;<span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>(щоб робити з<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>),
        або обох, <span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>(щоб виконувати<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>,
        оскікльки жодний ще не під'єднаний).</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// матеріалізуємо потік, отримуючи матеріалізоване значення Sinks</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Треба
        зауважити, що оскільки стадії обробки є&nbsp;<span class="Apple-converted-space"></span><em
          style="font-style: italic;">незмінними</em>, їх з'єднання повертає
        нову стадію обробки, замість модифікації існуючого примірника, так що
        при конструюванні довгих потоків пам'ятайте присвоювати нове значення до
        змінної, або виконати його:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// ніякого ефекту на source, оскільки воно незмінне</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// 55</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zeroes</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// повертає нове Source[Int], з доданим `map()`</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">zeroes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// 0</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">По
          замовчанню елементи Akka Streams підтримують <strong>рівно одну</strong><span
            class="Apple-converted-space"></span> стадію обробки даунстріму.
          Створення розгалуження (що підтримує декілька стадій обробки
          даунстріму) є явною можливістю обробки, що дозволяє елементам потоку
          по замовчанню бути менш складними та більш ефективними. Це також
          дозволяє більшу гнучкість щодо того,&nbsp;<span class="Apple-converted-space"></span><em
            style="font-style: italic;">як точно&nbsp;</em><span class="Apple-converted-space"></span>обробляти
          мультикастні сценарії, через провадження іменованих елементів
          розгалуження, таких, як шикрокомовлення (сигналізує всім елементам
          даунстріму) або баланс (сигналізує одному з доступних елементів
          даунстріму).</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
        прикладі вище ми використовували метод&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runWith</span></code><span
          class="Apple-converted-space"> </span>, що обоє, матеріалізує потік,
        та повертає матеріалізоване значення наданого приймача або потоку.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Оскільки
        потік може бути матеріалізований декілька разів, матеріалізоване
        значення також буде обчислюватись по новій для кожної такої
        матеріалізації, що зазвичай призведе до різних значень, що будуть
        повертатись кожного разу. В прикладі нижче ми створюємо два робочих
        матеріалізованих примірники потоку, що ми описали в змінній&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runnable</span></code>,
        та обоє матеріалізації дають нам різні&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space"> з мапи, навіть не зважаючи на те, що ми
          використовували однаковий&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">sink</span></code><span
          class="Apple-converted-space"> для посилання на футуру</span>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// з'єднуємо Source до Sink, отримуючи RunnableGraph</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnable</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// отримати матеріалізоване значення FoldSink</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runnable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sum2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runnable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// sum1 та sum2 є різними Future!</span></span></li></ol></pre>
        </div>
      </div>
      <div class="section" id="defining-sources-sinks-and-flows">
        <h3 id="Defining_sources__sinks_and_flows" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Визначення
          джерел, приймачів та потоків</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Об'єкти&nbsp;<span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space"> визначають різні шляхи для створення
            джерел та приймачів елементів. наступні приклади показують деякі з
            найбільш корисних конструкцій</span> (посилайтесь на документацію
          API щодо додаткових деталей):</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Створює джерело з Iterable</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Створює джерело з Future</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromFuture</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">successful</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Hello Streams!"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Створює джерело з єдиного елемента</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"only one element"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Порожнє джерело</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Приймач, що згортає потік та повертає Future</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// загального результата як матеріалізоване значення</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Приймач, що повертає Future в якості матеріалізованого значення,</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// що містить перший елемент потоку</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Sink, що споживає потік, ні чого не роблячі з елементами</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Sink, що виконує виклик-побічний ефект для кожного елемента of the stream</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Є
          різноманитні шляхи зв'язати різні частини потоку, наступні приклади
          показують деякі з доступних опцій:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Явно створити та підключити Source, Sink та Flow</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">6</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Починаємо з Source</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">6</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Починаємо з Sink</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">6</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Широкомовлення до приймачів один за одним</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">otherSink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">alsoTo</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">6</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">otherSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="illegal-stream-elements">
        <h3 id="Illegal_stream_elements" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Illegal
          stream elements</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          accordance to the Reactive Streams specification (<a class="reference external"
            href="https://github.com/reactive-streams/reactive-streams-jvm#2.13"
            style="color: rgb(21, 169, 206); text-decoration: none;">Rule 2.13</a>)
          Akka Streams do not allow<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">null</span></code><span
            class="Apple-converted-space">&nbsp;</span>to be passed through the
          stream as an element. In case you want to model the concept of absence
          of a value we recommend using<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">scala.Option</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">scala.util.Either</span></code>.</p>
      </div>
    </div>
    <div class="section" id="back-pressure-explained" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="back-pressure-explained-scala"></span>
      <h2 id="Back-pressure_explained" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Back-pressure
        explained</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        Streams implement an asynchronous non-blocking back-pressure protocol
        standardised by the<span class="Apple-converted-space">&nbsp;</span><a class="reference external"
          href="http://reactive-streams.org/" style="color: rgb(21, 169, 206); text-decoration: none;">Reactive
          Streams</a>specification, which Akka is a founding member of.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        user of the library does not have to write any explicit back-pressure
        handling code — it is built in and dealt with automatically by all of
        the provided Akka Streams processing stages. It is possible however to
        add explicit buffer stages with overflow strategies that can influence
        the behaviour of the stream. This is especially important in complex
        processing graphs which may even contain loops (which<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">must</em><span class="Apple-converted-space">&nbsp;</span>be
        treated with very special care, as explained in<span class="Apple-converted-space">&nbsp;</span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#graph-cycles-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Graph
            cycles, liveness and deadlocks</span></a>).</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        back pressure protocol is defined in terms of the number of elements a
        downstream<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
          class="Apple-converted-space">&nbsp;</span>is able to receive and
        buffer, referred to as<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">demand</span></code>.
        The source of data, referred to as<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>in Reactive Streams
        terminology and implemented as<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>in Akka Streams, guarantees
        that it will never emit more elements than the received total demand for
        any given<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          Reactive Streams specification defines its protocol in terms of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code>.
          These types are<strong style="font-weight: bold; color: rgb(255, 255, 255);">not</strong><span
            class="Apple-converted-space">&nbsp;</span>meant to be user facing
          API, instead they serve as the low level building blocks for different
          Reactive Streams implementations.</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
          Streams implements these concepts as<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>(referred to as<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Processor</span></code><span
            class="Apple-converted-space">&nbsp;</span>in Reactive Streams) and<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>without exposing the
          Reactive Streams interfaces directly. If you need to integrate with
          other Reactive Stream libraries read<span class="Apple-converted-space">&nbsp;</span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-integrations.html#reactive-streams-integration-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Integrating
              with Reactive Streams</span></a>.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        mode in which Reactive Streams back-pressure works can be colloquially
        described as "dynamic push / pull mode", since it will switch between
        push and pull based back-pressure models depending on the downstream
        being able to cope with the upstream production rate or not.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
        illustrate this further let us consider both problem situations and how
        the back-pressure protocol handles them:</p>
      <div class="section" id="slow-publisher-fast-subscriber">
        <h3 id="Slow_Publisher__fast_Subscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Slow
          Publisher, fast Subscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is the happy case of course – we do not need to slow down the
          Publisher in this case. However signalling rates are rarely constant
          and could change at any point in time, suddenly ending up in a
          situation where the Subscriber is now slower than the Publisher. In
          order to safeguard from these situations, the back-pressure protocol
          must still be enabled during such situations, however we do not want
          to pay a high penalty for this safety net being enabled.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          Reactive Streams protocol solves this by asynchronously signalling
          from the Subscriber to the Publisher<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Request(n:Int)</span></code><span
            class="Apple-converted-space">&nbsp;</span>signals. The protocol
          guarantees that the Publisher will never signal<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">more</em><span class="Apple-converted-space">&nbsp;</span>elements
          than the signalled demand. Since the Subscriber however is currently
          faster, it will be signalling these Request messages at a higher rate
          (and possibly also batching together the demand - requesting multiple
          elements in one Request signal). This means that the Publisher should
          not ever have to wait (be back-pressured) with publishing its incoming
          elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          we can see, in this scenario we effectively operate in so called
          push-mode since the Publisher can continue producing elements as fast
          as it can, since the pending demand will be recovered just-in-time
          while it is emitting elements.</p>
      </div>
      <div class="section" id="fast-publisher-slow-subscriber">
        <h3 id="Fast_Publisher__slow_Subscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Fast
          Publisher, slow Subscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is the case when back-pressuring the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>is required, because the<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>is not able to cope with
          the rate at which its upstream would like to emit data elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Since
          the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>is not allowed to signal
          more elements than the pending demand signalled by the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code>,
          it will have to abide to this back-pressure by applying one of the
          below strategies:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">not generate elements, if it is able to
            control their production rate,</li>
          <li style="line-height: 18px;">try buffering the elements in a<span class="Apple-converted-space">&nbsp;</span><em
              style="font-style: italic;">bounded</em><span class="Apple-converted-space">&nbsp;</span>manner
            until more demand is signalled,</li>
          <li style="line-height: 18px;">drop elements until more demand is
            signalled,</li>
          <li style="line-height: 18px;">tear down the stream if unable to apply
            any of the above strategies.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          we can see, this scenario effectively means that the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>will<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">pull</em><span class="Apple-converted-space">&nbsp;</span>the
          elements from the Publisher – this mode of operation is referred to as
          pull-based back-pressure.</p>
      </div>
    </div>
    <div class="section" id="stream-materialization" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="stream-materialization-scala"></span>
      <h2 id="Stream_Materialization" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Матеріалізація
        потоків</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">При
        конструюванні потоків та графів в Akka Streams думайте про них як про
        підготовку схеми, плана виконання. Матеріалізація потока є процесом
        прийняття опису потока (графа), та розташування всіх потрібних ресурсів,
        що він потребує для того, щоб робити. В випадку Akka Streams це часто
        означає запуск акторів, що виконують обробку, але не обмежується цім —
        це також може означати відкриття файлів або сокетних з'єднань, таке
        інше&nbsp; — в залежності від того, що потребує потік.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Матеріалізація
        вмикається на так званих "термінальних операціях". Більш конкретно, це
        вклчає різні форми методів&nbsp; <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runWith()</span></code><span
          class="Apple-converted-space">, визначені на елементах&nbsp;</span><span
          class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>, а
        також як невелика кількість специфічного синтаксичного цукру для
        добре-знаних приймачах, такі, як&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runForeach(el</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">=&gt;</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">...)</span></code><span
          class="Apple-converted-space">&nbsp;</span>(що є псевдонимом до <code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runWith(Sink.foreach(el</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">=&gt;</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">...))</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Матеріалізація
        наразі виконується синхронно на потоці матеріалізації. Справжня обробка
        потоків виконується акторами, що запускаються під час матеріалізації
        потоків, та будуть виконуватись на пулі потоків, на якому вони
        сконфігуровані виконуватись - що, по замовчанню, є налаштування
        диспечерів в&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MaterializationSettings</span></code><span
          class="Apple-converted-space"> під час конструювання&nbsp; </span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorMaterializer</span></code>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Повторне
          використання&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">примірників
            стадій </em><span class="Apple-converted-space"></span>лінійних
          обчислень&nbsp; (Source, Sink, Flow) в композитних графах є легальним,
          що буде матеріалізувати їх декілька разів.</p>
      </div>
      <div class="section" id="operator-fusion">
        <h3 id="Operator_Fusion" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Сплав
          операторів</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
          Streams 2.0 містить початкову версію підтримки сплаву птокових
          операцїй. Це означає, що кроки обробки потоку або графу можуть бути
          виконані на тому ж акторі, та має три наслідки:</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>
            <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
              <li style="line-height: 18px;">запуск потоку може зайняти довше,
                ніж раніше, через виконання алгоритму сплавки</li>
              <li style="line-height: 18px;">передання елементів від однієї до
                стадії до наступної є більш швидким між сплавленими стадіями,
                через уникання накладних розходів асинхронних повідомлень</li>
              <li style="line-height: 18px;">сплавлені процеси стадій обробки
                більше роблять паралельно один до одного, що означає, що для
                кожної частини використовується тільки одне ядро CPU</li>
            </ul>
          </div>
        </blockquote>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перша
          точка, що може бути знайдена пре-сплавкою, та потім повторно
          використана, є схема потоку, що змальована нижче:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Fusing</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">*</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">500</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fused</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Fusing</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">aggressive</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromIterator</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fused</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">take</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
          збалансувати ефекти другої та третьої точок, ви маєте вручну вставити
          асинхронні обмеження в ваші потоки та графи, шляхом додавання&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Attributes.asyncBoundary</span></code><span
            class="Apple-converted-space"> з використанням методу&nbsp;</span><span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">async</span></code><span
            class="Apple-converted-space"> на</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space"> </span>та<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space"> на частини, що буде комунікувати з
            залишком графа в асинхронній манері</span>.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">async</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
          цьому прикладі ми створюємо два регіони в потоці, що будуть
          виконуватись в одному акторі кожний — вважаючи, що додавання та
          множення цілих є вкрай коштовною операцією, це буде призводити до
          приросту продуктивності, оскікльки два CPU можуть обробляти ці задачі
          паралельно. Є важливим зауважити, що асинхронні межі не є місціми
          сингулярності в потоці, де елементи передаються асинхронно (як в інших
          поточних бібліотеках), але, замість цього, атрибути завжди роблять
          через додавання інформацїі до графу потока, що був побудований до цієї
          точки:</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/asyncBoundary1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/asyncBoundary1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/asyncBoundary1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 700px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
          означає, що будь що, що є всередині червоної бульбашки, буде виконане
          одним актором, а все інше - іншим. Ця схема може бути успішно
          застосована, завжди маючи таке обмеження попередніх, плюс всіх стадій
          обробки, що були додані після них.</p>
        <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Попередження</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Без
            сплавки (тобто, до версії 2.0-M2), кожний потік стадії обробки мав
            неявний вхідний буфер, що містить декілька елементів з причин
            ефективності. Якщо ваш граф потоку містиь цикли, тоді ці буфери
            можуть бути критичними, щоб запобігти глухому блокуванню. Зі
            сплавкою ціх неявних буферів вже немає, елемент даних передаються
            без буферизації між сплавленими стадіями. В таких випадках, де
            буферізація потрібна щоб взагалі забезпечити роботу потока, ви
            можете задати вставку явних буферів за допомогою комбінатора&nbsp;<span
              class="Apple-converted-space"></span><code class="docutils literal"
              style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">.buffer()</span></code><span
              class="Apple-converted-space"> </span>— типово буфера розміру 2
            достатньо, щоб дозволити зворотній зв'язок до функції.</p>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Нова
          поведінка сплавки може бути відключена через встановлення параметра
          конфігурації&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.materializer.auto-fusing=off</span></code>.
          В такому випадку ви все ще можете вручну сплавити ці графи, що будуть
          робити на меньшій кількості акторів. За винятком&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SslTlsStage</span></code><span
            class="Apple-converted-space"> та оператора&nbsp;</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code><span
            class="Apple-converted-space">, всі вбудовані стадії обробки можуть
            бути сплавлені.&nbsp;</span></p>
      </div>
      <div class="section" id="combining-materialized-values"><span id="flow-combine-mat-scala"></span>
        <h3 id="Combining_materialized_values" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Комбінація
          матеріалізованих значень</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Оскілкьи
          кожна стадія обробки в Akka Streams може провадити матеріалізоване
          значення, потрібно якось виражати, як ці значення мають бути
          скомпоновані в заключне значення, коли ці стадії підключаються разом.
          Для цього багато методів-комбінаторів мають варіанти, що приймають
          додатковий аргумент, функцію, що буде викорстана для комбінації
          отриманих значень. Деякі приклади використання ціх комбінаторів
          проілюстровані в прикладі нижче.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Джерело, що можна просигналити явно ззовні</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maybe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Потік, що зсередини призупиняє елементи до 1 на секунду, та повертає Cancellable,</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// що може бути використане для завершення потоку</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">throttler</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Приймач, що повертає перший елемент потоку в повернутій Future</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// По замовчанню зберігається матеріалізоване значення самої лівої стадії</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Простий вибір матеріалізованих значень через використання Keep.right</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r3</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Використовуючи runWith завжди буде давати матеріазовані значення стадій, доданих самим runWith()</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r4</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r5</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r6</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]],</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Використання більш складних комбінацій</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r7</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r8</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">both</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r9</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[((</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r10</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Також можливо відзеркалити матеріалізовані значення. В r9 ми маємо двічі</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// вкладену пару, але ми бажаємо спрямити її</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r11</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r9</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapMaterializedValue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">((</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">cancellable</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">),</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">cancellable</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Тепер ми можемо використати порівняння, щоб виділити отримані матеріалізовані значення</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">cancellable</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">r11</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Виведення типів робить як звичайно</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">success</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="kwd" style="color: rgb(48, 166, 40);">None</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">cancellable</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cancel</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Результат r11 може також бути досягнений через використання Graph API</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r12</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Cancellable</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">src</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">dst</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">src</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">dst</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
            графах можливо отримати доступ до матеріалізованого значення з
            середини обробки потоку графа. Щодо деталей дивіться&nbsp;<a class="reference internal"
              href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#graph-matvalue-scala"
              style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Доступ
                до матеріалізованого значення в Graph</span></a>.</p>
        </div>
      </div>
    </div>
    <div class="section" id="stream-ordering" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Stream_ordering" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Впорядкування
        потоків</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
        Akka Streams майже всі стадії обчислення&nbsp;<span class="Apple-converted-space"></span><em
          style="font-style: italic;">зберігають вхідний порядок</em><span class="Apple-converted-space">
        </span>елементів. Це означає, що якщо на вхід надійде&nbsp;<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">{IA1,IA2,...,IAn}</span></code><span
          class="Apple-converted-space">, це "спричинить"</span> вихід<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">{OA1,OA2,...,OAk}</span></code><span
          class="Apple-converted-space">, та на вході&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">{IB1,IB2,...,IBm}</span></code><span
          class="Apple-converted-space">&nbsp;</span>"спричинить" на виході <code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">{OB1,OB2,...,OBl}</span></code><span
          class="Apple-converted-space">, та якщо всі&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">IAi</span></code><span
          class="Apple-converted-space"> трапляться перед всіма&nbsp;</span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">IBi</span></code><span
          class="Apple-converted-space">, тоді&nbsp;&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">OAi</span></code><span
          class="Apple-converted-space"> трапиться перед</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">OBi</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ця
        властивість дотримується навіть для асинхронних операцій, таких, як&nbsp;<span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>,
        однак існує невпорядкована версія, зо називаєтьсья<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code><span
          class="Apple-converted-space">, що не зберігає цей порядок</span>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Однак
        в випадку поєднань, що обробляють декілька вхідних потоків (тобто&nbsp;<span
          class="Apple-converted-space"> </span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge</span></code>),
        вихідний порядок, загалом,<span class="Apple-converted-space"> </span><em
          style="font-style: italic;">не визначений </em>для елементів, що з'являються
        на різних вхідних портах. Таким чином, операції як злиття можуть
        видавати&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Ai</span></code><span class="Apple-converted-space">
          перед</span><span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Bi</span></code>, та це
        залежить від внутрішньої логіки, як визначати порядок видачі елементів.
        Спеціалізовані елементи, такі як&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Zip</span></code><span
          class="Apple-converted-space">, однак,&nbsp;</span><span class="Apple-converted-space"></span><em
          style="font-style: italic;">гарантують</em><span class="Apple-converted-space">
        </span>власний порядок виходу, тому що кожний вихідний елемент залежить
        від всіх елементів апстриму, що вони вже просигналені – таким чином,
        порядок в випадку поєднання zipping визначений цією властивістю.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
        ви винайдете, що вам потрібно гарний контроль за порядком виданих
        елементів в сценаріях поєднання потоків, розгляньте використання&nbsp;<code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MergePreferred</span></code><span
          class="Apple-converted-space"> або</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>– що дає вам повний контроль
        над тим, як виконувати злиття.</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Робота
      з графами</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">В
      Akka Streams графи обчислень не виражені з використанням поточного DSL, як
      це є з обчисленнями, замість цього, вони пишуться в більш графо-подібному
      DSL, що націлений на транслювання з малюнків графа (тобто, з нотатків, що
      беруться з дискусії по дизайну, або ілюстрацій в специфікації протокола),
      в код та з кода, простішим. В цьому розділі ми поглинемо в різні шляхи
      конструювання та використання графів, так само, як пояснимо загальні
      пастки, та як їх уникати.</p>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Графи
      потрібні кожного разу, коли ви бажаєте виконати любий різновид операцій
      злиття ("багато входів") або розгалужень ("багато виходів"). Можна
      розглядати&nbsp; Flows як дорогу, ми можемо намалювати операції графа, як
      операції перетинів: багато потоків поєднуються в одній точці. Деякі
      операцїі графів, що є досить загальними, та підходять під лінійний стиль
      Flows, такі як <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">concat</span></code><span
        class="Apple-converted-space">&nbsp;</span>(що конкатенує два потоки,
      так що другий споживається після того, як завершений перший), може бути
      скороченим методом, визначеним на самих&nbsp;<span class="Apple-converted-space"></span><code
        class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span class="Apple-converted-space">
        або</span><span class="Apple-converted-space"> </span><code class="xref py py-class docutils literal"
        style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,
      однак ви повинні мати на увазі, що вони також реалізовані як поєднання
      графів.</p>
    <div class="section" id="constructing-graphs" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="graph-dsl-scala"></span>
      <h2 id="Constructing_Graphs" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Конструювання
        графів</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Графи
        будуються з простих Flows, що служать як лінійні з'єднання в графі,
        а&nbsp; також поєднання, що служать як точки розгалуження та поєднання
        для Flows. Дякуючи поєднанням, що мають осмислені типи, базуючись на їх
        поведінці, та роблячи їх явними елементами, ці елементи стає просто
        використовувати.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        Streams наразі провадить наступні поєднання (для детального списку
        дивіться&nbsp;<span class="Apple-converted-space"></span><a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#stages-overview-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Огляд
            вбудованих стадій та їх семантика</span></a>):</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Розгалуження</strong></li>
      </ul>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Broadcast[T]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(1 вхід, N виходів)</em><span class="Apple-converted-space">
              </span>призводить до того, що кожний елемент на вході подається на
              всі виходи</li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Balance[T]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(1 вхід, N виходів)</em><span class="Apple-converted-space">
                елементи на вході подаються на один з декількох вихідний порт</span></li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">UnzipWith[In,A,B,...]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(1 вхід, N виходів)</em><span class="Apple-converted-space">
                приймає функцію з одного входа, що надає значення на </span>N
              вихідних елементів (де N &lt;= 20)</li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">UnZip[A,B]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(1 вхід, 2 виходи)</em><span class="Apple-converted-space">
                ділить кортежі</span><span class="Apple-converted-space"> </span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">(A,B)</span></code><span
                class="Apple-converted-space"> на два потоки, один типу&nbsp;</span><span
                class="Apple-converted-space"></span><code class="docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">A</span></code><span
                class="Apple-converted-space">, та один типу </span><code class="docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">B</span></code></li>
          </ul>
        </div>
      </blockquote>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Поєднання</strong></li>
      </ul>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Merge[In]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(N входів, 1 вихід)</em><span class="Apple-converted-space">
                приймає з входів в довільному порядку, та надсилає по одному на
                вихід</span></li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">MergePreferred[In]</span></code><span
                class="Apple-converted-space">&nbsp;</span>– як&nbsp;<span class="Apple-converted-space"></span><code
                class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
                class="Apple-converted-space">, але якщо доступне на порті</span><span
                class="Apple-converted-space"> </span><code class="docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">preferred</span></code>,
              приймає з нього, інакше довільно з&nbsp;<span class="Apple-converted-space"></span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">others</span></code></li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">ZipWith[A,B,...,Out]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(N входів, 1 вихід)</em><span class="Apple-converted-space">
                приймає функцію з </span>N входів, що приймаючи з кожного входу
              видає один вихідний елемент</li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Zip[A,B]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(2 входи, 1 вихід)</em><span class="Apple-converted-space">
                є варіантом </span><span class="Apple-converted-space"></span><code
                class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
                class="Apple-converted-space">, що спеціалізується на поєднанні
                двох вхідних потоків&nbsp;</span><span class="Apple-converted-space"></span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">A</span></code><span
                class="Apple-converted-space"> та&nbsp;</span><span class="Apple-converted-space">
              </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">B</span></code><span
                class="Apple-converted-space"> в потік </span><span class="Apple-converted-space">кортежів
                </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">(A,B)</span></code></li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">Concat[A]</span></code><span
                class="Apple-converted-space">&nbsp;</span>–<span class="Apple-converted-space">&nbsp;</span><em
                style="font-style: italic;">(2 входи, 1 вихід)</em><span class="Apple-converted-space">
                конкатенує два потоки </span>(споживає спочатку перший, потім
              другий)</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Однією
        з цілей GraphDSL DSL є виглядати подібно до того, як дехто може
        намалювати граф на дошці, так що стає простішим транслювати дизайн з
        дошки на код, та бути в змозі поєднати один з одним. Давайте
        проілюструємо це через трансляцію намальованого нижче графа в Akka
        Streams:</p>
      <img alt="../../_images/simple-graph-example1.png" src="http://doc.akka.io/docs/akka/2.4/_images/simple-graph-example1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Такий
        граф просто транслюється на Graph DSL, оскільки кожний лінійний елемент
        відповідає до<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>, та
        кожне коло відповідає або до&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Junction</span></code><span
          class="Apple-converted-space">, або</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">, або</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">, якщо воно починає, або закінчує</span><span
          class="Apple-converted-space"> </span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>.
        Поєднання завжди мають бути створені з визначеними параметрами типу, або
        інакше буде виведений тип&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Nothing</span></code>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">g</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f4</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">10</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">in</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f3</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f4</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Визначення&nbsp;<span
            class="Apple-converted-space"></span><em style="font-style: italic;">референтої
            еквівалентності</em><span class="Apple-converted-space"> поєднань
            визначає&nbsp;</span><span class="Apple-converted-space"></span><em
            style="font-style: italic;">еквівалентність вузлів графа</em><span class="Apple-converted-space">
          </span>(тобто, той самий <em>примірник </em><span class="Apple-converted-space">злиття,
            використаний в </span>GraphDSL, посилається на те ж саме
          розташування в результующому графі).</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Зауважте&nbsp;<span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">import&nbsp;GraphDSL.Implicits._</span></code><span
          class="Apple-converted-space">, що привносить до поля зору оператор</span><span
          class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">~&gt;</span></code><span
          class="Apple-converted-space">&nbsp; </span>(читається як "вістря",
        "через" або "до"), та зворотній до нього&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">&lt;~</span></code><span
          class="Apple-converted-space">&nbsp;</span>(щоб нотувати потоки в
        зворотньому напрямку, коли це потрібно).</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Дивлячись
        на код вище, має бути зрозумілим, що об'єкт <span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL.Builder</span></code><span
          class="Apple-converted-space"> є&nbsp;</span><span class="Apple-converted-space"></span><em
          style="font-style: italic;">змінним</em>. Він (неявно) використовуєть
        оператором<span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">~&gt;</span></code>,
        також роблячи це змінною операцією. Причина вибору такого дизайну є
        дозволити простіше створення складних графів, що навіть можуть містити
        цикли. Але, однак, коли GraphDSL був сконструйований, примірник&nbsp;<span
          class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code><span
          class="Apple-converted-space">&nbsp;</span><span class="Apple-converted-space"></span><em
          style="font-style: italic;">є незмінним, потоко-безпечним, та вільно
          розповсюджується</em>. Те ж саме вірно для всіх частин графа&nbsp; —
        джерел, приймачів, та потоків — коли вони сконструйовані. Це означає, що
        ви можете безпечно повторно виконувати отриманий Flow або поєднання в
        багатьох місцях в оброблюваному графі.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ви
        бачили приклади такого використання вище: поєднання злиття та
        розгалуження були імпортовані в граф з використанням&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">builder.add(...)</span></code>,
        та операція, що буде робити копію схеми, що ви передали їй, та повертати
        входи та виходи отриманої копії, так, щоб вони могли бути поєднані. Інша
        альтернатива полягає в передачі існуючих графів — любої форми — в
        метод-фабрику, що продукує новий граф. Різниця між ціма підходами в
        тому, що імпортування з використанням&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">builder.add(...)</span></code><span
          class="Apple-converted-space"> ігнорує матеріалізоване значення
          імпортованого графа, тоді як імпортування за через метод-фабрику
          дозволяє його включення</span>; щодо подробиць дивіться&nbsp;<span class="Apple-converted-space"></span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#stream-materialization-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Матеріалізація
            потоків</span></a>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
        прикладі нижче ми готуємо граф, що складається з двох паралельних
        потоків, в обох з яких ми використовуємо той же примірник&nbsp;<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>, але
        це також буде відповідно матеріалізовано як два з'єднання між
        відповідними Sources та Sinks:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">topHeadSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">head</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bottomHeadSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">head</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sharedDoubler</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">*</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">topHeadSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bottomHeadSink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">topHS</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bottomHS</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">broadcast</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sharedDoubler</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">topHS</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sharedDoubler</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bottomHS</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="constructing-and-combining-partial-graphs" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="partial-graph-dsl-scala"></span>
      <h2 id="Constructing_and_combining_Partial_Graphs" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Конструювання
        та комбінація часткових графів</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Іноді
        неможливо (або не треба) сконструювати цілий граф обчислень в одному
        місці, але замість цього сконструювати всі різні фази в різних місцях,
        та в кінці поєднати їх в завершений граф, та виконати його.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цього
        можливо досягти, повертаючи інший<span class="Apple-converted-space"> </span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code><span
          class="Apple-converted-space"> ніж</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ClosedShape</span></code>,
        наприклад,&nbsp;<span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowShape(in,</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">out)</span></code>,
        з функції, наданої до<span class="Apple-converted-space"> </span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL.create</span></code>.
        Дивіться<span class="Apple-converted-space"> </span><a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#predefined-shapes"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Попередньо
            визначені форми</span></a> для списка попередньо визначених форм.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перетворення&nbsp;<span
          class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Graph</span></code><span
          class="Apple-converted-space"> н</span>a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space"> потребує під'єднання всіх портів, та
          якщо цього не зробити, буде викликене виключення під час конструювання</span>,
        що допомагає уникнути простих помилок пді час роботи з графами.
        Частковий граф, однак, дозвоялє вам повертати набір ще призначених для
        під'єднання портів з блока кода, що виконує внутрішнє підключення.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Давайте
        уявимо, що ми бажаємо провадити користувачів спеціалізованим елементом,
        що приймає три вхідні елементи, обирає найбільше ціле з кожної
        об'єднаної пари. Ми бажаємо показати три вхідні порти (непід'єднані
        джерела), та один вихідний порт (непід'єднаний приймач).</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pickMaxOfThree</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">math</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">math</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">UniformFanInShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">resultSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">head</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">g</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">resultSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// імпортування часткового графа буде повертати його форму (входи та виходи)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pm3</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pickMaxOfThree</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pm3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pm3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pm3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pm3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">max</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">g</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">300.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">should</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">equal</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Як
        ви можете бачити, спершу ми конструюємо частковий граф, що містить всі
        поєднання, та порівнює елементи потоку. Цей частковий граф буде мати три
        входи, та один вихід, таким чином ми використовуємо&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">UniformFanInShape</span></code>.
        Коли ми явно імпортуємо його (всі входи та з'єднання) в закритий граф,
        що ми будуємо на другому кроці, де всі невизначені елементи
        підключаються до реальних джерел та приймачів. Потім граф може
        виконатись та отримати очікуваний результат.</p>
      <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Попередження</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Будь
          ласка, занотуйте, що&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code><span
            class="Apple-converted-space"> не в змозі провадити безпечність
            типів часу компіляції, щодо того, чи всі елементи були вірно
            під'єднані&nbsp; </span>— ця перевірка виконується під час
          виконання під час втілення графа.&nbsp;</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Частковий
          граф також перевіряє, що всі порти або під'єднані, або частка повертає<span
            class="Apple-converted-space"> </span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Shape</span></code>.</p>
      </div>
    </div>
    <div class="section" id="constructing-sources-sinks-and-flows-from-partial-graphs"
      style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="constructing-sources-sinks-flows-from-partial-graphs-scala"></span>
      <h2 id="Constructing_Sources__Sinks_and_Flows_from_Partial_Graphs" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Побудова
        джерел, приймачів та потоків з часткових графів</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Замість
        того, щоб трактувати частковий граф як просто колекцію потоків та
        з'єднань, що це можуть бути непідключеними, часом корисно показати такі
        складні графи як простіші структури, як&nbsp;<span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space"> або</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Фактично,
        ці концепції можуть бути просто виражені як спеціальні випадки частково
        поєднаних графів:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space"> є частковий граф з&nbsp;</span><span
            class="Apple-converted-space"></span><em style="font-style: italic;">точно
            одним виходом</em>, що він повертає як&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SourceShape</span></code>.</li>
        <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space"> є частковим графом, з&nbsp;</span><span
            class="Apple-converted-space"></span><em style="font-style: italic;">точно
            одним входом</em>, що він повертає як&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SinkShape</span></code>.</li>
        <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space"> є частковим графом з&nbsp;</span><span
            class="Apple-converted-space"></span><em style="font-style: italic;">точно
            одним входом та одним виходом</em>, що повертає<span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code>.</li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Маючи
        змогу приховати складні графи в простих елементах, таких як
        Sink/Source/Flow дозволяє вам просто створювати один великий елемент, та
        з цього часу розглядати його як просту составну стадію для лінійних
        обчислень.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
        створити Source з графа використовується метод<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.fromGraph</span></code>,
        та щоб застосувати його ми повинні мати <code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Graph[SourceShape,</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">T]</span></code>.
        Він конструюється&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL.create</span></code><span
          class="Apple-converted-space"> </span>та повертає&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SourceShape</span></code><span
          class="Apple-converted-space"> з переданої йому функції</span>.
        Поодинокий вихід має провадити до метода<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SourceShape.of</span></code><span
          class="Apple-converted-space">, та стає </span>елементом, що потребує
        приймач, щоб стати спроможним до виконання.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Посилайтесь
        на приклад нижче, в якому ми створюємо Source, що поєднує разом два
        числа, щоб побачити цю конструкцію графа в дії:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pairs</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// готуємо елементи графа</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]())</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">ints</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromIterator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// з'єднуємо граф</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">ints</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">%</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">ints</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">%</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// expose port</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">firstPair</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pairs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Приблизно
        те саме може бути зроблено для&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink[T]</span></code>,
        використовуючи&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SinkShape.of</span></code><span
          class="Apple-converted-space">, в якому випадку запроваджене значення
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Inlet[T]</span></code>.
        Для визначення&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow[T]</span></code><span
          class="Apple-converted-space"> нам треба показати обоє, вхідний та
          вихідний під'єднання</span>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pairUpWithToString</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// готуємо елементи графа</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]())</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// з'єднуємо граф</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// expose ports</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pairUpWithToString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">head</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="combining-sources-and-sinks-with-simplified-api" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Combining_Sources_and_Sinks_with_simplified_API" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Комбінування
        джерел та приймачів за допомогою спрощеного API</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Існує
        спрощений API, що ви можете застосовувати для комбінування джерел з
        поєднаннями, такі як:<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Broadcast[T]</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Balance[T]</span></code>,<code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge[In]</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Concat[A]</span></code><span
          class="Apple-converted-space">, без потреби викорстовувати </span>Graph
        DSL. Метод combine турбується про конструювання відповідного графа за
        лаштунками. В наступному прикладі ми скомбінуємо два джерела в
        одне&nbsp; (поєднання fan-in):</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceOne</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceTwo</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merged</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">combine</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sourceOne</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceTwo</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mergedResult</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merged</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Те
        ж саме може бути зроблене з&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink[T]</span></code><span
          class="Apple-converted-space">, але цього разу для розгалуження</span>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sendRmotely</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">actorRef</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actorRef</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"Done"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">localProcessing</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="cm" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">/* робимо щось корисне */</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">())</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">combine</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendRmotely</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">localProcessing</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="building-reusable-graph-components" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Building_reusable_Graph_components" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Побудова
        повторно використовуваних компонентів графа</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Можливо
        побудувати повторно використовувані, інкапсульовані компоненти з
        довільними вхідними та вихідними портами з використанням графового DSL.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Як
        приклад, ми будемо будувати з'єднання графів, що представляє пул
        робітників, де робітник виражений як&nbsp;<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow[I,O,_]</span></code>,&nbsp;
        тобто проста трансформація завдань типу&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">I</span></code><span class="Apple-converted-space">
          в тип&nbsp;</span><span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">O</span></code><span class="Apple-converted-space">&nbsp;</span>(як
        ви вже бачили, цей потік може мати зсередини складний граф). Наш
        повторно використовуваний пул робітників не буде зберігати порядок
        надходячих завдань (вважатимемо, що вони мають відповідне поле ID), та
        буде використовувати поєднання&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Balance</span></code>
        для планування завдань до доступних робітників. Зверху цього наше
        поєднання буде мати "швидкісну полосу", виділений порт, по якому можуть
        надсилатись завдання з підвищенним приоритетом.&nbsp;</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Загалом,
        наше поєднання буде мати два входних порти типу&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">I</span></code><span class="Apple-converted-space">&nbsp;</span>(для
        нормальних та приоритизованих завдань), та вихід типу <code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">O</span></code>. Щоб
        представити цей інтерфейс, Щоб представити цей інтерфейс, нам треба
        визначити власний&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code>.
        Наступні рядки показують як зробити це.&nbsp;</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Форма, що представляє вхідні та вихідні порти повторно використовуваного модуля</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobsIn</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">         </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">resultsOut</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">     </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Shape</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Є важливим провадити список всіх вхідних та вихідних портів з </span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// стабільним порядком. Дублікати не допустимі.</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inlets</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">immutable</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">jobsIn</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">::</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">priorityJobsIn</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">::</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Nil</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlets</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">immutable</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">resultsOut</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">::</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Nil</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Shape має вміти створювати свою копію. Загалом це означає новий примірник з копіями портів</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">deepCopy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobsIn</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">carbonCopy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(),</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">carbonCopy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(),</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">resultsOut</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">carbonCopy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">())</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Shape має також бути в змозі створювати себе з існуючих портів</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">copyFromPorts</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">inlets</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">immutable</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]],</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlets</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">immutable</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">this</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">this</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Ось чому порядок має значення при перевизначенні входів та виходів.</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">as</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">inlets</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">as</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">],</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">as</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="predefined-shapes" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="id1"></span>
      <h2 id="Predefined_shapes" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Попередньо
        визначені фігури</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Загалом
        власний&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code><span
          class="Apple-converted-space"> </span>має бути в змозі запровадити
        всі свої вхідні та вихідні порти, бути в змозі копіювати себе, а також
        вміти створювати себе з наданих портів. Існують деякі попередньо
        визначені порти, надані для уникання непотрібному повторюванню:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">SourceShape</span></code>,<span
                class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">SinkShape</span></code>,<span
                class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code><span
                class="Apple-converted-space"> для простіших фігур</span>,</li>
            <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">UniformFanInShape</span></code><span
                class="Apple-converted-space"> та</span><span class="Apple-converted-space">
              </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">UniformFanOutShape</span></code><span
                class="Apple-converted-space"> для поєднань з багатьма вхідними
              </span>(або вихідними) портами того ж самого типу,</li>
            <li style="line-height: 18px;"><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">FanInShape1</span></code>,<span
                class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">FanInShape2</span></code>,
              ...,<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">FanOutShape1</span></code>,<span
                class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
                style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">FanOutShape2</span></code>,
              ... для поєднань з багатьма вхідними (або вихідними) портами
              різних типів.</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Оскільки
        наша фігура має два вхідні порти та один вихідний порт, ми можемо просто
        використати&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FanInShape</span></code><span
          class="Apple-converted-space">&nbsp;</span>DSL для визначення нашої
        власної фігури:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FanInShape</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Init</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Name</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="pln" style="color: rgb(89, 80, 80);">_init</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Init</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Name</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"PriorityWorkerPool"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FanInShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="pln" style="color: rgb(89, 80, 80);">_init</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">protected</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">construct</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Init</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">])</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobsIn</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">newInlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"jobsIn"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">newInlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"priorityJobsIn"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Outlet[Out] на ім'я "out" створюється автоматично</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Тепер
        ми маємо&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code><span
          class="Apple-converted-space">, що ми можемо під'єднати в </span>Graph,
        що представляє наш пул робітників. Перше, ми будемо зливати вхідні
        завдання зі звичайним та підвищеним приоритетом, з використанням<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MergePreferred</span></code>,
        потім ми надсилатимемо завдання до поєднання&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Balance</span></code>,
        що буде розгалужуватись до конфігурованого числа робітників (потоків),
        та нарешті ми зливаємо всі ці результати разом, та надсилаємо їх через
        наш єдиний вихідний порт. Це виражене через наступний граф:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPool</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">apply</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Any</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">workerCount</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Graph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityMerge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MergePreferred</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">balance</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">workerCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">resultsMerge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">workerCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Після злиття приоритетних та звичайних завдань, ми направляємо їх на балансування</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityMerge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">balance</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Підключаємо кожний з виходів балансувальника до робочого потоку, та потім знову поєднуємо</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);"><span style="color: #93a1a1;">, </span>    </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">for</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;-</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">until</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">workerCount</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">balance</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">resultsMerge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Тепер ми показуємо вхідні порти priorityMerge, та вихід </span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">resultsMerge як наші порти PriorityWorkerPool</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// -- все мило огорнуте в наш специфічний Shape</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPoolShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">jobsIn</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">priorityMerge</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">),</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityMerge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">preferred</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">resultsOut</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">resultsMerge</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Все
        що нам треба зробити, це використати наше власне поєднання в графі.
        Наступний код симулює роботу деяких простих робітниуів та завдання, з
        використанням простих рядків та роздруковку результатів. Насправді ми
        використовуємо&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">два
          примірники </em><span class="Apple-converted-space"></span>нашого
        робітника в нашому пулі-поєднанні, використовуючи&nbsp;<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">add()</span></code><span
          class="Apple-converted-space"> двічі</span>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">worker1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"step 1 "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">worker2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"step 2 "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityPool1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">priorityPool2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">PriorityWorkerPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"job: "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityPool1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobsIn</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"priority job: "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityPool1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">priorityPool1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">resultsOut</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityPool2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobsIn</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"one-step, priority "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityPool2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">priorityJobsIn</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">priorityPool2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">resultsOut</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="bidirectional-flows" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="bidi-flow-scala"></span>
      <h2 id="Bidirectional_Flows" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Двонаправлені
        потоки</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Топологія
        графів, що буває часто корисна, це коли два потоки надходять в двох
        напрямках. Візміть для приклада стадію кодека, що серіалізує вихідні
        повідомлення, та десеріалізує надходячі потокі октетів. Інша така стадія
        може додавати протокол фрагментування, що додає заголовок довжини до
        виходячих даних, та розбиває надходячі фрейми знову на оригінальні
        шматки потоку октетів. Ці дві стадії можуть бути скомпоновані,
        застосовані одна зверху другої, як частина стеку протоколу. Для ціх
        цілей існує специальний тип&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space">, що є графом, що має саме два вхідних
          з'єднання, та два вихідні з'єжнання</span>. Відповідна фігура
        називається&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiShape</span></code><span
          class="Apple-converted-space">, та визначена таким чином</span>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="cm" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">/**</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> * Двонаправлений потік елементів, що відповідно має два входи та два виходи:</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> * {{{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *        +------+</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *  In1 ~&gt;|      |~&gt; Out1</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *        | bidi |</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> * Out2 &lt;~|      |&lt;~ In2</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *        +------+</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> * }}}</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> */</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="typ" style="color: rgb(0, 143, 169);">In1</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">+</span><span
class="typ" style="color: rgb(0, 143, 169);">Out1</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="typ" style="color: rgb(0, 143, 169);">In2</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">+</span><span
class="typ" style="color: rgb(0, 143, 169);">Out2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">](</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="lit" style="color: rgb(25, 95, 145);">@uncheckedVariance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">out1</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="lit" style="color: rgb(25, 95, 145);">@uncheckedVariance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">in2</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="lit" style="color: rgb(25, 95, 145);">@uncheckedVariance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">out2</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="lit" style="color: rgb(25, 95, 145);">@uncheckedVariance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Shape</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// опущені деталі реалізації ...</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Двонаправлений
        потік визначений так само, як і однонаправлений<span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">, як демонструє зазначений вище кодек</span>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">trait</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Ping</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pong</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">toBytes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// опущені деталі реалізації ...</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fromBytes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// опущені деталі реалізації ...</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">codecVerbose</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiFlow</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// конструюємо та додаємо вищий потік, що іде на вихід</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outbound</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toBytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// конструюємо та додаємо нижній потік, що іде на вхід</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inbound</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromBytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// зплавляємо їх разом в BidiShape</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromFlows</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outbound</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">inbound</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// це те ж саме, що і раніше</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">codec</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiFlow</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromFunctions</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toBytes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromBytes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перша
        версія повторює конструктор часткового графа, тоді як для простого
        випадка функціонала перетворення 1:1 є стисліший зручний метод, як
        показано в останньому рядку. Реалізація двох функцій також не складна:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">toBytes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">order</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteOrder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="pln" style="color: rgb(89, 80, 80);">LITTLE_ENDIAN</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">match</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Ping</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">newBuilder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">putByte</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">putInt</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pong</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">newBuilder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">putByte</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">putInt</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fromBytes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">order</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteOrder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="pln" style="color: rgb(89, 80, 80);">LITTLE_ENDIAN</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">it</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">iterator</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">it</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getByte</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">match</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="pln" style="color: rgb(89, 80, 80);">     </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Ping</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">it</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">getInt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="pln" style="color: rgb(89, 80, 80);">     </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pong</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">it</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">getInt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">other</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">throw</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RuntimeException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"parse error: expected 1|2 got </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$other</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
        такій спосіб ви можете просто інтегрувати любі інші бібліотеки
        серіалізації, що перетворюють об'єкт на потік байт.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Інша
        стадія, про яку ми казали, трохи більш складніша, оскільки реверс
        протокола фрагментування означає, що кожний отриманий пакет байт може
        відповідати нулю або більше повідомлень. Це краще реалізувати з
        використанням&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>(також дивіться <a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-customize.html#graphstage-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Власна
            обробка за допомогою GraphStage</span></a>).</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">framing</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiFlow</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">order</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteOrder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="pln" style="color: rgb(89, 80, 80);">LITTLE_ENDIAN</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">addLengthHeader</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">len</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">length</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">newBuilder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">putInt</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">len</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">append</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FrameParser</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"FrameParser.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"FrameParser.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// це містить отримані, але ще не розібрані байти</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// це містить довжину поточного повідомлення, або -1 на межі</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isClosed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bytes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">++</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bytes</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onUpstreamFinish</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// either we are done</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isEmpty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// або ми ще маємо байти на досилання</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// очікуємо завершення, та дозволяємо завершитись run()</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// коли залишок stash був надісланий в потік</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isAvailable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// чи ми на межі? тоді треба зрозуміти наступну довжину</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">length</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isClosed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">            </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">iterator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getInt</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">drop</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// цикл назад щоб, до, можливо, вже надісланого наступного пакету</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">length</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// ми на середині повідомлення, треба більше байт, або ми маємо зупинитись, якщо вхід закрито</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isClosed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// ми маємо досить, щоб надіслати щонайменьше одне повідомлення, так що робимо це</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">emit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stash</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">take</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stash</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">drop</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">needed</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">needed</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">push</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emit</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outbound</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">addLengthHeader</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inbound</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FrameParser</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">BidiShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromFlows</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outbound</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">inbound</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">З
        ціма реалізаціями ми можемо побудувати стек протоколів та протестувати
        його:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="cm" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">/* конструкція стеку протоколів</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         +------------------------------------+</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         | stack                              |</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         |                                    |</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         |  +-------+            +---------+  |</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *    ~&gt;   O~~o       |     ~&gt;     |         o~~O    ~&gt;</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> * Message |  | codec | ByteString | framing |  | ByteString</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *    &lt;~   O~~o       |     &lt;~     |         o~~O    &lt;~</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         |  +-------+            +---------+  |</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> *         +------------------------------------+</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);"> */</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stack</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">codec</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">atop</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">framing</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// протестуємо через підключення його до своєї протилежності, та закриємо правий кінець</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pingpong</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">collect</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Ping</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pong</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">stack</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">atop</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">stack</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">reversed</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">join</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pingpong</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">9</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Ping</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">limit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">20</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">should</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">===((</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">9</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Pong</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цей
        приклад демонструє як субграфи&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space"> можуть бути поєднані разом, та
          також&nbsp; обернуті завдяки методу </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">.reversed</span></code>.
        Тест симулює обі чистини комунікації мережевого протокола,&nbsp; without
        actually having to open a network connection—the flows can just be
        connected directly.</p>
    </div>
    <div class="section" id="accessing-the-materialized-value-inside-the-graph"
      style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="graph-matvalue-scala"></span>
      <h2 id="Accessing_the_materialized_value_inside_the_Graph" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Доступ
        до матеріалізованого значення в Graph</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
        певних випадках може бути потрібним подати назад матеріалізоване
        значення Graph (часткового, замкненого, або що містить Source, Sink,
        Flow або BidiFlow). Це можливо через використання&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">builder.materializedValue</span></code><span
          class="Apple-converted-space">, що дає&nbsp;</span><span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Outlet</span></code><span
          class="Apple-converted-space">, який може бути використаний в графі як
          звичайне джерело або роз'єм, та що буде при нагоді видавати
          матеріалізоване значення</span>. Якщо матеріалізоване значення
        потрібне більше ніж в одному місці, можливо викликати&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">materializedValue</span></code><span
          class="Apple-converted-space"> любе число разів, щоб отримати потрібне
          число роз'ємів.&nbsp;</span></p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">foldFlow</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fold</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">materializedValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Будьте
        уважними, та не ввійдіть в цикл, де матеріалізоване значення насправлі
        додає до матеріалізованого значення. наступний приклад демонструє
        випадок, де матеріалізоване&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space"> з </span>fold подається знову в сам
        fold.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Це не спродукує значення:</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">cyclicFold</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);"></span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">  {</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// - Fold не може завершитись, докі не завершиться mapAsync</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// - mapAsync не може завершитись, доки не завершиться матеріалізоване Future, що виробляє fold</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Як результат, цей Source ніколи нічого не видасть, та його матеріалізоване </span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">Future ніколи не завершиться</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializedValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializedValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="graph-cycles-liveness-and-deadlocks" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="graph-cycles-scala"></span>
      <h2 id="Graph_cycles__liveness_and_deadlocks" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Цикли
        графа, життєздатність та глухі кути</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цикли
        в обмежених топологіях потоку потребують спеціального розгляду, щоб
        уникнути потенційних глухих кутів, або інших проблем життєздатності. Цей
        розділ показує декілька прикладів проблем, що можуть виникнути завдяки
        наявності зворотніх петель в обробці потокових графів.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">І
        наступних прикладах створені робочі графи, але вони не виконуються, бо
        кожний має деяку проблему, та ввійде в глухий кут після запуску.
        Змінна&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> не визначена не визначена за природою,
          та число елементів нессуттєве для описуваних проблем</span>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перший
        приклад демонструє граф, що містить наївний цикл. Граф приймає елементи
        з джерела, друкує їх, потім розсилає ці елементи до споживача (ми покі
        що використовуємо<span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.ignore</span></code>),
        та до зворотньої петлі, що зливаєтсья назад в головний потік через
        поєднання<span class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge</span></code>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">DSL
          графів дозволяє зміну напрямку стрілок з'єднань, що, зокрема, корисне
          при створенні циклів — як ми побачимо, є випадки, коли це вкрай
          допомагає.&nbsp;</p>
      </div>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// УВАГА! Граф нижче містить глухий кут!</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">s</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">            </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                    </span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                      </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Виконавши
        це, ми побачимо, що після декількох надрукованих чисел, наступні
        елементи більше не журналюються на консоль - вся обробка зупиняється
        після деякого часу. Після деякого розслідування ми знаходимо, що:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;">через злиття з<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
            class="Apple-converted-space"> ми збільшили число елементів в циклі</span></li>
        <li style="line-height: 18px;">через розсилку назад в цикл ми не
          зменшили число елементів в циклі</li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Оскільки
        потоки&nbsp; Akka Streams (та Reactive Streams взагалі) гарантують
        обмежену обробку (дивіться розділ "Буферизація" для додаткових деталей),
        це означає, що тільки обмежене число елементів буферизується в кожний
        проміжок часу. Оскільки наш цикл отримує все більше і більше елементів,
        з часом всі його внутрішні буфери будуть заповнені, що закриє зворотнім
        тиском&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
          class="Apple-converted-space"> назавжди</span>. Щоб бути в змозі
        обробити більше елементів з&nbsp;<span class="Apple-converted-space"> </span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
          class="Apple-converted-space">, треба якось вийти з цикла</span>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
        ми модифікуємо наш цикл зворотнього зв'язку, замінивши поєднання&nbsp;<span
          class="Apple-converted-space"> </span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
          class="Apple-converted-space"> </span>на<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MergePreferred</span></code><span
          class="Apple-converted-space">, ми можемо уникнути глухого кута. </span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MergePreferred</span></code><span
          class="Apple-converted-space"> нерівне, оскільки завжди намагається
          споживати з преоритетного вхідного порта, якщо там є елементи, перед
          спробою інших вхідних портів з низьким преоритетом. Оскільки ми
          замикаємо цикл через преоритетний порт, завжди є гарантія, що елементи
          в циклі будуть рухатись</span>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// УВАГА! Граф нижче зупиняється, споживаючи з "source" після декількох кроків</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MergePreferred</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">s</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">            </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">preferred</span></span><span
class="pln" style="color: rgb(89, 80, 80);">              </span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                  </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
        ми виконаємо цей приклад, ми побачимо ту ж послідовність чисел,
        надруковану знову і знову, але обробка не зупиняється. Таким чином, ми
        уникаємо глухого кута, але&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
          class="Apple-converted-space"> все ще під зворотнім тиском назавжди,
          оскільки простір буфера ніколи не відновлюється</span>: єдина дія, що
        ми бачимо, є циркуляція пари початкових елементів з&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Зауваження</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Те,
          що ми тут бачимо, що в певних випадках нам треба обрати між
          обмеженістю та життєспроможністю. Наш перший приклад міг би не попасти
          в глухий кут, якби міг би бути безмежний буфер в циклі. Або навпаки,
          якби елементи в циклі були б збалансовані (скільки елементів
          видаляється, стільки і додаються), тоді не було б глухого кута.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
        зробити наш граф одночасно живим (без глухого кута), та чесним, ми
        можемо ввести відкидання елементів на зворотньому шляху. В цьому випадку
        ми обираємо операцію&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">buffer()</span></code><span
          class="Apple-converted-space">, надаючи стратегію відкидання&nbsp; </span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy.dropHead</span></code>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">s</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
        ми виконаємо цей приклад, ми побачимо що</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;">Потік елементів не зупиняється, завжди
          друкуютсья елементи</li>
        <li style="line-height: 18px;">Ми бачимо, що деякі числа друкуються
          декілька разів (через зворотній цикл), але в середньому в довшій
          перспективі числа зростають</li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Цей
        приклад висвічує те, що одне рішення для уникання грухих кутів за
        наявності потенційно незбалансованих циклів&nbsp; (циклів, де число
        циркулюючих елементів необмежене) є відкидання елементів. Альтернативою
        може бути визначення більших буферів з&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy.fail</span></code><span
          class="Apple-converted-space">, що буде давати збій потоку замість
          глухого блокування, якщо врешті решт простір буде спожито</span>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Як
        ви визначили в попередніх прикладах, коренева проблема була в
        незбалансованій природі зворотнього цикла. Ми обійшли цю проблему,
        додавши відкидання елементів, але тепер ми бажаємо побудувати цикл, що
        збалансований з самого початку. Щоб досягти цього, ми можифікували наш
        перший граф, замінивши поєднання&nbsp;<span class="Apple-converted-space"></span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
          class="Apple-converted-space"> на&nbsp;</span><span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code>.
        Оскільки <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
          class="Apple-converted-space"> приймає один елемент з&nbsp;</span><span
          class="Apple-converted-space"></span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
          class="Apple-converted-space"> </span><em style="font-style: italic;">та
          </em><span class="Apple-converted-space"></span>з зворотньої петлі,
        щоб ввести один елемент в цикл, ми керуємо балансуванням елементів.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// УВАГА! Граф нижче ніколи не обробляє жодного елемента</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">left</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">right</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">right</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span><span
class="pln" style="color: rgb(89, 80, 80);">             </span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">І
        знову, коли ми намагаємось виконати приклад, з'ясрвується, що він
        взагалі не друкує жодного елемента! Після деякого дослідження ми
        розуміємо, що:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;">Щоб отримати перший елемент з&nbsp;<span
            class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">source</span></code><span
            class="Apple-converted-space"> </span>в циклі нам треба вже
          існуючий елемент в циклі</li>
        <li style="line-height: 18px;">Щоб отримати перший елемент в циклі, нам
          треба елемент з&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">source</span></code></li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ці
        дві умови є типовою проблемою "куриця-або-яйце". Рішення є ввести
        первинний елементв цикл, що є незалежним від&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">source</span></code>.
        Ми робимо це, використовуючи поєднання<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Concat</span></code><span
          class="Apple-converted-space"> </span>на зворотній петлі, що вводить
        єдиний елемент з використанням&nbsp;<span class="Apple-converted-space">
        </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.single</span></code>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">left</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">left</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">concat</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Concat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]())</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">start</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">concat</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">start</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">             </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">concat</span></span><span class="pln" style="color: rgb(89, 80, 80);">         </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Коли
        ми виконуємо цей приклад, ми бачимо, що обробка починаєтся, та ніколи не
        закінчується. Важлий висновок з цього приклада в тому, що збалансовані
        цикли часто потребують вставлки в цикл початкового "розкруточного"
        елемента.</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Модульність,
      композиція та ієрархія</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Потоки
      Akka Streams провадять одноманітну модель для обробки графів, що дозволяє
      гнучку композицію повторно використовуваних компонент. В цій главі ми
      покажемо, як це виглядає з концептуальної перспективи, та з боку зору API,
      демонструючи модулярні аспекти бібліотеки.&nbsp;</p>
    <div class="section" id="basics-of-composition-and-modularity" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Basics_of_composition_and_modularity" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Основи
        композиції та модульності</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Кожна
        стадія обробки, що використовується в&nbsp; Akka Streams, може бути
        уявлена як "ящик" з входом та виходом, де елементи, що мають бути
        оброблені, надходять та звідки виходять. В цьому погляді&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space"> є нічим іншим, ніж </span>"ящиком" з
        одним вихідним портом, або<span class="Apple-converted-space"> </span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space"> є </span>"ящик" з точно двома вхідними
        та вихідними портами. На малюнку нижче ми ілюструємо найбільш загально
        використовувані стадії в вигляді "ящиків".</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_shapes1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_shapes1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><span
          class="Apple-converted-space"></span><em style="font-style: italic;">Лінійні</em><span
          class="Apple-converted-space"> </span>стадії є&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>, як
        вони можуть бути використані для композиції прямих ланцюжків стадій
        обробки. Стадії поєднання та розгалуження мають декілька входних або
        багато виходних портів, та, таким чином, вони дозволяють будувати більш
        складні фрми графів, не тільки ланцюжки.<span class="Apple-converted-space">
          Стадії&nbsp; </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space"> звичайно корисні в задачах </span>IO,
        де мають бути оброблені вхідні та вихідні канали. Due to the specific
        shape of<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>it is easy to stack them on
        top of each other to build a layered protocol for example. The<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TLS</span></code><span
          class="Apple-converted-space">&nbsp;</span>support in Akka is for
        example implemented as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ці
        повторно використовувані компоненти дозволяють створювати складні мережі
        обробки. What we have seen so far does not implement modularity though.
        It is desirable for example to package up a larger graph entity into a
        reusable component which hides its internals only exposing the ports
        that are meant to the users of the module to interact with. One good
        example is the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Http</span></code><span
          class="Apple-converted-space">&nbsp;</span>server component, which is
        encoded internally as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>which interfaces with the
        client TCP connection using an input-output port pair accepting and
        sending<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
          class="Apple-converted-space">&nbsp;</span>s, while its upper ports
        emit and receive<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">HttpRequest</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">HttpResponse</span></code><span
          class="Apple-converted-space">&nbsp;</span>instances.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        following figure demonstrates various composite stages, that contain
        various other type of stages internally, but hiding them behind a<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">shape</em><span class="Apple-converted-space">&nbsp;</span>that
        looks like a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>,
        etc.</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_composites1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_composites1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
        interesting example above is a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>which is composed of a
        disconnected<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>.
        This can be achieved by using the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">fromSinkAndSource()</span></code><span
          class="Apple-converted-space">&nbsp;</span>constructor method on<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>which takes the two parts
        as parameters.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        example<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>demonstrates that
        internally a module can be of arbitrary complexity, and the exposed
        ports can be wired in flexible ways. The only constraint is that all the
        ports of enclosed modules must be either connected to each other, or
        exposed as interface ports, and the number of such ports needs to match
        the requirement of the shape, for example a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>allows only one exposed
        output port, the rest of the internal ports must be properly connected.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        mechanics allow arbitrary nesting of modules. For example the following
        figure demonstrates a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>that
        is built from a composite<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>and a composite<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>(which in turn contains a
        composite<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>).</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_nested_flow1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_nested_flow1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        above diagram contains one more shape that we have not seen yet, which
        is called<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>.
        It turns out, that if we wire all exposed ports together, so that no
        more open ports remain, we get a module that is<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">closed</em>. This is what the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space">&nbsp;</span>class represents. This is
        the shape that a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Materializer</span></code><span
          class="Apple-converted-space">&nbsp;</span>can take and turn into a
        network of running entities that perform the task described. In fact, a<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space">&nbsp;</span>is a module itself, and
        (maybe somewhat surprisingly) it can be used as part of larger graphs.
        It is rarely useful to embed a closed graph shape in a larger graph
        (since it becomes an isolated island as there are no open port for
        communication with the rest of the graph), but this demonstrates the
        uniform underlying model.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        we try to build a code snippet that corresponds to the above diagram,
        our first try might look like this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// ... where is the nesting?</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is clear however that there is no nesting present in our first attempt,
        since the library cannot figure out where we intended to put composite
        module boundaries, it is our responsibility to do that. If we are using
        the DSL provided by the<code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>classes then nesting can be
        achieved by calling one of the methods<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">withAttributes()</span></code><span
          class="Apple-converted-space">&nbsp;</span>or<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">named()</span></code><span
          class="Apple-converted-space">&nbsp;</span>(where the latter is just a
        shorthand for adding a name attribute).</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        following code demonstrates how to achieve the desired nesting:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// An atomic source</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// an atomic processing stage</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"nestedSource"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// wraps up the current Source and gives it a name</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedFlow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// an atomic processing stage</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// another atomic processing stage</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"nestedFlow"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// wraps up the Flow, and gives it a name</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">nestedFlow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// wire an atomic sink to the nestedFlow</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"nestedSink"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// wrap it up</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Create a RunnableGraph</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnableGraph</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Once
        we have hidden the internals of our components, they act like any other
        built-in component of similar shape. If we hide some of the internals of
        our composites, the result looks just like if any other predefine
        component has been used:</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_nested_flow_opaque1.png" class="align-center"
        src="http://doc.akka.io/docs/akka/2.4/_images/compose_nested_flow_opaque1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        we look at usage of built-in components, and our custom components,
        there is no difference in usage as the code snippet below demonstrates.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Create a RunnableGraph from our components</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnableGraph</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Usage is uniform, no matter if modules are composite or atomic</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnableGraph2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="composing-complex-systems" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Composing_complex_systems" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Композиція
        складних систем</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        the previous section we explored the possibility of composition, and
        hierarchy, but we stayed away from non-linear, generalized graph
        components. Однак в Akka Streams немає нічого, що б змушувало обробку
        потоків бути тільки лінійною. The DSL for<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>and friends is optimized
        for creating such linear chains, as they are the most common in
        practice. There is a more advanced DSL for building complex graphs, that
        can be used if more flexibility is needed. We will see that the
        difference between the two DSLs is only on the surface: the concepts
        they operate on are uniform across all DSLs and fit together nicely.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        a first example, let's look at a more complex layout:</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_graph1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_graph1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        diagram shows a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space">&nbsp;</span>(remember, if there are no
        unwired ports, the graph is closed, and therefore can be materialized)
        that encapsulates a non-trivial stream processing network. It contains
        fan-in, fan-out stages, directed and non-directed cycles. The<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">runnable()</span></code><span
          class="Apple-converted-space">&nbsp;</span>method of the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code><span
          class="Apple-converted-space">&nbsp;</span>object allows the creation
        of a general, closed, and runnable graph. For example the network on the
        diagram can be realized like this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                  </span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">UniformFanOutShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">UniformFanInShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">D</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">UniformFanOutShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">UniformFanInShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">G</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Any</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                   </span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">add</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">                </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">C</span></span><span class="pln" style="color: rgb(89, 80, 80);">     </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">F</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">A</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">B</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">C</span></span><span class="pln" style="color: rgb(89, 80, 80);">     </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">F</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">         </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">B</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">D</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">E</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">F</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">                       </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">G</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        the code above we used the implicit port numbering feature (to make the
        graph more readable and similar to the diagram) and we imported<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>s,<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>s and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>s explicitly. It is
        possible to refer to the ports explicitly, and it is not necessary to
        import our linear stages via<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">add()</span></code>, so
        another version might look like this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">B</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">C</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">B</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">E</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">;</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Similar
        to the case in the first section, so far we have not considered
        modularity. We created a complex graph, but the layout is flat, not
        modularized. We will modify our example, and create a reusable component
        with the graph DSL. The way to do it is to use the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">create()</span></code><span
          class="Apple-converted-space">&nbsp;</span>factory method on<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code>.
        If we remove the sources and sinks from the previous example, what
        remains is a partial graph:</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_graph_partial1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_graph_partial1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        can recreate a similar graph in code, using the DSL in a similar way
        than before:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">partial</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">E</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">                                   </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">C</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;~</span></span><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">F</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);">                            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">C</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">F</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">B</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">E</span></span><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">F</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">E</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"partial"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        only new addition is the return value of the builder block, which is a<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code>.
        All graphs (including<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code>,
        etc) have a shape, which encodes the<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">typed</em><span class="Apple-converted-space">&nbsp;</span>ports
        of the module. In our example there is exactly one input and output port
        left, so we can declare it to have a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code><span
          class="Apple-converted-space">&nbsp;</span>by returning an instance of
        it. While it is possible to create new<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code><span
          class="Apple-converted-space">&nbsp;</span>types, it is usually
        recommended to use one of the matching built-in ones.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        resulting graph is already a properly wrapped module, so there is no
        need to call<span class="Apple-converted-space">&nbsp;</span><cite style="font-style: normal;">named()</cite><span
          class="Apple-converted-space">&nbsp;</span>to encapsulate the graph,
        but it is a good practice to give names to modules to help debugging.</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_graph_shape1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_graph_shape1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Since
        our partial graph has the right shape, it can be already used in the
        simpler, linear DSL:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">partial</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is not possible to use it as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>yet, though (i.e. we cannot
        call<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">.filter()</span></code><span
          class="Apple-converted-space">&nbsp;</span>on it), but<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>has a<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">fromGraph()</span></code>method
        that just adds the DSL to a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code>.
        There are similar methods on<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">BidiShape</span></code>,
        so it is easy to get back to the simpler DSL if a graph has the right
        shape. For convenience, it is also possible to skip the partial graph
        creation, and use one of the convenience creator methods. To demonstrate
        this, we will create the following graph:</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_graph_flow1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_graph_flow1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        code version of the above closed graph might look like this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Convert the partial graph of FlowShape to a Flow to get</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// access to the fluid DSL (for example to be able to call .filter())</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">partial</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Simple way to create a graph backed Source</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Exposing exactly one output port</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Building a Sink with a nested Flow, using the fluid DSL</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">nestedFlow</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">drop</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">named</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"nestedFlow"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">nestedFlow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Putting all together</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">closed</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">All
          graph builder sections check if the resulting graph has all ports
          connected except the exposed ones and will throw an exception if this
          is violated.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        are still in debt of demonstrating that<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space">&nbsp;</span>is a component just like
        any other, which can be embedded in graphs. In the following snippet we
        embed one closed graph in another:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">closed1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">closed2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">embeddedClosed</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">closed1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// …</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">embeddedClosed</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        type of the imported module indicates that the imported module has a<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ClosedShape</span></code>,
        and so we are not able to wire it to anything else inside the enclosing
        closed graph. Nevertheless, this "island" is embedded properly, and will
        be materialized just like any other module that is part of the graph.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        we have demonstrated, the two DSLs are fully interoperable, as they
        encode a similar nested structure of "boxes with ports", it is only the
        DSLs that differ to be as much powerful as possible on the given
        abstraction level. It is possible to embed complex graphs in the fluid
        DSL, and it is just as easy to import and embed a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>,
        etc, in a larger, complex structure.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        have also seen, that every module has a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Shape</span></code><span
          class="Apple-converted-space">&nbsp;</span>(for example a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>has a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SinkShape</span></code>)
        independently which DSL was used to create it. This uniform
        representation enables the rich composability of various stream
        processing entities in a convenient way.</p>
    </div>
    <div class="section" id="materialized-values" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Materialized_values" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Матеріалізовані
        значення</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Після
        усвідомлення, що&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code><span
          class="Apple-converted-space"> нічого більшого, ніж модуль без
          невикористаних портів</span> (він є островом), стає зрозумілим, що
        після матеріалізації єдиним шляхом взаємодіяти з роблячою логікою
        потока, що виконується, є деякий побічний канал. Цей побічний канал
        представлений як&nbsp;<span class="Apple-converted-space"></span><em style="font-style: italic;">матеріалізоване
          значення</em>. Ситуація подібна до акторів<span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Actor</span></code><span
          class="Apple-converted-space"></span>, де примірник&nbsp;<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Props</span></code><span
          class="Apple-converted-space"> описує логіку актора, але це виклик
          до&nbsp;</span><span class="Apple-converted-space"></span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">actorOf()</span></code><span
          class="Apple-converted-space">, що створює насправді роблячого актора,
          та повертає&nbsp;</span><span class="Apple-converted-space"> </span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
          class="Apple-converted-space">, що може бути використаний для
          комунікації з самим роблячим актором</span>. Оскільки&nbsp;<span class="Apple-converted-space"></span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Props</span></code><span
          class="Apple-converted-space"> може бути повторо використане</span>,
        кожний виклик буде повертати інше посилання.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
        it comes to streams, each materialization creates a new running network
        corresponding to the blueprint that was encoded in the provided<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>.
        To be able to interact with the running network, each materialization
        needs to return a different object that provides the necessary
        interaction capabilities. In other words, the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>can
        be seen as a factory, which creates:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;">a network of running processing
              entities, inaccessible from the outside</li>
            <li style="line-height: 18px;">a materialized value, optionally
              providing a controlled interaction capability with the network</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Unlike
        actors though, each of the processing stages might provide a
        materialized value, so when we compose multiple stages or modules, we
        need to combine the materialized value as well (there are default rules
        which make this easier, for example<span class="Apple-converted-space">&nbsp;</span><cite
          style="font-style: normal;">to()</cite><span class="Apple-converted-space">&nbsp;</span>and<span
          class="Apple-converted-space">&nbsp;</span><cite style="font-style: normal;">via()</cite><span
          class="Apple-converted-space">&nbsp;</span>takes care of the most
        common case of taking the materialized value to the left. See<span class="Apple-converted-space">&nbsp;</span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#flow-combine-mat-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Combining
            materialized values</span></a><span class="Apple-converted-space">&nbsp;</span>for
        details). We demonstrate how this works by a code example and a diagram
        which graphically demonstrates what is happening.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        propagation of the individual materialized values from the enclosed
        modules towards the top will look like this:</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_mat1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_mat1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
        implement the above, first, we create a composite<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,
        where the enclosed<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>have a materialized type of<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Promise[Unit]</span></code>.
        By using the combiner function<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Keep.left</span></code>,
        the resulting materialized type is of the nested module (indicated by
        the color<span class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">red</em><span
          class="Apple-converted-space">&nbsp;</span>on the diagram):</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Promise[Option[Int]]                                   (red)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maybe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Unit                                                   (black)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">take</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Promise[Int]                                          (red)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">left</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">named</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"nestedSource"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Next,
        we create a composite<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>from two smaller
        components. Here, the second enclosed<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>has a materialized type of<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future[OutgoingConnection]</span></code>,
        and we propagate this to the parent by using<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Keep.right</span></code><span
          class="Apple-converted-space">&nbsp;</span>as the combiner function
        (indicated by the color<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">yellow</em><span class="Apple-converted-space">&nbsp;</span>on
        the diagram):</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Unit                                                   (orange)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Future[OutgoingConnection]                             (yellow)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow3</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">OutgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tcp</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">().</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">outgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"localhost"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8080</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Future[OutgoingConnection]                             (yellow)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedFlow</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">OutgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">named</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"nestedFlow"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        a third step, we create a composite<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>,
        using our<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>as a building block. In
        this snippet, both the enclosed<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>and the folding<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>has a materialized value
        that is interesting for us, so we use<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Keep.both</span></code><span
          class="Apple-converted-space">&nbsp;</span>to get a<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Pair</span></code><span
          class="Apple-converted-space">&nbsp;</span>of them as the materialized
        type of<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSink</span></code><span
          class="Apple-converted-space">&nbsp;</span>(indicated by the color<span
          class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">blue</em><span
          class="Apple-converted-space">&nbsp;</span>on the diagram)</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Future[String]                                         (green)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">""</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">utf8String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to (Future[OutgoingConnection], Future[String])           (blue)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">OutgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedFlow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">both</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        the last example, we wire together<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSource</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSink</span></code><span
          class="Apple-converted-space">&nbsp;</span>and we use a custom
        combiner function to create a yet another materialized type of the
        resulting<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph</span></code>.
        This combiner function just ignores the<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future[Sink]</span></code><span
          class="Apple-converted-space">&nbsp;</span>part, and wraps the other
        two values in a custom case class<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">MyClass</span></code><span
          class="Apple-converted-space">&nbsp;</span>(indicated by color<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">purple</em><span class="Apple-converted-space">&nbsp;</span>on
        the diagram):</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MyClass</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]],</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">conn</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">OutgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">close</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">trySuccess</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="kwd" style="color: rgb(48, 166, 40);">None</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">p</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]],</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">rest</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">OutgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]))</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">MyClass</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">connFuture</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">rest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">_1</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">connFuture</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MyClass</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Materializes to Future[MyClass]                                        (purple)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">runnableGraph</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">MyClass</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          nested structure in the above example is not necessary for combining
          the materialized values, it just demonstrates how the two features
          work together. See<span class="Apple-converted-space">&nbsp;</span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-flows-and-basics.html#flow-combine-mat-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Combining
              materialized values</span></a><span class="Apple-converted-space">&nbsp;</span>for
          further examples of combining materialized values without nesting and
          hierarchy involved.</p>
      </div>
    </div>
    <div class="section" id="attributes" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Attributes" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Attributes</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        have seen that we can use<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">named()</span></code><span
          class="Apple-converted-space">&nbsp;</span>to introduce a nesting
        level in the fluid DSL (and also explicit nesting by using<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">create()</span></code><span
          class="Apple-converted-space">&nbsp;</span>from<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL</span></code>).
        Apart from having the effect of adding a nesting level,<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">named()</span></code><span
          class="Apple-converted-space">&nbsp;</span>is actually a shorthand for
        calling<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">withAttributes(Attributes.name("someName"))</span></code>.
        Attributes provide a way to fine-tune certain aspects of the
        materialized running entity. For example buffer sizes for asynchronous
        stages can be controlled via attributes (see<a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-rate.html#async-stream-buffers-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Buffers
            for asynchronous stages</span></a>). When it comes to hierarchic
        composition, attributes are inherited by nested modules, unless they
        override them with a custom value.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        code below, a modification of an earlier example sets the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">inputBuffer</span></code><span
          class="Apple-converted-space">&nbsp;</span>attribute on certain
        modules, but not on others:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSource</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"nestedSource"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Wrap, no inputBuffer set</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedFlow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inputBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)))</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// override</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">named</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"nestedFlow"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Wrap, no inputBuffer set</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nestedSink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">nestedFlow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// wire an atomic sink to the nestedFlow</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">name</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"nestedSink"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">and</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inputBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// override</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        effect is, that each module inherits the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">inputBuffer</span></code><span
          class="Apple-converted-space">&nbsp;</span>attribute from its
        enclosing parent, unless it has the same attribute explicitly set.<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSource</span></code><span
          class="Apple-converted-space">&nbsp;</span>gets the default attributes
        from the materializer itself.<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSink</span></code><span
          class="Apple-converted-space">&nbsp;</span>on the other hand has this
        attribute set, so it will be used by all nested modules.<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>will inherit from<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSink</span></code>except
        the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
          class="Apple-converted-space">&nbsp;</span>stage which has again an
        explicitly provided attribute overriding the inherited one.</p>
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <img alt="../../_images/compose_attributes1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/compose_attributes1.png"
        style="max-width: 100%; height: auto; border: 0px;">
      <div class="line-block">
        <div class="line"><br>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        diagram illustrates the inheritance process for the example code
        (representing the materializer default attributes as the color<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">red</em>, the attributes set on<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedSink</span></code><span
          class="Apple-converted-space">&nbsp;</span>as<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">blue</em><span class="Apple-converted-space">&nbsp;</span>and
        the attributes set on<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">nestedFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>as<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">green</em>).</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Buffers
      and working with rate</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">When
      upstream and downstream rates differ, especially when the throughput has
      spikes, it can be useful to introduce buffers in a stream. In this chapter
      we cover how buffers are used in Akka Streams.</p>
    <div class="section" id="buffers-for-asynchronous-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="async-stream-buffers-scala"></span>
      <h2 id="Buffers_for_asynchronous_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Buffers
        for asynchronous stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        this section we will discuss internal buffers that are introduced as an
        optimization when using asynchronous stages.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
        run a stage asynchronously it has to be marked explicitly as such using
        the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">.async</span></code><span
          class="Apple-converted-space">&nbsp;</span>method. Being run
        asynchronously means that a stage, after handing out an element to its
        downstream consumer is able to immediately process the next message. To
        demonstrate what we mean by this, let's take a look at the following
        example:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">s</span><span class="str" style="color: rgb(131, 185, 37);">"A: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$i</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">s</span><span class="str" style="color: rgb(131, 185, 37);">"B: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$i</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">s</span><span class="str" style="color: rgb(131, 185, 37);">"C: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$i</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">i</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Running
        the above example, one of the possible outputs looks like this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="pln" style="color: rgb(89, 80, 80);">A</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">A</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">2</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">B</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">A</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">3</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">B</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">2</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">C</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">B</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">3</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">C</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">2</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">C</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">3</span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
        that the order is<span class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">not</em><span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">A:1,</span><span class="Apple-converted-space">&nbsp;</span><span
            class="pre" style="color: rgb(11, 85, 103);">B:1,</span><span class="Apple-converted-space">&nbsp;</span><span
            class="pre" style="color: rgb(11, 85, 103);">C:1,</span><span class="Apple-converted-space">&nbsp;</span><span
            class="pre" style="color: rgb(11, 85, 103);">A:2,</span><span class="Apple-converted-space">&nbsp;</span><span
            class="pre" style="color: rgb(11, 85, 103);">B:2,</span><span class="Apple-converted-space">&nbsp;</span><span
            class="pre" style="color: rgb(11, 85, 103);">C:2,</span></code><span
          class="Apple-converted-space">&nbsp;</span>which would correspond to
        the normal fused synchronous execution model of flows where an element
        completely passes through the processing pipeline before the next
        element enters the flow. The next element is processed by an
        asynchronous stage as soon as it is emitted the previous one.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">While
        pipelining in general increases throughput, in practice there is a cost
        of passing an element through the asynchronous (and therefore thread
        crossing) boundary which is significant. To amortize this cost Akka
        Streams uses a<em style="font-style: italic;">windowed</em>,<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">batching</em><span class="Apple-converted-space">&nbsp;</span>backpressure
        strategy internally. It is windowed because as opposed to a<span class="Apple-converted-space">&nbsp;</span><a
          class="reference external" href="https://en.wikipedia.org/wiki/Stop-and-wait_ARQ"
          style="color: rgb(21, 169, 206); text-decoration: none;">Stop-And-Wait</a><span
          class="Apple-converted-space">&nbsp;</span>protocol multiple elements
        might be "in-flight" concurrently with requests for elements. It is also
        batching because a new element is not immediately requested once an
        element has been drained from the window-buffer but multiple elements
        are requested after multiple elements have been drained. This batching
        strategy reduces the communication cost of propagating the backpressure
        signal through the asynchronous boundary.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">While
        this internal protocol is mostly invisible to the user (apart form its
        throughput increasing effects) there are situations when these details
        get exposed. In all of our previous examples we always assumed that the
        rate of the processing chain is strictly coordinated through the
        backpressure signal causing all stages to process no faster than the
        throughput of the connected chain. There are tools in Akka Streams
        however that enable the rates of different segments of a processing
        chain to be "detached" or to define the maximum throughput of the stream
        through external timing sources. These situations are exactly those
        where the internal batching buffering strategy suddenly becomes
        non-transparent.</p>
      <div class="section" id="internal-buffers-and-their-effect">
        <h3 id="Internal_buffers_and_their_effect" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Internal
          buffers and their effect</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          we have explained, for performance reasons Akka Streams introduces a
          buffer for every asynchronous processing stage. The purpose of these
          buffers is solely optimization, in fact the size of 1 would be the
          most natural choice if there would be no need for throughput
          improvements. Therefore it is recommended to keep these buffer sizes
          small, and increase them only to a level suitable for the throughput
          requirements of the application. Default buffer sizes can be set
          through configuration:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">input</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">16</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Alternatively
          they can be set by passing a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializerSettings</span></code><span
            class="Apple-converted-space">&nbsp;</span>to the materializer:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">materializer</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializerSettings</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withInputBuffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">64</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">64</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the buffer size needs to be set for segments of a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>only, it is possible by
          defining a separate<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>with these attributes:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">section</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">*</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">async</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">addAttributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inputBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initial</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">max</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// the buffer size of this map is 1</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">section</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">/</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">async</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// the buffer size of this map is the default</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is an example of a code that demonstrate some of the issues caused by
          internal buffers:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">scala</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">concurrent</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">duration</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// this is the asynchronous stage in this graph</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zipper</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tick</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">count</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">count</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">async</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tick</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialDelay</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">interval</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">())</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zipper</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tick</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialDelay</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">interval</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"message!"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">conflateWithSeed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seed</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">count</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">count</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zipper</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zipper</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Running
          the above example one would expect the number<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">3</em><span class="Apple-converted-space">&nbsp;</span>to
          be printed in every 3 seconds (the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code>step
          here is configured so that it counts the number of elements received
          before the downstream<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>consumes them). What is
          being printed is different though, we will see the number<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">1</em>. The reason for this is the
          internal buffer which is by default 16 elements large, and prefetches
          elements before the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>starts consuming them. It
          is possible to fix this issue by changing the buffer size of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>(or the whole graph) to
          1. We will still see a leading 1 though which is caused by an initial
          prefetch of the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>element.</p>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
            general, when time or rate driven processing stages exhibit strange
            behavior, one of the first solutions to try should be to decrease
            the input buffer of the affected elements to 1.</p>
        </div>
      </div>
    </div>
    <div class="section" id="buffers-in-akka-streams" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Buffers_in_Akka_Streams" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Buffers
        in Akka Streams</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        this section we will discuss<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">explicit</em><span class="Apple-converted-space">&nbsp;</span>user
        defined buffers that are part of the domain logic of the stream
        processing pipeline of an application.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        example below will ensure that 1000 jobs (but not more) are dequeued
        from an external (imaginary) system and stored locally in memory -
        relieving the external system:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Getting a stream of jobs from an imaginary external system as a Source</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">jobs</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inboundJobsConnector</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">backpressure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        next example will also queue up 1000 jobs locally, but if there are more
        jobs waiting in the imaginary external systems, it makes space for the
        new element by dropping one element from the<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">tail</em><span class="Apple-converted-space">&nbsp;</span>of
        the buffer. Dropping from the tail is a very common strategy but it must
        be noted that this will drop the<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">youngest</em><span class="Apple-converted-space">&nbsp;</span>waiting
        job. If some "fairness" is desired in the sense that we want to be nice
        to jobs that has been waiting for long, then this option can be useful.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropTail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Instead
        of dropping the youngest element from the tail of the buffer a new
        element can be dropped without enqueueing it to the buffer at all.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropNew</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
        is another example with a queue of 1000 jobs, but it makes space for the
        new element by dropping one element from the<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">head</em><span class="Apple-converted-space">&nbsp;</span>of
        the buffer. This is the<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">oldest</em><span class="Apple-converted-space">&nbsp;</span>waiting
        job. This is the preferred strategy if jobs are expected to be resent if
        not processed in a certain period. The oldest element will be
        retransmitted soon, (in fact a retransmitted duplicate might be already
        in the queue!) so it makes sense to drop it first.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Compared
        to the dropping strategies above, dropBuffer drops all the 1000 jobs it
        has enqueued once the buffer gets full. This aggressive strategy is
        useful when dropping jobs is preferred to delaying jobs.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        our imaginary external job provider is a client using our API, we might
        want to enforce that the client cannot have more than 1000 queued jobs
        otherwise we consider it flooding and terminate the connection. This is
        easily achievable by the error strategy which simply fails the stream
        once the buffer gets full.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="rate-transformation" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Rate_transformation" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Rate
        transformation</h2>
      <div class="section" id="understanding-conflate">
        <h3 id="Understanding_conflate" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Understanding
          conflate</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          a fast producer can not be informed to slow down by backpressure or
          some other signal,<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space">&nbsp;</span>might be useful to
          combine elements from a producer until a demand signal comes from a
          consumer.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Below
          is an example snippet that summarizes fast stream of elements to a
          standart deviation, mean and count of elements that have arrived while
          the stats have been calculated.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">statsFlow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Double</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">conflateWithSeed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">:+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pun" style="color: rgb(89, 80, 80);">μ</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sum</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">/</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">se</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">x</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">x</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pun" style="color: rgb(89, 80, 80);">μ</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pun"
style="color: rgb(89, 80, 80);">σ</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sqrt</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">se</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sum</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">/</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">se</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">size</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pun" style="color: rgb(89, 80, 80);">σ</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pun" style="color: rgb(89, 80, 80);">μ</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">size</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          example demonstrates that such flow's rate is decoupled. The element
          rate at the start of the flow can be much higher that the element rate
          at the end of the flow.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Another
          possible use of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space">&nbsp;</span>is to not consider all
          elements for summary when producer starts getting too fast. Example
          below demonstrates how<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space">&nbsp;</span>can be used to implement
          random drop of elements when consumer is not able to keep up with the
          producer.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">p</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0.01</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sampleFlow</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Double</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">conflateWithSeed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Random</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">nextDouble</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">:+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);">                             </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">acc</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapConcat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="understanding-expand">
        <h3 id="Understanding_expand" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Understanding
          expand</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Expand
          helps to deal with slow producers which are unable to keep up with the
          demand coming from consumers. Expand allows to extrapolate a value to
          be sent as an element to a consumer.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          a simple use of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">expand</span></code><span
            class="Apple-converted-space">&nbsp;</span>here is a flow that sends
          the same element to consumer when producer does not send any new
          elements.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastFlow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Double</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">continually</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Expand
          also allows to keep some state between demand requests from the
          downstream. Leveraging this, here is a flow that tracks and reports a
          drift between fast consumer and slow producer.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">driftFlow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Double</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that all of the elements coming from upstream will go through<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">expand</span></code><span
            class="Apple-converted-space">&nbsp;</span>at least once. This means
          that the output of this flow is going to report a drift of zero if
          producer is fast enough, or a larger drift otherwise.</p>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Dynamic
      stream handling</h1>
    <div class="section" id="controlling-graph-completion-with-killswitch" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="kill-switch-scala"></span>
      <h2 id="Controlling_graph_completion_with_KillSwitch" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Controlling
        graph completion with KillSwitch</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">KillSwitch</span></code><span
          class="Apple-converted-space">&nbsp;</span>allows the completion of
        graphs of<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code><span
          class="Apple-converted-space">&nbsp;</span>from the outside. It
        consists of a flow element that can be linked to a graph of<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code><span
          class="Apple-converted-space">&nbsp;</span>needing completion control.
        The<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">KillSwitch</span></code><span
          class="Apple-converted-space">&nbsp;</span>trait allows to complete or
        fail the graph(s).</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">trait</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">KillSwitch</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="cm" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">/**</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">   * After calling [[KillSwitch#shutdown()]] the linked [[Graph]]s of [[FlowShape]] are completed normally.</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">   */</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">shutdown</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="cm" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">/**</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">   * After calling [[KillSwitch#abort()]] the linked [[Graph]]s of [[FlowShape]] are failed.</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">   */</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">abort</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ex</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Throwable</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">After
        the first call to either<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">shutdown</span></code><span
          class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">abort</span></code>,
        all subsequent calls to any of these methods will be ignored. Graph
        completion is performed by both</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;">completing its downstream</li>
        <li style="line-height: 18px;">cancelling (in case of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">shutdown</span></code>)
          or failing (in case of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">abort</span></code>)
          its upstream.</li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">KillSwitch</span></code><span
          class="Apple-converted-space">&nbsp;</span>can control the completion
        of one or multiple streams, and therefore comes in two different
        flavours.</p>
      <div class="section" id="uniquekillswitch"><span id="unique-kill-switch-scala"></span>
        <h3 id="UniqueKillSwitch" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">UniqueKillSwitch</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">UniqueKillSwitch</span></code><span
            class="Apple-converted-space">&nbsp;</span>allows to control the
          completion of<span class="Apple-converted-space">&nbsp;</span><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">one</strong><span
            class="Apple-converted-space">&nbsp;</span>materialized<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Graph</span></code><span
            class="Apple-converted-space">&nbsp;</span>of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code>.
          Refer to the below for usage examples.</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Shutdown</strong></li>
        </ul>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delay</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DelayOverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">backpressure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">killSwitch</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">KillSwitches</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">doSomethingElse</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">killSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shutdown</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span></li></ol></pre>
          </div>
        </div>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Abort</strong></li>
        </ul>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delay</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DelayOverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">backpressure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">killSwitch</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">viaMat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">KillSwitches</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">error</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RuntimeException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"boom!"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">killSwitch</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">abort</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">error</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">failed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">error</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="sharedkillswitch"><span id="shared-kill-switch-scala"></span>
        <h3 id="SharedKillSwitch" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">SharedKillSwitch</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SharedKillSwitch</span></code><span
            class="Apple-converted-space">&nbsp;</span>allows to control the
          completion of an arbitrary number graphs of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code>.
          It can be materialized multiple times via its<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>method, and all
          materialized graphs linked to it are controlled by the switch. Refer
          to the below for usage examples.</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Shutdown</strong></li>
        </ul>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delay</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DelayOverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">backpressure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">KillSwitches</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shared</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"my-kill-switch"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">last</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">delayedLast</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">delay</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DelayOverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">backpressure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">doSomethingElse</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shutdown</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delayedLast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li></ol></pre>
          </div>
        </div>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><strong style="font-weight: bold; color: rgb(11, 85, 103);">Abort</strong></li>
        </ul>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delay</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastSnk</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">last</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">KillSwitches</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shared</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"my-kill-switch"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">last1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">last2</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">countingSrc</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastSnk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">error</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RuntimeException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"boom!"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sharedKillSwitch</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">abort</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">error</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">last1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">failed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">error</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">last2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">failed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">second</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">shouldBe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">error</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A<span
              class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
              style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">UniqueKillSwitch</span></code><span
              class="Apple-converted-space">&nbsp;</span>is always a result of a
            materialization, whilst<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">SharedKillSwitch</span></code><span
              class="Apple-converted-space">&nbsp;</span>needs to be constructed
            before any materialization takes place.</p>
        </div>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Custom
      stream processing</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">While
      the processing vocabulary of Akka Streams is quite rich (see the<span class="Apple-converted-space">&nbsp;</span><a
        class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-cookbook.html#stream-cookbook-scala"
        style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Streams
          Cookbook</span></a><span class="Apple-converted-space">&nbsp;</span>for
      examples) it is sometimes necessary to define new transformation stages
      either because some functionality is missing from the stock operations, or
      for performance reasons. In this part we show how to build custom
      processing stages and graph junctions of various kinds.</p>
    <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
      <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
      <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        custom graph stage should not be the first tool you reach for, defining
        graphs using flows and the graph DSL is in general easier and does to a
        larger extent protect you from mistakes that might be easy to make with
        a custom<code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code></p>
    </div>
    <div class="section" id="custom-processing-with-graphstage" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="graphstage-scala"></span>
      <h2 id="Custom_processing_with_GraphStage" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Custom
        processing with GraphStage</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>abstraction can be used to
        create arbitrary graph processing stages with any number of input or
        output ports. It is a counterpart of the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphDSL.create()</span></code><span
          class="Apple-converted-space">&nbsp;</span>method which creates new
        stream processing stages by composing others. Where<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>differs is that it creates
        a stage that is itself not divisible into smaller ones, and allows state
        to be maintained inside it in a safe way.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        a first motivating example, we will build a new<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>that will simply emit
        numbers from 1 until it is cancelled. To start, we need to define the
        "interface" of our stage, which is called<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">shape</em><span class="Apple-converted-space">&nbsp;</span>in
        Akka Streams terminology (this is explained in more detail in the
        section<span class="Apple-converted-space">&nbsp;</span><a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-composition.html#composition-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Modularity,
            Composition and Hierarchy</span></a>). This is how this looks like:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">NumbersSource</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Define the (sole) output port of this stage</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"NumbersSource"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Define the shape of this stage, which is SourceShape with the port we defined above</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// This is where the actual (possibly stateful) logic will live</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">???</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
        you see, in itself the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>only defines the ports of
        this stage and a shape that contains the ports. It also has, a currently
        unimplemented method called<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">createLogic</span></code>.
        If you recall, stages are reusable in multiple materializations, each
        resulting in a different executing entity. In the case of<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>the actual running logic is
        modeled as an instance of a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStageLogic</span></code><span
          class="Apple-converted-space">&nbsp;</span>which will be created by
        the materializer by calling the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">createLogic</span></code><span
          class="Apple-converted-space">&nbsp;</span>method. In other words, all
        we need to do is to create a suitable logic that will emit the numbers
        we want.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
          is very important to keep the GraphStage object itself immutable and
          reusable. All mutable state needs to be confined to the
          GraphStageLogic that is created for every materialization.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        order to emit from a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>in a backpressured stream
        one needs first to have demand from downstream. To receive the necessary
        events one needs to register a subclass of<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">OutHandler</span></code><span
          class="Apple-converted-space">&nbsp;</span>with the output port (<code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Outlet</span></code>).
        This handler will receive events related to the lifecycle of the port.
        In our case we need to override<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onPull()</span></code><span
          class="Apple-converted-space">&nbsp;</span>which indicates that we are
        free to emit a single element. There is another callback,<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onDownstreamFinish()</span></code><span
          class="Apple-converted-space">&nbsp;</span>which is called if the
        downstream cancelled. Since the default behavior of that callback is to
        stop the stage, we don't need to override it. In the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onPull</span></code><span
          class="Apple-converted-space">&nbsp;</span>callback we will simply
        emit the next number. This is how it looks like in the end:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Graph</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">NumbersSource</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"NumbersSource"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// All state MUST be inside the GraphStageLogic,</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// never inside the enclosing GraphStage.</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// This state is safe to access and modify from all the</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// callbacks that are provided by GraphStageLogic and the</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// registered handlers.</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">counter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">counter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">counter</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Instances
        of the above<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>are subclasses of<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Graph[SourceShape[Int],Unit]</span></code><span
          class="Apple-converted-space">&nbsp;</span>which means that they are
        already usable in many situations, but do not provide the DSL methods we
        usually have for other<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>s. In order to convert this<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Graph</span></code><span
          class="Apple-converted-space">&nbsp;</span>to a proper<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>we need to wrap it using<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.fromGraph</span></code><span
          class="Apple-converted-space">&nbsp;</span>(see<span class="Apple-converted-space">&nbsp;</span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-composition.html#composition-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Modularity,
            Composition and Hierarchy</span></a><span class="Apple-converted-space">&nbsp;</span>for
        more details about graphs and DSLs). Now we can use the source as any
        other built-in one:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// A GraphStage is a proper Graph, just like what GraphDSL.create would return</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceGraph</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Graph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">SourceShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">NumbersSource</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Create a Source from the Graph to access the DSL</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mySource</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sourceGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Returns 55</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mySource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">take</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runFold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// The source is reusable. This returns 5050</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mySource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">take</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runFold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Similarly,
        to create a custom<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>one can register a subclass<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">InHandler</span></code><span
          class="Apple-converted-space">&nbsp;</span>with the stage<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Inlet</span></code>.
        The<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code>callback
        is used to signal the handler a new element has been pushed to the
        stage, and can hence be grabbed and used.<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
          class="Apple-converted-space">&nbsp;</span>can be overridden to
        provide custom behaviour. Please note, most Sinks would need to request
        upstream elements as soon as they are created: this can be done by
        calling<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">pull(inlet)</span></code><span
          class="Apple-converted-space">&nbsp;</span>in the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">preStart()</span></code><span
          class="Apple-converted-space">&nbsp;</span>callback.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">SinkShape</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">StdoutSink</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">SinkShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"StdoutSink"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">SinkShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">SinkShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// This requests one element at the Sink startup.</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">preStart</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <div class="section" id="port-states-inhandler-and-outhandler">
        <h3 id="Port_states__InHandler_and_OutHandler" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Port
          states, InHandler and OutHandler</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          order to interact with a port (<code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Inlet</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Outlet</span></code>)
          of the stage we need to be able to receive events and generate new
          events belonging to the port. From the<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStageLogic</span></code><span
            class="Apple-converted-space">&nbsp;</span>the following operations
          are available on an output port:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">push(out,elem)</span></code><span
              class="Apple-converted-space">&nbsp;</span>pushes an element to
            the output port. Only possible after the port has been pulled by
            downstream.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">complete(out)</span></code><span
              class="Apple-converted-space">&nbsp;</span>closes the output port
            normally.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">fail(out,exception)</span></code><span
              class="Apple-converted-space">&nbsp;</span>closes the port with a
            failure signal.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          events corresponding to an<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">output</em><span class="Apple-converted-space">&nbsp;</span>port
          can be received in an<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutHandler</span></code><span
            class="Apple-converted-space">&nbsp;</span>instance registered to
          the output port using<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">setHandler(out,handler)</span></code>.
          This handler has two callbacks:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPull()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is called when the
            output port is ready to emit the next element,<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">push(out,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">elem)</span></code><span
              class="Apple-converted-space">&nbsp;</span>is now allowed to be
            called on this port.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onDownstreamFinish()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is called once the
            downstream has cancelled and no longer allows messages to be pushed
            to it. No more<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPull()</span></code><span
              class="Apple-converted-space">&nbsp;</span>will arrive after this
            event. If not overridden this will default to stopping the stage.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Also,
          there are two query methods available for output ports:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">isAvailable(out)</span></code><span
              class="Apple-converted-space">&nbsp;</span>returns true if the
            port can be pushed</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">isClosed(out)</span></code><span
              class="Apple-converted-space">&nbsp;</span>returns true if the
            port is closed. At this point the port can not be pushed and will
            not be pulled anymore.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          relationship of the above operations, events and queries are
          summarized in the state machine below. Green shows the initial state
          while orange indicates the end state. If an operation is not listed
          for a state, then it is invalid to call it while the port is in that
          state. If an event is not listed for a state, then that event cannot
          happen in that state.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <img alt="../../_images/outport_transitions1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/outport_transitions1.png"
          style="max-width: 100%; height: auto; border: 0px;">
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          following operations are available for<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">input</em><span class="Apple-converted-space">&nbsp;</span>ports:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">pull(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>requests a new element
            from an input port. This is only possible after the port has been
            pushed by upstream.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">grab(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>acquires the element
            that has been received during an<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code>.
            It cannot be called again until the port is pushed again by the
            upstream.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">cancel(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>closes the input port.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          events corresponding to an<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">input</em><span class="Apple-converted-space">&nbsp;</span>port
          can be received in an<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InHandler</span></code><span
            class="Apple-converted-space">&nbsp;</span>instance registered to
          the input port using<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">setHandler(in,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">handler)</span></code>.
          This handler has three callbacks:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is called when the
            input port has now a new element. Now it is possible to acquire this
            element using<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">grab(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>and/or call<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">pull(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>on the port to request
            the next element. It is not mandatory to grab the element, but if it
            is pulled while the element has not been grabbed it will drop the
            buffered element.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onUpstreamFinish()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is called once the
            upstream has completed and no longer can be pulled for new elements.
            No more<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
              style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
              class="Apple-converted-space">&nbsp;</span>will arrive after this
            event. If not overridden this will default to stopping the stage.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onUpstreamFailure()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is called if the
            upstream failed with an exception and no longer can be pulled for
            new elements. No more<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
              class="Apple-converted-space">&nbsp;</span>will arrive after this
            event. If not overridden this will default to failing the stage.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Also,
          there are three query methods available for input ports:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">isAvailable(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>returns true if the
            port can be grabbed.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">hasBeenPulled(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>returns true if the
            port has been already pulled. Calling<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">pull(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>in this state is
            illegal.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">isClosed(in)</span></code><span
              class="Apple-converted-space">&nbsp;</span>returns true if the
            port is closed. At this point the port can not be pulled and will
            not be pushed anymore.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          relationship of the above operations, events and queries are
          summarized in the state machine below. Green shows the initial state
          while orange indicates the end state. If an operation is not listed
          for a state, then it is invalid to call it while the port is in that
          state. If an event is not listed for a state, then that event cannot
          happen in that state.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <img alt="../../_images/inport_transitions1.png" class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/inport_transitions1.png"
          style="max-width: 100%; height: auto; border: 0px;">
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Finally,
          there are two methods available for convenience to complete the stage
          and all of its ports:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">completeStage()</span></code><span
              class="Apple-converted-space">&nbsp;</span>is equivalent to
            closing all output ports and cancelling all input ports.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">failStage(exception)</span></code><span
              class="Apple-converted-space">&nbsp;</span>is equivalent to
            failing all output ports and cancelling all input ports.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          some cases it is inconvenient and error prone to react on the regular
          state machine events with the signal based API described above. For
          those cases there is an API which allows for a more declarative
          sequencing of actions which will greatly simplify some use cases at
          the cost of some extra allocations. The difference between the two
          APIs could be described as that the first one is signal driven from
          the outside, while this API is more active and drives its
          surroundings.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          operations of this part of the :class:<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>API are:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">emit(out,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">elem)</span></code><span
              class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">emitMultiple(out,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Iterable(elem1,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">elem2))</span></code><span
              class="Apple-converted-space">&nbsp;</span>replaces the<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">OutHandler</span></code><span
              class="Apple-converted-space">&nbsp;</span>with a handler that
            emits one or more elements when there is demand, and then reinstalls
            the current handlers</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">read(in)(andThen)</span></code><span
              class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">readN(in,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">n)(andThen)</span></code><span
              class="Apple-converted-space">&nbsp;</span>replaces the<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">InHandler</span></code><span
              class="Apple-converted-space">&nbsp;</span>with a handler that
            reads one or more elements as they are pushed and allows the handler
            to react once the requested number of elements has been read.</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">abortEmitting()</span></code><span
              class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">abortReading()</span></code><span
              class="Apple-converted-space">&nbsp;</span>which will cancel an
            ongoing emit or read</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that since the above methods are implemented by temporarily replacing
          the handlers of the stage you should never call<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">setHandler</span></code><span
            class="Apple-converted-space">&nbsp;</span>while they are running<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emit</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">read</span></code><span
            class="Apple-converted-space">&nbsp;</span>as that interferes with
          how they are implemented. The following methods are safe to call after
          invoking<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emit</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">read</span></code><span
            class="Apple-converted-space">&nbsp;</span>(and will lead to
          actually running the operation when those are done):<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">complete(out)</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">completeStage()</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emit</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emitMultiple</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">abortEmitting()</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">abortReading()</span></code></p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">An
          example of how this API simplifies a stage can be found below in the
          second version of the :class:<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Duplicator</span></code>.</p>
      </div>
      <div class="section" id="custom-linear-processing-stages-using-graphstage">
        <h3 id="Custom_linear_processing_stages_using_GraphStage" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Custom
          linear processing stages using GraphStage</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Graph
          stages allows for custom linear processing stages through letting them
          have one input and one output and using<code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowShape</span></code><span
            class="Apple-converted-space">&nbsp;</span>as their shape.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Such
          a stage can be illustrated as a box with two flows as it is seen in
          the illustration below. Demand flowing upstream leading to elements
          flowing downstream.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_conceptual1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_conceptual1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_conceptual1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 500px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          illustrate these concepts we create a small<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>that implements the<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
            class="Apple-converted-space">&nbsp;</span>transformation.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_map1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_map1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_map1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 300px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Map
          calls<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">push(out)</span></code><span
            class="Apple-converted-space">&nbsp;</span>from the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler and it also calls<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">pull()</span></code><span
            class="Apple-converted-space">&nbsp;</span>from the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler resulting in the
          conceptual wiring above, and fully expressed in code below:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">A</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">B</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">](</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">f</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Map.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">B</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Map.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">attr</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Map
          is a typical example of a one-to-one transformation of a stream where
          demand is passed along upstream elements passed on downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          demonstrate a many-to-one stage we will implement filter. The
          conceptual wiring of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Filter</span></code><span
            class="Apple-converted-space">&nbsp;</span>looks like this:</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_filter1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_filter1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_filter1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 300px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          we see above, if the given predicate matches the current element we
          are propagating it downwards, otherwise we return the “ball” to our
          upstream so that we get the new element. This is achieved by modifying
          the map example by adding a conditional in the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler and decide
          between a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">pull(in)</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">push(out)</span></code><span
            class="Apple-converted-space">&nbsp;</span>call (and of course not
          having a mapping<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">f</span></code><span
            class="Apple-converted-space">&nbsp;</span>function).</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">A</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Boolean</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Filter.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Filter.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">p</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          complete the picture we define a one-to-many transformation as the
          next step. We chose a straightforward example stage that emits every
          upstream element twice downstream. The conceptual wiring of this stage
          looks like this:</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_duplicate1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_duplicate1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_duplicate1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 300px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is a stage that has state: an option with the last element it has seen
          indicating if it has duplicated this last element already or not. We
          must also make sure to emit the extra element if the upstream
          completes.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Duplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Duplicator.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Duplicator.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Again: note that all mutable state</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// MUST be inside the GraphStageLogic</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastElem</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="kwd" style="color: rgb(48, 166, 40);">None</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastElem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Some</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onUpstreamFinish</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastElem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isDefined</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emit</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastElem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">complete</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastElem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isDefined</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastElem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lastElem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">None</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          this case a pull from downstream might be consumed by the stage itself
          rather than passed along upstream as the stage might contain an
          element it wants to push. Note that we also need to handle the case
          where the upstream closes while the stage still has elements it wants
          to push downstream. This is done by overriding<span class="Apple-converted-space">&nbsp;</span><cite
            style="font-style: normal;">onUpstreamFinish</cite><span class="Apple-converted-space">&nbsp;</span>in
          the<cite style="font-style: normal;">InHandler</cite><span class="Apple-converted-space">&nbsp;</span>and
          provide custom logic that should happen when the upstream has been
          finished.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          example can be simplified by replacing the usage of a mutable state
          with calls to<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emitMultiple</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will replace the
          handlers, emit each of multiple elements and then reinstate the
          original handlers:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Duplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Duplicator.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Duplicator.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// this will temporarily suspend this handler until the two elems</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// are emitted and then reinstates it</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emitMultiple</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Iterable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Finally,
          to demonstrate all of the stages above, we put them together into a
          processing chain, which conceptually would correspond to the following
          structure:</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_chain1.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_chain1.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_chain1.png"
            style="max-width: 100%; height: auto; border: 0px; width: 700px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          code this is only a few lines, using the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">via</span></code><span
            class="Apple-converted-space">&nbsp;</span>use our custom stages in
          a stream:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">resultFuture</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">%</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Duplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">())</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">/</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          we attempt to draw the sequence of events, it shows that there is one
          "event token" in circulation in a potential chain of stages, just like
          our conceptual "railroad tracks" representation predicts.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_tracks_11.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_tracks_11.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_tracks_11.png"
            style="max-width: 100%; height: auto; border: 0px; width: 700px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
      </div>
      <div class="section" id="completion">
        <h3 id="Completion" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Completion</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Completion
          handling usually (but not exclusively) comes into the picture when
          processing stages need to emit a few more elements after their
          upstream source has been completed. We have seen an example of this in
          our first<code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Duplicator</span></code><span
            class="Apple-converted-space">&nbsp;</span>implementation where the
          last element needs to be doubled even after the upstream neighbor
          stage has been completed. This can be done by overriding the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onUpstreamFinish</span></code><span
            class="Apple-converted-space">&nbsp;</span>method in<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InHandler</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stages
          by default automatically stop once all of their ports (input and
          output) have been closed externally or internally. It is possible to
          opt out from this behavior by invoking<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">setKeepGoing(true)</span></code><span
            class="Apple-converted-space">&nbsp;</span>(which is not supported
          from the stage’s constructor and usually done in<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">preStart</span></code>).
          In this case the stage<span class="Apple-converted-space">&nbsp;</span><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">must</strong><span
            class="Apple-converted-space">&nbsp;</span>be explicitly closed by
          calling<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">completeStage()</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">failStage(exception)</span></code>.
          This feature carries the risk of leaking streams and actors, therefore
          it should be used with care.</p>
      </div>
      <div class="section" id="using-timers">
        <h3 id="Using_timers" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Using
          timers</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
          is possible to use timers in<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStages</span></code><span
            class="Apple-converted-space">&nbsp;</span>by using<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TimerGraphStageLogic</span></code><span
            class="Apple-converted-space">&nbsp;</span>as the base class for the
          returned logic. Timers can be scheduled by calling one of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">scheduleOnce(key,delay)</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">schedulePeriodically(key,period)</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">schedulePeriodicallyWithInitialDelay(key,delay,period)</span></code><span
            class="Apple-converted-space">&nbsp;</span>and passing an object as
          a key for that timer (can be any object, for example a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">String</span></code>).
          The<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onTimer(key)</span></code><span
            class="Apple-converted-space">&nbsp;</span>method needs to be
          overridden and it will be called once the timer of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">key</span></code><span
            class="Apple-converted-space">&nbsp;</span>fires. It is possible to
          cancel a timer using<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">cancelTimer(key)</span></code><span
            class="Apple-converted-space">&nbsp;</span>and check the status of a
          timer with<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">isTimerActive(key)</span></code>.
          Timers will be automatically cleaned up when the stage completes.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Timers
          can not be scheduled from the constructor of the logic, but it is
          possible to schedule them from the<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">preStart()</span></code><span
            class="Apple-converted-space">&nbsp;</span>lifecycle hook.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          this sample the stage toggles between open and closed, where open
          means no elements are passed through. The stage starts out as closed
          but as soon as an element is pushed downstream the gate becomes open
          for a duration of time during which it will consume and drop upstream
          messages:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// each time an event is pushed through it will trigger a period of silence</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TimedGate</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">silencePeriod</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">FiniteDuration</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"TimedGate.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"TimedGate.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TimerGraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">open</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">false</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">open</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">open</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kc" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">true</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">            </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">scheduleOnce</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="kwd" style="color: rgb(48, 166, 40);">None</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">silencePeriod</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">protected</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onTimer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">timerKey</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Any</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">open</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kc" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">false</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="using-asynchronous-side-channels">
        <h3 id="Using_asynchronous_side-channels" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Using
          asynchronous side-channels</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          order to receive asynchronous events that are not arriving as stream
          elements (for example a completion of a future or a callback from a
          3rd party API) one must acquire a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">AsyncCallback</span></code><span
            class="Apple-converted-space">&nbsp;</span>by calling<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">getAsyncCallback()</span></code><span
            class="Apple-converted-space">&nbsp;</span>from the stage logic. The
          method<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">getAsyncCallback</span></code><span
            class="Apple-converted-space">&nbsp;</span>takes as a parameter a
          callback that will be called once the asynchronous event fires. It is
          important to<span class="Apple-converted-space">&nbsp;</span><strong style="font-weight: bold; color: rgb(11, 85, 103);">not
            call the callback directly</strong>, instead, the external API must
          call the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">invoke(event)</span></code>method
          on the returned<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">AsyncCallback</span></code>.
          The execution engine will take care of calling the provided callback
          in a thread-safe way. The callback can safely access the state of the<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStageLogic</span></code><span
            class="Apple-converted-space">&nbsp;</span>implementation.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Sharing
          the AsyncCallback from the constructor risks race conditions,
          therefore it is recommended to use the<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">preStart()</span></code><span
            class="Apple-converted-space">&nbsp;</span>lifecycle hook instead.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          example shows an asynchronous side channel graph stage that starts
          dropping elements when a future completes:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// will close upstream in all materializations of the graph stage instance</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// when the future completes</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">KillSwitch</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">switch</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"KillSwitch.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"KillSwitch.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">preStart</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">callback</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getAsyncCallback</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">completeStage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">switch</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">callback</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">invoke</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="integration-with-actors">
        <h3 id="Integration_with_actors" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Integration
          with actors</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">This section is
            a stub and will be extended in the next release</strong><span class="Apple-converted-space">&nbsp;</span><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">This is an
            experimental feature*</strong></p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
          is possible to acquire an ActorRef that can be addressed from the
          outside of the stage, similarly how<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">AsyncCallback</span></code>allows
          injecting asynchronous events into a stage logic. This reference can
          be obtained by calling<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">getStageActorRef(receive)</span></code><span
            class="Apple-converted-space">&nbsp;</span>passing in a function
          that takes a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Pair</span></code><span
            class="Apple-converted-space">&nbsp;</span>of the sender<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
            class="Apple-converted-space">&nbsp;</span>and the received message.
          This reference can be used to watch other actors by calling its<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">watch(ref)</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">unwatch(ref)</span></code><span
            class="Apple-converted-space">&nbsp;</span>methods. The reference
          can be also watched by external actors. The current limitations of
          this<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
            class="Apple-converted-space">&nbsp;</span>are:</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>
            <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
              <li style="line-height: 18px;">they are not location transparent,
                they cannot be accessed via remoting.</li>
              <li style="line-height: 18px;">they cannot be returned as
                materialized values.</li>
              <li style="line-height: 18px;">they cannot be accessed from the
                constructor of the<span class="Apple-converted-space">&nbsp;</span><code
                  class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">GraphStageLogic</span></code>,
                but they can be accessed from the<code class="docutils literal"
                  style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">preStart()</span></code><span
                  class="Apple-converted-space">&nbsp;</span>method.</li>
            </ul>
          </div>
        </blockquote>
      </div>
      <div class="section" id="custom-materialized-values">
        <h3 id="Custom_materialized_values" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Custom
          materialized values</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Custom
          stages can return materialized values instead of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Unit</span></code><span
            class="Apple-converted-space">&nbsp;</span>by inheriting from<code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStageWithMaterializedValue</span></code><span
            class="Apple-converted-space">&nbsp;</span>instead of the simpler<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code>.
          The difference is that in this case the method<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">createLogicAndMaterializedValue(inheritedAttributes)</span></code><span
            class="Apple-converted-space">&nbsp;</span>needs to be overridden,
          and in addition to the stage logic the materialized value must be
          provided</p>
        <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">There
            is no built-in synchronization of accessing this value from both of
            the thread where the logic runs and the thread that got hold of the
            materialized value. It is the responsibility of the programmer to
            add the necessary (non-blocking) synchronization and visibility
            guarantees to this shared object.</p>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          this sample the materialized value is a future containing the first
          element to go through the stream:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FirstValue</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageWithMaterializedValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"FirstValue.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"FirstValue.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogicAndMaterializedValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]()</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">logic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">promise</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">success</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// replace handler with one just forwarding</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">              </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">logic</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">promise</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="using-attributes-to-affect-the-behavior-of-a-stage">
        <h3 id="Using_attributes_to_affect_the_behavior_of_a_stage" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Using
          attributes to affect the behavior of a stage</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">This section is
            a stub and will be extended in the next release</strong></p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stages
          can access the<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Attributes</span></code><span
            class="Apple-converted-space">&nbsp;</span>object created by the
          materializer. This contains all the applied (inherited) attributes
          applying to the stage, ordered from least specific (outermost) towards
          the most specific (innermost) attribute. It is the responsibility of
          the stage to decide how to reconcile this inheritance chain to a final
          effective decision.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">See<span
            class="Apple-converted-space">&nbsp;</span><a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-composition.html#composition-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Modularity,
              Composition and Hierarchy</span></a><span class="Apple-converted-space">&nbsp;</span>for
          an explanation on how attributes work.</p>
      </div>
      <div class="section" id="rate-decoupled-graph-stages">
        <h3 id="Rate_decoupled_graph_stages" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Rate
          decoupled graph stages</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Sometimes
          it is desirable to<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">decouple</em><span class="Apple-converted-space">&nbsp;</span>the
          rate of the upstream and downstream of a stage, synchronizing only
          when needed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is achieved in the model by representing a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>as a<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">boundary</em><span class="Apple-converted-space">&nbsp;</span>between
          two regions where the demand sent upstream is decoupled from the
          demand that arrives from downstream. One immediate consequence of this
          difference is that an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush</span></code><span
            class="Apple-converted-space">&nbsp;</span>call does not always lead
          to calling<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">push</span></code><span
            class="Apple-converted-space">&nbsp;</span>and an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull</span></code><span
            class="Apple-converted-space">&nbsp;</span>call does not always lead
          to calling<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">pull</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
          of the important use-case for this is to build buffer-like entities,
          that allow independent progress of upstream and downstream stages when
          the buffer is not full or empty, and slowing down the appropriate side
          if the buffer becomes empty or full.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          next diagram illustrates the event sequence for a buffer with capacity
          of two elements in a setting where the downstream demand is slow to
          start and the buffer will fill up with upstream elements before any
          demand is seen from downstream.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_detached_tracks_11.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_detached_tracks_11.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_detached_tracks_11.png"
            style="max-width: 100%; height: auto; border: 0px; width: 500px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Another
          scenario would be where the demand from downstream starts coming in
          before any element is pushed into the buffer stage.</p>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <a class="reference internal image-reference" href="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_detached_tracks_21.png"
          style="color: rgb(21, 169, 206); text-decoration: none;"><img alt="../../_images/graph_stage_detached_tracks_21.png"
            class="align-center" src="http://doc.akka.io/docs/akka/2.4/_images/graph_stage_detached_tracks_21.png"
            style="max-width: 100%; height: auto; border: 0px; width: 500px;"></a>
        <div class="line-block">
          <div class="line"><br>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          first difference we can notice is that our<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Buffer</span></code><span
            class="Apple-converted-space">&nbsp;</span>stage is automatically
          pulling its upstream on initialization. The buffer has demand for up
          to two elements without any downstream demand.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          following code example demonstrates a buffer class corresponding to
          the message sequence chart above.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TwoBuffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"TwoBuffer.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"TwoBuffer.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">mutable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">A</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bufferFull</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">downstreamWaiting</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">false</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">preStart</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// a detached stage needs to start upstream demand</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// itself as it is not triggered by downstream demand</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buffer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">enqueue</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">downstreamWaiting</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">downstreamWaiting</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">false</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bufferedElem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dequeue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bufferedElem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(!</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bufferFull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onUpstreamFinish</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">nonEmpty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// emit the rest if possible</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emitMultiple</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toIterator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isEmpty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">downstreamWaiting</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dequeue</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(!</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bufferFull</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&amp;&amp;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">hasBeenPulled</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">            </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="thread-safety-of-custom-processing-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Thread_safety_of_custom_processing_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Thread
        safety of custom processing stages</h2>
      <dl class="docutils" style="margin-bottom: 18px;">
        <dt style="line-height: 18px; font-weight: bold;">All of the above
          custom stages (linear or graph) provide a few simple guarantees that
          implementors can rely on.</dt>
        <dd style="line-height: 18px; margin-left: 9px;">
          <ul class="first last simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;">The callbacks exposed by all of these
              classes are never called concurrently.</li>
            <li style="line-height: 18px;">The state encapsulated by these
              classes can be safely modified from the provided callbacks,
              without any further synchronization.</li>
          </ul>
        </dd>
      </dl>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        essence, the above guarantees are similar to what<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Actor</span></code><span
          class="Apple-converted-space">&nbsp;</span>s provide, if one thinks of
        the state of a custom stage as state of an actor, and the callbacks as
        the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">receive</span></code><span
          class="Apple-converted-space">&nbsp;</span>block of the actor.</p>
      <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
          is<span class="Apple-converted-space">&nbsp;</span><strong style="font-weight: bold; color: rgb(255, 255, 255);">not
            safe</strong><span class="Apple-converted-space">&nbsp;</span>to
          access the state of any custom stage outside of the callbacks that it
          provides, just like it is unsafe to access the state of an actor from
          the outside. This means that Future callbacks should<span class="Apple-converted-space">&nbsp;</span><strong
            style="font-weight: bold; color: rgb(255, 255, 255);">not close over</strong><span
            class="Apple-converted-space">&nbsp;</span>internal state of custom
          stages because such access can be concurrent with the provided
          callbacks, leading to undefined behavior.</p>
      </div>
    </div>
    <div class="section" id="extending-flow-combinators-with-custom-operators" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Extending_Flow_Combinators_with_Custom_Operators" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Extending
        Flow Combinators with Custom Operators</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        most general way of extending any<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SubFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>(e.g. from<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code>)
        is demonstrated above: create a graph of flow-shape like the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Duplicator</span></code><span
          class="Apple-converted-space">&nbsp;</span>example given above and use
        the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">.via(...)</span></code><span
          class="Apple-converted-space">&nbsp;</span>combinator to integrate it
        into your stream topology. This works with all<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowOps</span></code><span
          class="Apple-converted-space">&nbsp;</span>sub-types, including the
        ports that you connect with the graph DSL.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Advanced
        Scala users may wonder whether it is possible to write extension methods
        that enrich<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FlowOps</span></code><span
          class="Apple-converted-space">&nbsp;</span>to allow nicer syntax. The
        short answer is that Scala 2 does not support this in a fully generic
        fashion, the problem is that it is impossible to abstract over the kind
        of stream that is being extended because<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SubFlow</span></code><span
          class="Apple-converted-space">&nbsp;</span>differ in the number and
        kind of their type parameters. While it would be possible to write an
        implicit class that enriches them generically, this class would require
        explicit instantiation with all type parameters due to<span class="Apple-converted-space">&nbsp;</span><a
          class="reference external" href="https://issues.scala-lang.org/browse/SI-2712"
          style="color: rgb(21, 169, 206); text-decoration: none;">SI-2712</a>.
        For a partial workaround that unifies extensions to<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>see<span class="Apple-converted-space">&nbsp;</span><a
          class="reference external" href="https://gist.github.com/rkuhn/2870fcee4937dda2cad5"
          style="color: rgb(21, 169, 206); text-decoration: none;">this sketch
          by R. Kuhn</a>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        lot simpler is the task of just adding an extension method to<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>as shown below:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SourceDuplicator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">duplicateElements</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Duplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">s</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">duplicateElements</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">futureValue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">should</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">===(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        analog works for<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>as well:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowDuplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">duplicateElements</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Mat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Duplicator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">duplicateElements</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">f</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">futureValue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">should</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">===(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        you try to write this for<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">SubFlow</span></code>,
        though, you will run into the same issue as when trying to unify the two
        solutions above, only on a higher level (the type constructors needed
        for that unification would have rank two, meaning that some of their
        type arguments are type constructors themselves—when trying to extend
        the solution shown in the linked sketch the author encountered such a
        density of compiler StackOverflowErrors and IDE failures that he gave
        up).</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is interesting to note that a simplified form of this problem has found
        its way into the<span class="Apple-converted-space">&nbsp;</span><a class="reference external"
          href="https://github.com/lampepfl/dotty/pull/1186/files" style="color: rgb(21, 169, 206); text-decoration: none;">dotty
          test suite</a>. Dotty is the development version of Scala on its way
        to Scala 3.</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Integration</h1>
    <div class="section" id="integrating-with-actors" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Integrating_with_Actors" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Integrating
        with Actors</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
        piping the elements of a stream as messages to an ordinary actor you can
        use the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.actorRef</span></code>.
        Messages can be sent to a stream via the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
          class="Apple-converted-space">&nbsp;</span>that is materialized by<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.actorRef</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
        more advanced use cases the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorPublisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorSubscriber</span></code><span
          class="Apple-converted-space">&nbsp;</span>traits are provided to
        support implementing Reactive Streams<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
          class="Apple-converted-space">&nbsp;</span>with an<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Actor</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        can be consumed by other Reactive Stream libraries or used as an Akka
        Streams<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.</p>
      <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>cannot be used with
          remote actors, because if signals of the Reactive Streams protocol
          (e.g.<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">request</span></code>)
          are lost the the stream may deadlock.</p>
      </div>
      <div class="section" id="source-actorref">
        <h3 id="Source_actorRef" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Source.actorRef</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Messages
          sent to the actor that is materialized by<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source.actorRef</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be emitted to the
          stream if there is demand from downstream, otherwise they will be
          buffered until request for demand is received.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Depending
          on the defined<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy</span></code><span
            class="Apple-converted-space">&nbsp;</span>it might drop elements if
          there is no space available in the buffer. The strategy<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy.backpressure</span></code><span
            class="Apple-converted-space">&nbsp;</span>is not supported for this
          Source type, you should consider using<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>if you want a
          backpressured actor interface.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          stream can be completed successfully by sending<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.actor.PoisonPill</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.actor.Status.Success</span></code><span
            class="Apple-converted-space">&nbsp;</span>to the actor reference.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          stream can be completed with failure by sending<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.actor.Status.Failure</span></code><span
            class="Apple-converted-space">&nbsp;</span>to the actor reference.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          actor will be stopped when the stream is completed, failed or
          cancelled from downstream, i.e. you can watch it to get notified when
          that happens.</p>
      </div>
      <div class="section" id="sink-actorref">
        <h3 id="Sink_actorRef" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Sink.actorRef</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          sink sends the elements of the stream to the given<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code>.
          If the target actor terminates the stream will be cancelled. When the
          stream is completed successfully the given<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onCompleteMessage</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be sent to the
          destination actor. When the stream is completed with failure a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.actor.Status.Failure</span></code><span
            class="Apple-converted-space">&nbsp;</span>message will be sent to
          the destination actor.</p>
        <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">There
            is no back-pressure signal from the destination actor, i.e. if the
            actor is not consuming the messages fast enough the mailbox of the
            actor will grow. For potentially slow consumer actors it is
            recommended to use a bounded mailbox with zero<span class="Apple-converted-space">&nbsp;</span><cite
              style="font-style: normal;">mailbox-push-timeout-time</cite><span
              class="Apple-converted-space">&nbsp;</span>or use a rate limiting
            stage in front of this stage.</p>
        </div>
      </div>
      <div class="section" id="actorpublisher">
        <h3 id="ActorPublisher" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">ActorPublisher</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Extend/mixin<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.actor.ActorPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>in your<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Actor</span></code><span
            class="Apple-converted-space">&nbsp;</span>to make it a stream
          publisher that keeps track of the subscription life cycle and
          requested elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is an example of such an actor. It dispatches incoming jobs to the
          attached subscriber:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">props</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">payload</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">JobAccepted</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">JobDenied</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorPublisher</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">actor</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">ActorPublisherMessage</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">JobManager</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaxBufferSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">buf</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Vector</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">receive</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">job</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">buf</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaxBufferSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sender</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobDenied</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">job</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sender</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobAccepted</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buf</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isEmpty</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&amp;&amp;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">totalDemand</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">onNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">buf</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">:+=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">job</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">deliverBuf</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Request</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">deliverBuf</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Cancel</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">context</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stop</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">self</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nd" style="color: rgb(0, 0, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">@tailrec</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">deliverBuf</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">totalDemand</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="cm" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">/*</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">       * totalDemand is a Long and could be larger than</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">       * what buf.splitAt can accept</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="cm"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">       */</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">totalDemand</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;=</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MaxValue</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">use</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">keep</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buf</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">splitAt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">totalDemand</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toInt</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buf</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">keep</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">use</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">onNext</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">use</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">keep</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buf</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">splitAt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaxValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buf</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">keep</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">use</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">foreach</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">onNext</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">deliverBuf</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">You
          send elements to the stream by calling<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code>.
          You are allowed to send as many elements as have been requested by the
          stream subscriber. This amount can be inquired with<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">totalDemand</span></code>.
          It is only allowed to use<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code><span
            class="Apple-converted-space">&nbsp;</span>when<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">isActive</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">totalDemand&gt;0</span></code>,
          otherwise<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code><span
            class="Apple-converted-space">&nbsp;</span>will throw<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IllegalStateException</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          the stream subscriber requests more elements the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisherMessage.Request</span></code><span
            class="Apple-converted-space">&nbsp;</span>message is delivered to
          this actor, and you can act on that event. The<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">totalDemand</span></code><span
            class="Apple-converted-space">&nbsp;</span>is updated automatically.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          the stream subscriber cancels the subscription the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisherMessage.Cancel</span></code><span
            class="Apple-converted-space">&nbsp;</span>message is delivered to
          this actor. After that subsequent calls to<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be ignored.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">You
          can complete the stream by calling<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onComplete</span></code>.
          After that you are not allowed to call<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onComplete</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">You
          can terminate the stream with failure by calling<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onError</span></code>.
          After that you are not allowed to call<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onNext</span></code>,<code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onError</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onComplete</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          you suspect that this<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>may never get subscribed
          to, you can override the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">subscriptionTimeout</span></code>method
          to provide a timeout after which this Publisher should be considered
          canceled. The actor will be notified when the timeout triggers via an<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisherMessage.SubscriptionTimeoutExceeded</span></code><span
            class="Apple-converted-space">&nbsp;</span>message and MUST then
          perform cleanup and stop itself.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the actor is stopped the stream will be completed, unless it was not
          already terminated with failure, completed or canceled.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">More
          detailed information can be found in the API documentation.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is how it can be used as input<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>to a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">jobManagerSource</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actorPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">ref</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">JobManager</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">payload</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toUpperCase</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">jobManagerSource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"a"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"b"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">JobManager</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Job</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"c"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
          publisher that is created with<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.asPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>supports a specified
          number of subscribers. Additional subscription attempts will be
          rejected with an<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IllegalStateException</span></code>.</p>
      </div>
      <div class="section" id="actorsubscriber">
        <h3 id="ActorSubscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">ActorSubscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Extend/mixin<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.actor.ActorSubscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>in your<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Actor</span></code><span
            class="Apple-converted-space">&nbsp;</span>to make it a stream
          subscriber with full control of stream back pressure. It will receive<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriberMessage.OnNext</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriberMessage.OnComplete</span></code>and<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriberMessage.OnError</span></code><span
            class="Apple-converted-space">&nbsp;</span>messages from the stream.
          It can also receive other, non-stream messages, in the same way as any
          actor.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is an example of such an actor. It dispatches incoming jobs to child
          worker actors:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Msg</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">replyTo</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ActorRef</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Work</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Reply</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Done</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">props</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorSubscriber</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorSubscriberMessage</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaxQueueSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ActorRef</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">router</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">routees</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Vector</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fill</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorRefRoutee</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">context</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actorOf</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Worker</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Router</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">RoundRobinRoutingLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">routees</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">requestStrategy</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MaxInFlightRequestStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaxQueueSize</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">inFlightInternally</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">receive</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OnNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Msg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">replyTo</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">replyTo</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;=</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MaxQueueSize</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">s</span><span class="str" style="color: rgb(131, 185, 37);">"queued too many: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">${</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">.</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">size</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">}</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">router</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">route</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Work</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">self</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Reply</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Done</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">queue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Worker</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Actor</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">receive</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Work</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">id</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// ...</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sender</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Reply</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">id</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Subclass
          must define the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RequestStrategy</span></code><span
            class="Apple-converted-space">&nbsp;</span>to control stream back
          pressure. After each incoming message the<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>will automatically invoke
          the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RequestStrategy.requestDemand</span></code><span
            class="Apple-converted-space">&nbsp;</span>and propagate the
          returned demand to the stream.</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">The provided<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">WatermarkRequestStrategy</span></code><span
              class="Apple-converted-space">&nbsp;</span>is a good strategy if
            the actor performs work itself.</li>
          <li style="line-height: 18px;">The provided<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">MaxInFlightRequestStrategy</span></code><span
              class="Apple-converted-space">&nbsp;</span>is useful if messages
            are queued internally or delegated to other actors.</li>
          <li style="line-height: 18px;">You can also implement a custom<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">RequestStrategy</span></code><span
              class="Apple-converted-space">&nbsp;</span>or call<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">request</span></code><span
              class="Apple-converted-space">&nbsp;</span>manually together with<code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">ZeroRequestStrategy</span></code><span
              class="Apple-converted-space">&nbsp;</span>or some other strategy.
            In that case you must also call<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">request</span></code><span
              class="Apple-converted-space">&nbsp;</span>when the actor is
            started or when it is ready, otherwise it will not receive any
            elements.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">More
          detailed information can be found in the API documentation.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          is how it can be used as output<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>to a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">N</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">117</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">N</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Msg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">replyTo</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actorSubscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">WorkerPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="integrating-with-external-services" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Integrating_with_External_Services" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Integrating
        with External Services</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
        transformations and side effects involving external non-stream based
        services can be performed with<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
          class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
        example, sending emails to the authors of selected tweets using an
        external email service:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">send</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">email</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Email</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// ...</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        start with the tweet stream of authors:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Assume
        that we can lookup their email address using:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lookupEmail</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Option</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transforming
        the stream of authors to a stream of email addresses by using the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">lookupEmail</span></code><span
          class="Apple-converted-space">&nbsp;</span>service can be done with<code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailAddresses</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">addressSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookupEmail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">collect</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Some</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">emailAddress</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">emailAddress</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Finally,
        sending the emails:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sendEmails</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailAddresses</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">address</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailServer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">send</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Email</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">address</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">title</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"Akka"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"I like your tweet"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendEmails</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
          class="Apple-converted-space">&nbsp;</span>is applying the given
        function that is calling out to the external service to each of the
        elements as they pass through this processing step. The function returns
        a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space">&nbsp;</span>and the value of that
        future will be emitted downstreams. The number of Futures that shall run
        in parallel is given as the first argument to<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>.
        These Futures may complete in any order, but the elements that are
        emitted downstream are in the same order as received from upstream.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">That
        means that back-pressure works as expected. For example if the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">emailServer.send</span></code><span
          class="Apple-converted-space">&nbsp;</span>is the bottleneck it will
        limit the rate at which incoming tweets are retrieved and email
        addresses looked up.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        final piece of this pipeline is to generate the demand that pulls the
        tweet authors information through the emailing pipeline: we attach a<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.ignore</span></code><span
          class="Apple-converted-space">&nbsp;</span>which makes it all run. If
        our email process would return some interesting data for further
        transformation then we would of course not ignore it but send that
        result stream onwards for further processing or storage.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
        that<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
          class="Apple-converted-space">&nbsp;</span>preserves the order of the
        stream elements. In this example the order is not important and then we
        can use the more efficient<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailAddresses</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsyncUnordered</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">addressSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookupEmail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">collect</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Some</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">emailAddress</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">emailAddress</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sendEmails</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailAddresses</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsyncUnordered</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">address</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailServer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">send</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Email</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">address</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">title</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"Akka"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"I like your tweet"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendEmails</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        the above example the services conveniently returned a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space">&nbsp;</span>of the result. If that is
        not the case you need to wrap the call in a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code>.
        If the service call involves blocking you must also make sure that you
        run it on a dedicated execution context, to avoid starvation and
        disturbance of other tasks in the system.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">blockingExecutionContext</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchers</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookup</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"blocking-dispatcher"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sendTextMessages</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">phoneNumbers</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">phoneNo</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">smsServer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">send</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TextMessage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">phoneNo</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"I like your tweet"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">blockingExecutionContext</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendTextMessages</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        configuration of the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">"blocking-dispatcher"</span></code><span
          class="Apple-converted-space">&nbsp;</span>may look something like:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">blocking</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">executor</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"thread-pool-executor"</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">thread</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">executor</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">core</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pool</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">size</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">min</span></span><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">10</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">core</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">max</span></span><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">An
        alternative for blocking calls is to perform them in a<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
          class="Apple-converted-space">&nbsp;</span>operation, still using a
        dedicated dispatcher for that operation.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">send</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">phoneNo</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">smsServer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">send</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">TextMessage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">phoneNo</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">body</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"I like your tweet"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorAttributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"blocking-dispatcher"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sendTextMessages</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">phoneNumbers</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">send</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendTextMessages</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">However,
        that is not exactly the same as<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>,
        since the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
          class="Apple-converted-space">&nbsp;</span>may run several calls
        concurrently, but<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">map</span></code>performs
        them one at a time.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
        a service that is exposed as an actor, or if an actor is used as a
        gateway in front of an external service, you can use<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ask</span></code>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">akkaTweets</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">timeout</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Timeout</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">seconds</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">saveTweets</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">akkaTweets</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweet</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">database</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">?</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Save</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
        that if the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ask</span></code><span
          class="Apple-converted-space">&nbsp;</span>is not completed within the
        given timeout the stream is completed with failure. If that is not
        desired outcome you can use<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">recover</span></code><span
          class="Apple-converted-space">&nbsp;</span>on the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ask</span></code><span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code>.</p>
      <div class="section" id="illustrating-ordering-and-parallelism">
        <h3 id="Illustrating_ordering_and_parallelism" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Illustrating
          ordering and parallelism</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Let
          us look at another example to get a better understanding of the
          ordering and parallelism characteristics of<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Several<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code><span
            class="Apple-converted-space">&nbsp;</span>futures may run
          concurrently. The number of concurrent futures are limited by the
          downstream demand. For example, if 5 elements have been requested by
          downstream there will be at most 5 futures in progress.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
            class="Apple-converted-space">&nbsp;</span>emits the future results
          in the same order as the input elements were received. That means that
          completed results are only emitted downstream when earlier results
          have been completed and emitted. One slow call will thereby delay the
          results of all successive calls, even though they are completed before
          the slow call.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code><span
            class="Apple-converted-space">&nbsp;</span>emits the future results
          as soon as they are completed, i.e. it is possible that the elements
          are not emitted downstream in the same order as received from
          upstream. One slow call will thereby not delay the results of faster
          successive calls as long as there is downstream demand of several
          elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is a fictive service that we can use to illustrate these aspects.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SometimesSlowService</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">ec</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ExecutionContext</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runningCount</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">AtomicInteger</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">convert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"running: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$s</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);"> (</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">${</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">runningCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">.</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">incrementAndGet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">()</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">}</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">)"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">nonEmpty</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&amp;&amp;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isLower</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Thread</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sleep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">500</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Thread</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sleep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">20</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"completed: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$s</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);"> (</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">${</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">runningCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">.</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">decrementAndGet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">()</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">}</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">)"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toUpperCase</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Elements
          starting with a lower case character are simulated to take longer time
          to process.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is how we can use it with<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">blockingExecutionContext</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchers</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookup</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"blocking-dispatcher"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">service</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SometimesSlowService</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializerSettings</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">withInputBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maxSize</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"a"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"B"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"C"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"D"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"e"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"F"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"g"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"H"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"i"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"J"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"before: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$elem</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">service</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">convert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"after: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$elem</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          output may look like this:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">4</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">0</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> A</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">4</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">0</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> E</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> G</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">0</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> I</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J</span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">after</span></code><span
            class="Apple-converted-space">&nbsp;</span>lines are in the same
          order as the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">before</span></code><span
            class="Apple-converted-space">&nbsp;</span>lines even though
          elements are<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">completed</span></code><span
            class="Apple-converted-space">&nbsp;</span>in a different order. For
          example<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">H</span></code><span
            class="Apple-converted-space">&nbsp;</span>is<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">completed</span></code><span
            class="Apple-converted-space">&nbsp;</span>before<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">g</span></code>, but
          still emitted afterwards.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          numbers in parenthesis illustrates how many calls that are in progress
          at the same time. Here the downstream demand and thereby the number of
          concurrent calls are limited by the buffer size (4) of the<code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializerSettings</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
          is how we can use the same service with<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">blockingExecutionContext</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchers</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookup</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"blocking-dispatcher"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">service</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">SometimesSlowService</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializerSettings</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">withInputBuffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialSize</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maxSize</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">4</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"a"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"B"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"C"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"D"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"e"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"F"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"g"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"H"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"i"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"J"</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"before: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$elem</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">);</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsyncUnordered</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">service</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">convert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"after: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$elem</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          output may look like this:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">4</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> B</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> D</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> C</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">before</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> F</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">4</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> H</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> a </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> A</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">running</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">4</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">3</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> J</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> e </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">2</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> E</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> g </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> G</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">completed</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> i </span><span class="pun" style="color: rgb(89, 80, 80);">(</span><span
class="lit" style="color: rgb(25, 95, 145);">0</span><span class="pun" style="color: rgb(89, 80, 80);">)</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">after</span><span class="pun" style="color: rgb(89, 80, 80);">:</span><span
class="pln" style="color: rgb(89, 80, 80);"> I</span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">after</span></code><span
            class="Apple-converted-space">&nbsp;</span>lines are not in the same
          order as the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">before</span></code><span
            class="Apple-converted-space">&nbsp;</span>lines. For example<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">H</span></code><span
            class="Apple-converted-space">&nbsp;</span>overtakes the slow<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">G</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          numbers in parenthesis illustrates how many calls that are in progress
          at the same time. Here the downstream demand and thereby the number of
          concurrent calls are limited by the buffer size (4) of the<code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorMaterializerSettings</span></code>.</p>
      </div>
    </div>
    <div class="section" id="integrating-with-reactive-streams" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="reactive-streams-integration-scala"></span>
      <h2 id="Integrating_with_Reactive_Streams" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Integrating
        with Reactive Streams</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><a
          class="reference external" href="http://reactive-streams.org/" style="color: rgb(21, 169, 206); text-decoration: none;">Reactive
          Streams</a><span class="Apple-converted-space">&nbsp;</span>defines a
        standard for asynchronous stream processing with non-blocking back
        pressure. It makes it possible to plug together stream libraries that
        adhere to the standard. Akka Streams is one such library.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">An
        incomplete list of other implementations:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;"><a class="reference external" href="http://github.com/reactor/reactor"
            style="color: rgb(21, 169, 206); text-decoration: none;">Reactor
            (1.1+)</a></li>
        <li style="line-height: 18px;"><a class="reference external" href="https://github.com/ReactiveX/RxJavaReactiveStreams"
            style="color: rgb(21, 169, 206); text-decoration: none;">RxJava</a></li>
        <li style="line-height: 18px;"><a class="reference external" href="http://www.ratpack.io/manual/current/streams.html"
            style="color: rgb(21, 169, 206); text-decoration: none;">Ratpack</a></li>
        <li style="line-height: 18px;"><a class="reference external" href="http://slick.lightbend.com/"
            style="color: rgb(21, 169, 206); text-decoration: none;">Slick</a></li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        two most important interfaces in Reactive Streams are the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">org</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">reactivestreams</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Publisher</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">org</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">reactivestreams</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Subscriber</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Let
        us assume that a library provides a publisher of tweets:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Publisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">and
        another library knows how to store author handles in a database:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">storage</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Subscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Using
        an Akka Streams<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>we can transform the stream
        and connect those:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromSubscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">storage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>is used as an input<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>to the flow and the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
          class="Apple-converted-space">&nbsp;</span>is used as an output<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>can also be also converted
        to a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">RunnableGraph[Processor[In,</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Out]]</span></code><span
          class="Apple-converted-space">&nbsp;</span>which materializes to a<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Processor</span></code>when<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
          class="Apple-converted-space">&nbsp;</span>is called.<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">run()</span></code><span
          class="Apple-converted-space">&nbsp;</span>itself can be called
        multiple times, resulting in a new<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Processor</span></code><span
          class="Apple-converted-space">&nbsp;</span>instance each time.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">processor</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Processor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toProcessor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">processor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">processor</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">storage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        publisher can be connected to a subscriber with the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">subscribe</span></code><span
          class="Apple-converted-space">&nbsp;</span>method.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is also possible to expose a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
          class="Apple-converted-space">&nbsp;</span>as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Publisher</span></code><span
          class="Apple-converted-space">&nbsp;</span>by using the Publisher-<code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authorPublisher</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Publisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">asPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fanout</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">false</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authorPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">storage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        publisher that is created with<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.asPublisher(fanout</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">=</span><span
            class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">false)</span></code><span
          class="Apple-converted-space">&nbsp;</span>supports only a single
        subscription. Additional subscription attempts will be rejected with an<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">IllegalStateException</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        publisher that supports multiple subscribers using fan-out/broadcasting
        is created as follows:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">storage</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Subscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">alert</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Subscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li></ol></pre>
        </div>
      </div>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authorPublisher</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Publisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authors</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">asPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fanout</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">authorPublisher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">storage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">authorPublisher</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">alert</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        input buffer size of the stage controls how far apart the slowest
        subscriber can be from the fastest subscriber before slowing down the
        stream.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
        make the picture complete, it is also possible to expose a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
          class="Apple-converted-space">&nbsp;</span>as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Subscriber</span></code><span
          class="Apple-converted-space">&nbsp;</span>by using the Subscriber-<code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source</span></code>:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweetSubscriber</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Subscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromSubscriber</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">storage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">asSubscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tweet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweets</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">subscribe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tweetSubscriber</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is also possible to use re-wrap<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Processor</span></code><span
          class="Apple-converted-space">&nbsp;</span>instances as a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
          class="Apple-converted-space">&nbsp;</span>by passing a factory
        function that will create the<code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Processor</span></code><span
          class="Apple-converted-space">&nbsp;</span>instances:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// An example Processor factory</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">createProcessor</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Processor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toProcessor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromProcessor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createProcessor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Please
        note that a factory is necessary to achieve reusability of the resulting<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>.</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Error
      Handling</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Strategies
      for how to handle exceptions from processing stream elements can be
      defined when materializing the stream. The error handling strategies are
      inspired by actor supervision strategies, but the semantics have been
      adapted to the domain of stream processing.</p>
    <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
      <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
      <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><em
          style="font-style: italic;">ZipWith</em>,<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">GraphStage</em><span class="Apple-converted-space">&nbsp;</span>junction,<span
          class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">ActorPublisher</em><span
          class="Apple-converted-space">&nbsp;</span>source and<span class="Apple-converted-space">&nbsp;</span><em
          style="font-style: italic;">ActorSubscriber</em><span class="Apple-converted-space">&nbsp;</span>sink
        components do not honour the supervision strategy attribute yet.</p>
    </div>
    <div class="section" id="supervision-strategies" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Supervision_Strategies" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Supervision
        Strategies</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">There
        are three ways to handle exceptions from application code:</p>
      <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
        <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stop</span></code><span
            class="Apple-converted-space">&nbsp;</span>- The stream is completed
          with failure.</li>
        <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Resume</span></code><span
            class="Apple-converted-space">&nbsp;</span>- The element is dropped
          and the stream continues.</li>
        <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Restart</span></code><span
            class="Apple-converted-space">&nbsp;</span>- The element is dropped
          and the stream continues after restarting the stage. Restarting a
          stage means that any accumulated state is cleared. This is typically
          performed by creating a new instance of the stage.</li>
      </ul>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">By
        default the stopping strategy is used for all exceptions, i.e. the
        stream will be completed with failure when an exception is thrown.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">/</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// division by zero will fail the stream and the</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// result here will be a Future completed with Failure(ArithmeticException)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        default supervision strategy for a stream can be defined on the settings
        of the materializer.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">decider</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Supervision</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Decider</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ArithmeticException</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Resume</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);">                      </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stop</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializerSettings</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">withSupervisionStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">decider</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">/</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// the element causing division by zero will be dropped</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// result here will be a Future completed with Success(228)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Here
        you can see that all<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ArithmeticException</span></code><span
          class="Apple-converted-space">&nbsp;</span>will resume the processing,
        i.e. the elements that cause the division by zero are effectively
        dropped.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Be
          aware that dropping elements may result in deadlocks in graphs with
          cycles, as explained in<span class="Apple-converted-space">&nbsp;</span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#graph-cycles-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Graph
              cycles, liveness and deadlocks</span></a>.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        supervision strategy can also be defined for all operators of a flow.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">decider</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Supervision</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Decider</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ArithmeticException</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Resume</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);">                      </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stop</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">/</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">50</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">/</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorAttributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">supervisionStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">decider</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// the elements causing division by zero will be dropped</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// result here will be a Future completed with Success(150)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Restart</span></code><span
          class="Apple-converted-space">&nbsp;</span>works in a similar way as<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Resume</span></code><span
          class="Apple-converted-space">&nbsp;</span>with the addition that
        accumulated state, if any, of the failing processing stage will be
        reset.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">decider</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Supervision</span><span
class="pun" style="color: rgb(89, 80, 80);">.</span><span class="typ" style="color: rgb(0, 143, 169);">Decider</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">IllegalArgumentException</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Restart</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);">                           </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Stop</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">scan</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">throw</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">IllegalArgumentException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"negative not allowed"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">acc</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorAttributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">supervisionStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">decider</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">5</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">7</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">limit</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1000</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// the negative element cause the scan stage to be restarted,</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// i.e. start from 0 again</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// result here will be a Future completed with Success(Vector(0, 1, 4, 0, 5, 12))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="errors-from-mapasync" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Errors_from_mapAsync" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Errors
        from mapAsync</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
        supervision can also be applied to the futures of<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code>.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Let's
        say that we use an external service to lookup email addresses and we
        would like to discard those that cannot be found.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
        start with the tweet stream of authors:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tweets</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">hashtags</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Assume
        that we can lookup their email address using:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">lookupEmail</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space">&nbsp;</span>is completed with<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Failure</span></code><span
          class="Apple-converted-space">&nbsp;</span>if the email is not found.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transforming
        the stream of authors to a stream of email addresses by using the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">lookupEmail</span></code><span
          class="Apple-converted-space">&nbsp;</span>service can be done with<code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
          class="Apple-converted-space">&nbsp;</span>and we use<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Supervision.resumingDecider</span></code><span
          class="Apple-converted-space">&nbsp;</span>to drop unknown email
        addresses:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorAttributes</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">supervisionStrategy</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Supervision</span><span class="pun"
style="color: rgb(89, 80, 80);">.</span><span class="pln" style="color: rgb(89, 80, 80);">resumingDecider</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emailAddresses</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">authors</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Author</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">addressSystem</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lookupEmail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">author</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">handle</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">supervisionStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">resumingDecider</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        we would not use<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Resume</span></code><span
          class="Apple-converted-space">&nbsp;</span>the default stopping
        strategy would complete the stream with failure on the first<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code>that
        was completed with<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Failure</span></code>.</p>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Working
      with streaming IO</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Akka
      Streams provides a way of handling File IO and TCP connections with
      Streams. While the general approach is very similar to the<span class="Apple-converted-space">&nbsp;</span><a
        class="reference external" href="http://doc.akka.io/docs/akka/current/scala/io-tcp.html"
        style="color: rgb(21, 169, 206); text-decoration: none;">Actor based TCP
        handling</a><span class="Apple-converted-space">&nbsp;</span>using Akka
      IO, by using Akka Streams you are freed of having to manually react to
      back-pressure signals, as the library does it transparently for you.</p>
    <div class="section" id="streaming-tcp" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Streaming_TCP" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Streaming
        TCP</h2>
      <div class="section" id="accepting-connections-echo-server">
        <h3 id="Accepting_connections__Echo_Server" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Accepting
          connections: Echo Server</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          order to implement a simple EchoServer we<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">bind</span></code><span
            class="Apple-converted-space">&nbsp;</span>to a given address, which
          returns a<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source[IncomingConnection,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Future[ServerBinding]]</span></code>,
          which will emit an<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IncomingConnection</span></code><span
            class="Apple-converted-space">&nbsp;</span>element for each new
          connection that the Server should handle:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">binding</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ServerBinding</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tcp</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">().</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bind</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"127.0.0.1"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8888</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">binding</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">unbind</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">onComplete</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// ...</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Next,
          we simply handle<span class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">each</em><span
            class="Apple-converted-space">&nbsp;</span>incoming connection using
          a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will be used as the
          processing stage to handle and emit ByteStrings from and to the TCP
          Socket. Since one<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">&nbsp;</span>does not have to
          necessarily correspond to exactly one line of text (the client might
          be sending the line in chunks) we use the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Framing.delimiter</span></code><span
            class="Apple-converted-space">&nbsp;</span>helper Flow to chunk the
          inputs up into actual lines of text. The last boolean argument
          indicates that we require an explicit line ending even for the last
          message before the connection is closed. In this example we simply add
          exclamation marks to each incoming text message and push it through
          the flow:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">scaladsl</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Framing</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">connections</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">IncomingConnection</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ServerBinding</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tcp</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">().</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">bind</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">host</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">port</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">connections</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">connection</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"New connection from: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">${</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">connection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="str" style="color: rgb(131, 185, 37);">.</span></span><span
class="n"><span class="str" style="color: rgb(131, 185, 37);">remoteAddress</span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">}</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">echo</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Framing</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delimiter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumFrameLength</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">256</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">allowTruncation</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">utf8String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"!!!\n"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">connection</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">handleWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">echo</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Notice
          that while most building blocks in Akka Streams are reusable and
          freely shareable, this is<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">not</em><span class="Apple-converted-space">&nbsp;</span>the
          case for the incoming connection Flow, since it directly corresponds
          to an existing, already accepted connection its handling can only ever
          be materialized<span class="Apple-converted-space">&nbsp;</span><em style="font-style: italic;">once</em>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Closing
          connections is possible by cancelling the<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">incoming connection</em><span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>from your server logic
          (e.g. by connecting its downstream to a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.cancelled</span></code><span
            class="Apple-converted-space">&nbsp;</span>and its upstream to a<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source.empty</span></code>).
          It is also possible to shut down the server's socket by cancelling the<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IncomingConnection</span></code><span
            class="Apple-converted-space">&nbsp;</span>source<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">connections</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
          can then test the TCP server by sending data to the TCP Socket using<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">netcat</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">$</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">echo</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">n</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"Hello World"</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">|</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">netcat</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">127.0</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0.1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8888</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Hello</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">World</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">!!!</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="connecting-repl-client">
        <h3 id="Connecting__REPL_Client" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Connecting:
          REPL Client</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          this example we implement a rather naive Read Evaluate Print Loop
          client over TCP. Let's say we know a server has exposed a simple
          command line interface over TCP, and would like to interact with it
          using Akka Streams over TCP. To open an outgoing connection socket we
          use the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">outgoingConnection</span></code><span
            class="Apple-converted-space">&nbsp;</span>method:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">connection</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tcp</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">().</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">outgoingConnection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"127.0.0.1"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8888</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">replParser</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">takeWhile</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"q"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">concat</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"BYE"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"</span></span><span class="si" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">$elem</span></span><span class="s"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">repl</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Framing</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delimiter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumFrameLength</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">256</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">allowTruncation</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">utf8String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">text</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">println</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Server: "</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">text</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">readLine</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"&gt; "</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">replParser</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">connection</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">join</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">repl</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">repl</span></code><span
            class="Apple-converted-space">&nbsp;</span>flow we use to handle the
          server interaction first prints the servers response, then awaits on
          input from the command line (this blocking call is used here just for
          the sake of simplicity) and converts it to a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">&nbsp;</span>which is then sent over
          the wire to the server. Then we simply connect the TCP pipeline to
          this processing stage–at this point it will be materialized and start
          processing data once the server responds with an<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">initial message</em>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
          resilient REPL client would be more sophisticated than this, for
          example it should split out the input reading into a separate mapAsync
          step and have a way to let the server write more data than one
          ByteString chunk at any given time, these improvements however are
          left as exercise for the reader.</p>
      </div>
      <div class="section" id="avoiding-deadlocks-and-liveness-issues-in-back-pressured-cycles">
        <h3 id="Avoiding_deadlocks_and_liveness_issues_in_back-pressured_cycles"
          style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Avoiding
          deadlocks and liveness issues in back-pressured cycles</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          writing such end-to-end back-pressured systems you may sometimes end
          up in a situation of a loop, in which<em style="font-style: italic;">either
            side is waiting for the other one to start the conversation</em>.
          One does not need to look far to find examples of such back-pressure
          loops. In the two examples shown previously, we always assumed that
          the side we are connecting to would start the conversation, which
          effectively means both sides are back-pressured and can not get the
          conversation started. There are multiple ways of dealing with this
          which are explained in depth in<span class="Apple-converted-space">&nbsp;</span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-graphs.html#graph-cycles-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Graph
              cycles, liveness and deadlocks</span></a>, however in
          client-server scenarios it is often the simplest to make either side
          simply send an initial message.</p>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
            case of back-pressured cycles (which can occur even between
            different systems) sometimes you have to decide which of the sides
            has start the conversation in order to kick it off. This can be
            often done by injecting an initial message from one of the sides–a
            conversation starter.</p>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          break this back-pressure cycle we need to inject some initial message,
          a "conversation starter". First, we need to decide which side of the
          connection should remain passive and which active. Thankfully in most
          situations finding the right spot to start the conversation is rather
          simple, as it often is inherent to the protocol we are trying to
          implement using Streams. In chat-like applications, which our examples
          resemble, it makes sense to make the Server initiate the conversation
          by emitting a "hello" message:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">connections</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runForeach</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">connection</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// server logic, parses incoming commands</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">commandParser</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">takeWhile</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"BYE"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"!"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">connection</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">welcomeMsg</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="pln" style="color: rgb(89, 80, 80);">s</span><span
class="str" style="color: rgb(131, 185, 37);">"Welcome to: </span></span><span class="si"
style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$localAddress</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">, you are: </span></span><span
class="si" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">$remoteAddress</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">!"</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">welcome</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">single</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">welcomeMsg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">serverLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Framing</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delimiter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumFrameLength</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">256</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">allowTruncation</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">utf8String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">commandParser</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// merge in the initial banner after parser</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">welcome</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"\n"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">connection</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">handleWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">serverLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          emit the initial message we merge a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>with a single element,
          after the command processing but before the framing and transformation
          to<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteStrings</span></code><span
            class="Apple-converted-space">&nbsp;</span>this way we do not have
          to repeat such logic.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
          this example both client and server may need to close the stream based
          on a parsed command -<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BYE</span></code><span
            class="Apple-converted-space">&nbsp;</span>in the case of the
          server, and<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">q</span></code><span
            class="Apple-converted-space">&nbsp;</span>in the case of the
          client. This is implemented by taking from the stream until<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">q</span></code><span
            class="Apple-converted-space">&nbsp;</span>and and concatenating a<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>with a single<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BYE</span></code><span
            class="Apple-converted-space">&nbsp;</span>element which will then
          be sent after the original source completed.</p>
      </div>
    </div>
    <div class="section" id="streaming-file-io" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Streaming_File_IO" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Streaming
        File IO</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        Streams provide simple Sources and Sinks that can work with<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
          class="Apple-converted-space">&nbsp;</span>instances to perform IO
        operations on files.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Streaming
        data from a file is as easy as creating a<span class="Apple-converted-space">&nbsp;</span><cite
          style="font-style: normal;">FileIO.fromPath</cite><span class="Apple-converted-space">&nbsp;</span>given
        a target path, and an optional<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">chunkSize</span></code>which
        determines the buffer size determined as one "element" in such stream:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">scaladsl</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">file</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Paths</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"example.csv"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">foreach</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">IOResult</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FileIO</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromPath</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">file</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Please
        note that these processing stages are backed by Actors and by default
        are configured to run on a pre-configured threadpool-backed dispatcher
        dedicated for File IO. This is very important as it isolates the
        blocking file IO operations from the rest of the ActorSystem allowing
        each dispatcher to be utilised in the most efficient way. If you want to
        configure a custom dispatcher for file IO operations globally, you can
        do so by changing the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka.stream.blocking-io-dispatcher</span></code>,
        or for a specific stage by specifying a custom Dispatcher in code, like
        this:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FileIO</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromPath</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">file</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorAttributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"custom-blocking-io-dispatcher"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Pipelining
      and Parallelism</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Akka
      Streams processing stages (be it simple operators on Flows and Sources or
      graph junctions) are "fused" together and executed sequentially by
      default. This avoids the overhead of events crossing asynchronous
      boundaries but limits the flow to execute at most one stage at any given
      time.</p>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">In
      many cases it is useful to be able to concurrently execute the stages of a
      flow, this is done by explicitly marking them as asynchronous using the<span
        class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
        style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">async</span></code><span
        class="Apple-converted-space">&nbsp;</span>method. Each processing stage
      marked as asynchronous will run in a dedicated actor internally, while all
      stages not marked asynchronous will run in one single actor.</p>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">We
      will illustrate through the example of pancake cooking how streams can be
      used for various processing patterns, exploiting the available parallelism
      on modern computers. The setting is the following: both Patrik and Roland
      like to make pancakes, but they need to produce sufficient amount in a
      cooking session to make all of the children happy. To increase their
      pancake production throughput they use two frying pans. How they organize
      their pancake processing is markedly different.</p>
    <div class="section" id="pipelining" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Pipelining" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Pipelining</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Roland
        uses the two frying pans in an asymmetric fashion. The first pan is only
        used to fry one side of the pancake then the half-finished pancake is
        flipped into the second pan for the finishing fry on the other side.
        Once the first frying pan becomes available it gets a new scoop of
        batter. As an effect, most of the time there are two pancakes being
        cooked at the same time, one being cooked on its first side and the
        second being cooked to completion. This is how this setup would look
        like implemented as a stream:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Takes a scoop of batter and creates a pancake with one side cooked</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fryingPan1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">batter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Finishes a half-cooked pancake</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fryingPan2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">halfCooked</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// With the two frying pans we can fully cook pancakes</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pancakeChef</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        two<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
          class="Apple-converted-space">&nbsp;</span>stages in sequence
        (encapsulated in the "frying pan" flows) will be executed in a pipelined
        way, basically doing the same as Roland with his frying pans:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ol class="arabic simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: decimal;">
            <li style="line-height: 18px;">A<span class="Apple-converted-space">&nbsp;</span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">ScoopOfBatter</span></code><span
                class="Apple-converted-space">&nbsp;</span>enters<span class="Apple-converted-space">&nbsp;</span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">fryingPan1</span></code></li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">fryingPan1</span></code><span
                class="Apple-converted-space">&nbsp;</span>emits a
              HalfCookedPancake once<span class="Apple-converted-space">&nbsp;</span><code
                class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">fryingPan2</span></code><span
                class="Apple-converted-space">&nbsp;</span>becomes available</li>
            <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                  class="pre" style="color: rgb(11, 85, 103);">fryingPan2</span></code><span
                class="Apple-converted-space">&nbsp;</span>takes the
              HalfCookedPancake</li>
            <li style="line-height: 18px;">at this point fryingPan1 already
              takes the next scoop, without waiting for fryingPan2 to finish</li>
          </ol>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        benefit of pipelining is that it can be applied to any sequence of
        processing steps that are otherwise not parallelisable (for example
        because the result of a processing step depends on all the information
        from the previous step). One drawback is that if the processing times of
        the stages are very different then some of the stages will not be able
        to operate at full throughput because they will wait on a previous or
        subsequent stage most of the time. In the pancake example frying the
        second half of the pancake is usually faster than frying the first half,<span
          class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">fryingPan2</span></code><span
          class="Apple-converted-space">&nbsp;</span>will not be able to operate
        at full capacity<span class="Apple-converted-space">&nbsp;</span><a class="footnote-reference"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-parallelism.html#id2"
          id="id1" style="color: rgb(21, 169, 206); text-decoration: none;">[1]</a>.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Asynchronous
          stream processing stages have internal buffers to make communication
          between them more efficient. For more details about the behavior of
          these and how to add additional buffers refer to<span class="Apple-converted-space">&nbsp;</span><a
            class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-rate.html#stream-rate-scala"
            style="color: rgb(11, 85, 103); text-decoration: none;"><span class="std std-ref">Buffers
              and working with rate</span></a>.</p>
      </div>
    </div>
    <div class="section" id="parallel-processing" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Parallel_processing" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Parallel
        processing</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Patrik
        uses the two frying pans symmetrically. He uses both pans to fully fry a
        pancake on both sides, then puts the results on a shared plate. Whenever
        a pan becomes empty, he takes the next scoop from the shared bowl of
        batter. In essence he parallelizes the same process over multiple pans.
        This is how this setup will look like if implemented using streams:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">fryingPan</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">batter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pancakeChef</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Using two frying pans in parallel, both fully cooking a pancake from the batter.</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// We always put the next scoop of batter to the first frying pan that becomes available.</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Notice that we used the "fryingPan" flow without importing it via builder.add().</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Flows used this way are auto-imported, which in this case means that the two</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// uses of "fryingPan" mean actually different stages in the graph.</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mergePancakes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        benefit of parallelizing is that it is easy to scale. In the pancake
        example it is easy to add a third frying pan with Patrik's method, but
        Roland cannot add a third frying pan, since that would require a third
        processing step, which is not practically possible in the case of frying
        pancakes.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
        drawback of the example code above that it does not preserve the
        ordering of pancakes. This might be a problem if children like to track
        their "own" pancakes. In those cases the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Balance</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
          class="Apple-converted-space">&nbsp;</span>stages should be replaced
        by strict-round robing balancing and merging stages that put in and take
        out pancakes in a strict order.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        more detailed example of creating a worker pool can be found in the
        cookbook:<span class="Apple-converted-space">&nbsp;</span><a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-cookbook.html#cookbook-balance-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Balancing
            jobs to a fixed pool of workers</span></a></p>
    </div>
    <div class="section" id="combining-pipelining-and-parallel-processing" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Combining_pipelining_and_parallel_processing" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Combining
        pipelining and parallel processing</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        two concurrency patterns that we demonstrated as means to increase
        throughput are not exclusive. In fact, it is rather simple to combine
        the two approaches and streams provide a nice unifying language to
        express and compose them.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">First,
        let's look at how we can parallelize pipelined processing stages. In the
        case of pancakes this means that we will employ two chefs, each working
        using Roland's pipelining method, but we use the two chefs in parallel,
        just like Patrik used the two frying pans. This is how it looks like if
        expressed as streams:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pancakeChef</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Using two pipelines, having two frying pans each, in total using</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// four frying pans</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mergePancakes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        above pattern works well if there are many independent jobs that do not
        depend on the results of each other, but the jobs themselves need
        multiple processing steps where each step builds on the result of the
        previous one. In our case individual pancakes do not depend on each
        other, they can be cooked in parallel, on the other hand it is not
        possible to fry both sides of the same pancake at the same time, so the
        two sides have to be fried in sequence.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">It
        is also possible to organize parallelized stages into pipelines. This
        would mean employing four chefs:</p>
      <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
        <div>
          <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
            <li style="line-height: 18px;">the first two chefs prepare
              half-cooked pancakes from batter, in parallel, then putting those
              on a large enough flat surface.</li>
            <li style="line-height: 18px;">the second two chefs take these and
              fry their other side in their own pans, then they put the pancakes
              on a shared plate.</li>
          </ul>
        </div>
      </blockquote>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        is again straightforward to implement with the streams API:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pancakeChefs1</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergeHalfPancakes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Two chefs work with one frying pan for each, half-frying the pancakes then putting</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// them into a common pool</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergeHalfPancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergeHalfPancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchBatter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mergeHalfPancakes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pancakeChefs2</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchHalfPancakes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">HalfCookedPancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Two chefs work with one frying pan for each, finishing the pancakes then putting</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// them into a common pool</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchHalfPancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchHalfPancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">fryingPan2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">mergePancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dispatchHalfPancakes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mergePancakes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">kitchen</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ScoopOfBatter</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Pancake</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pancakeChefs1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pancakeChefs2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        usage pattern is less common but might be usable if a certain step in
        the pipeline might take wildly different times to finish different jobs.
        The reason is that there are more balance-merge steps in this pattern
        compared to the parallel pipelines. This pattern rebalances after each
        step, while the previous pattern only balances at the entry point of the
        pipeline. This only matters however if the processing time distribution
        has a large deviation.</p>
      <table class="docutils footnote" frame="void" id="id2" rules="none" style="max-width: 100%; border-collapse: collapse; border-spacing: 0px;">
        <colgroup><col class="label" style="padding: 1px 3px 2px; font-size: 9.75px; font-weight: bold; color: rgb(255, 255, 255); text-transform: uppercase; border-radius: 3px; background-color: transparent;"><col></colgroup>
        <tbody valign="top">
          <tr>
            <td class="label" style="padding: 1px 3px 2px; font-size: 9.75px; font-weight: bold; color: rgb(255, 255, 255); text-transform: uppercase; border-radius: 3px; background-color: transparent;"><a
                class="fn-backref" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-parallelism.html#id1"
                style="color: rgb(21, 169, 206); text-decoration: none;">[1]</a></td>
            <td>Roland's reason for this seemingly suboptimal procedure is that
              he prefers the temperature of the second pan to be slightly lower
              than the first in order to achieve a more homogeneous result.</td>
          </tr>
        </tbody>
      </table>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Testing
      streams</h1>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Verifying
      behaviour of Akka Stream sources, flows and sinks can be done using
      various code patterns and libraries. Here we will discuss testing these
      elements using:</p>
    <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc; color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <li style="line-height: 18px;">simple sources, sinks and flows;</li>
      <li style="line-height: 18px;">sources and sinks in combination with<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestProbe</span></code><span
          class="Apple-converted-space">&nbsp;</span>from the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka-testkit</span></code><span
          class="Apple-converted-space">&nbsp;</span>module;</li>
      <li style="line-height: 18px;">sources and sinks specifically crafted for
        writing tests from the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka-stream-testkit</span></code><span
          class="Apple-converted-space">&nbsp;</span>module.</li>
    </ul>
    <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px; color: rgb(11, 85, 103); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">It
      is important to keep your data processing pipeline as separate sources,
      flows and sinks. This makes them easily testable by wiring them up to
      other sources or sinks, or some test harnesses that<span class="Apple-converted-space">&nbsp;</span><code
        class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">akka-testkit</span></code><span
        class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
        class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
          class="pre" style="color: rgb(11, 85, 103);">akka-stream-testkit</span></code><span
        class="Apple-converted-space">&nbsp;</span>provide.</p>
    <div class="section" id="built-in-sources-sinks-and-combinators" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Built_in_sources__sinks_and_combinators" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Built
        in sources, sinks and combinators</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Testing
        a custom sink can be as simple as attaching a source that emits elements
        from a predefined collection, running a constructed test flow and
        asserting on the results that sink produced. Here is an example of a
        test for a sink:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">*</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">right</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">future</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">20</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
        same strategy can be applied for sources as well. In the next example we
        have a source that produces an infinite stream of elements. Such source
        can be tested by asserting that first arbitrary number of elements hold
        some condition. Here the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">grouped</span></code><span
          class="Apple-converted-space">&nbsp;</span>combinator and<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.head</span></code><span
          class="Apple-converted-space">&nbsp;</span>are very useful.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">system</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">pattern</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">pipe</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">repeat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">future</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">grouped</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fill</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
        testing a flow we need to attach a source and a sink. As both stream
        ends are under our control, we can choose sources that tests various
        edge cases of the flow and sinks that ease assertions.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flowUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">takeWhile</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&lt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">5</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">future</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flowUnderTest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">:+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="testkit" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="TestKit" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">TestKit</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Akka
        Stream offers integration with Actors out of the box. This support can
        be used for writing stream tests that use familiar<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestProbe</span></code><span
          class="Apple-converted-space">&nbsp;</span>from the<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka-testkit</span></code><span
          class="Apple-converted-space">&nbsp;</span>API.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
        of the more straightforward tests would be to materialize stream to a<span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
          class="Apple-converted-space">&nbsp;</span>and then use<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">pipe</span></code><span
          class="Apple-converted-space">&nbsp;</span>pattern to pipe the result
        of that future to the probe.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">system</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">pattern</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">pipe</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grouped</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">probe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TestProbe</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grouped</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">head</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pipeTo</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectMsg</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Instead
        of materializing to a future, we can use a<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.actorRef</span></code><span
          class="Apple-converted-space">&nbsp;</span>that sends all incoming
        elements to the given<code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code>.
        Now we can use assertion methods on<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestProbe</span></code><span
          class="Apple-converted-space">&nbsp;</span>and expect elements one by
        one as they arrive. We can also assert stream completion by expecting
        for<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">onCompleteMessage</span></code><span
          class="Apple-converted-space">&nbsp;</span>which was given to<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.actorRef</span></code>.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tick</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">seconds</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">200.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">probe</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TestProbe</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">cancellable</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">to</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">actorRef</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"completed"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expectMsg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expectNoMsg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectMsg</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">200.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cancellable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cancel</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectMsg</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">200.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"completed"</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Similarly
        to<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Sink.actorRef</span></code><span
          class="Apple-converted-space">&nbsp;</span>that provides control over
        received elements, we can use<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Source.actorRef</span></code><span
          class="Apple-converted-space">&nbsp;</span>and have full control over
        elements to be sent.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fold</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">""</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actorRef</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">8</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fail</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">run</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">ref</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">actor</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Status</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Success</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"done"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">result</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">result</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"123"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="streams-testkit" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Streams_TestKit" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Streams
        TestKit</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">You
        may have noticed various code patterns that emerge when testing stream
        pipelines. Akka Stream has a separate<code class="xref py py-mod docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka-stream-testkit</span></code><span
          class="Apple-converted-space">&nbsp;</span>module that provides tools
        specifically for writing stream tests. This module comes with two main
        components that are<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestSource</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestSink</span></code><span
          class="Apple-converted-space">&nbsp;</span>which provide sources and
        sinks that materialize to probes that allow fluent API.</p>
      <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Be
          sure to add the module<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-mod docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka-stream-testkit</span></code><span
            class="Apple-converted-space">&nbsp;</span>to your dependencies.</p>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        sink returned by<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestSink.probe</span></code><span
          class="Apple-converted-space">&nbsp;</span>allows manual control over
        demand and assertions over elements coming downstream.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sourceUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">filter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">%</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sourceUnderTest</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">TestSink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">request</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectComplete</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
        source returned by<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">TestSource.probe</span></code><span
          class="Apple-converted-space">&nbsp;</span>can be used for asserting
        demand or controlling when stream is completed or ended with an error.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">cancelled</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">TestSource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">left</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expectCancellation</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">You
        can also inject exceptions and test sink behaviour on error conditions.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">head</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">TestSource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sinkUnderTest</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sendError</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Exception</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"boom"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Await</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ready</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mf" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">100.</span></span><span class="n"><span
class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Failure</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">exception</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">value</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">get</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">exception</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getMessage</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"boom"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
        </div>
      </div>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Test
        source and sink can be used together in combination when testing flows.</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flowUnderTest</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mapAsyncUnordered</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sleep</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pattern</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">after</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">millis</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">*</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sleep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">using</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">system</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">scheduler</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">successful</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sleep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">sub</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">TestSource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">flowUnderTest</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">toMat</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">TestSink</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">probe</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">])(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Keep</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">both</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">run</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">sub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">request</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">n</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sendNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sendNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sendNext</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">sub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectNextUnordered</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">pub</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sendError</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Exception</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Power surge in the linear subroutine C-47!"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">ex</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">sub</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">expectError</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">assert</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">ex</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getMessage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">contains</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"C-47"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="fuzzing-mode" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Fuzzing_Mode" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Fuzzing
        Mode</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
        testing, it is possible to enable a special stream execution mode that
        exercises concurrent execution paths more aggressively (at the cost of
        reduced performance) and therefore helps exposing race conditions in
        tests. To enable this setting add the following line to your
        configuration:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">akka</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">stream</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">debug</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fuzzing</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mode</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">on</span></span></li></ol></pre>
        </div>
      </div>
      <div class="admonition warning" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(240, 101, 101), rgb(226, 87, 88)); background-color: rgb(226, 87, 88); background-repeat: repeat-x;">
        <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Warning</p>
        <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Never
          use this setting in production or benchmarks. This is a testing tool
          to provide more coverage of your code during tests, but it reduces the
          throughput of streams. A warning message will be logged if you have
          this setting enabled.</p>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Overview
      of built-in stages and their semantics</h1>
    <div class="section" id="source-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Source_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Source
        stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        built-in sources are available from<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka.stream.scaladsl.Source</span></code>:</p>
      <div class="section" id="fromiterator">
        <h3 id="fromIterator" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromIterator</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          the values from an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Iterator</span></code>,
          requesting the next value when there is demand. The iterator will be
          created anew for each materialization, which is the reason the method
          takes a function rather than an iterator directly.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the iterator perform blocking operations, make sure to run it on a
          separate dispatcher.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the next value returned
          from the iterator</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the iterator reaches
          its end</p>
      </div>
      <div class="section" id="apply">
        <h3 id="apply" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">apply</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          the values of an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">immutable.Seq</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the next value of the seq</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the last element of
          the seq has been emitted</p>
      </div>
      <div class="section" id="single">
        <h3 id="single" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">single</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          a single object</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the value once</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the single value has
          been emitted</p>
      </div>
      <div class="section" id="repeat">
        <h3 id="repeat" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">repeat</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          a single object repeatedly</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the same value repeatedly
          when there is demand</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="cycle">
        <h3 id="cycle" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">cycle</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          iterator in cycled manner. Internally new iterator is being created to
          cycle the one provided via argument meaning when original iterator
          runs out of elements process will start all over again from the
          beginning of the iterator provided by the evaluation of provided
          parameter. If method argument provides empty iterator stream will be
          terminated with exception.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the next value returned
          from cycled iterator</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="tick">
        <h3 id="tick" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">tick</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
          periodical repetition of an arbitrary object. Delay of first tick is
          specified separately from interval of the following ticks.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>periodically, if there is
          downstream backpressure ticks are skipped</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="fromfuture">
        <h3 id="fromFuture" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromFuture</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Send
          the single value of the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>when it completes and
          there is demand. If the future fails the stream is failed with that
          exception.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the future completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>after the future has
          completed</p>
      </div>
      <div class="section" id="fromcompletionstage">
        <h3 id="fromCompletionStage" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromCompletionStage</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Send
          the single value of the Java<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">CompletionStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>when it completes and
          there is demand. If the future fails the stream is failed with that
          exception.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the future completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>after the future has
          completed</p>
      </div>
      <div class="section" id="unfold">
        <h3 id="unfold" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unfold</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Stream
          the result of a function as long as it returns a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Some</span></code>,
          the value inside the option consists of a tuple where the first value
          is a state passed back into the next call to the function allowing to
          pass a state. The first invocation of the provided fold function will
          receive the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">zero</span></code><span
            class="Apple-converted-space">&nbsp;</span>state.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Can
          be used to implement many stateful sources without having to touch the
          more low level<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>API.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and
          the unfold function over the previous state returns non empty value</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the unfold function
          returns an empty value</p>
      </div>
      <div class="section" id="unfoldasync">
        <h3 id="unfoldAsync" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unfoldAsync</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Just
          like<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">unfold</span></code><span
            class="Apple-converted-space">&nbsp;</span>but the fold function
          returns a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will cause the
          source to complete or emit when it completes.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Can
          be used to implement many stateful sources without having to touch the
          more low level<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>API.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and
          unfold state returned future completes with some value</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the future returned
          by the unfold function completes with an empty value</p>
      </div>
      <div class="section" id="empty">
        <h3 id="empty" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">empty</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Complete
          right away without ever emitting any elements. Useful when you have to
          provide a source to an API but there are no elements to emit.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>directly</p>
      </div>
      <div class="section" id="maybe">
        <h3 id="maybe" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">maybe</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materialize
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Promise[Option[T]]</span></code><span
            class="Apple-converted-space">&nbsp;</span>that if completed with a<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Some[T]</span></code><span
            class="Apple-converted-space">&nbsp;</span>will emit that<span class="Apple-converted-space">&nbsp;</span><cite
            style="font-style: normal;">T</cite><span class="Apple-converted-space">&nbsp;</span>and
          then complete the stream, or if completed with<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">None</span></code><span
            class="Apple-converted-space">&nbsp;</span>complete the stream right
          away.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the returned promise
          is completed with some value</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>after emitting some
          value, or directly if the promise is completed with no value</p>
      </div>
      <div class="section" id="failed">
        <h3 id="failed" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">failed</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Fail
          directly with a user specified exception.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>fails the stream directly
          with the given exception</p>
      </div>
      <div class="section" id="actorpublisher">
        <h3 id="actorPublisher" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">actorPublisher</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Wrap
          an actor extending<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorPublisher</span></code><span
            class="Apple-converted-space">&nbsp;</span>as a source.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>depends on the actor
          implementation</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actor stops</p>
      </div>
      <div class="section" id="actorref">
        <h3 id="actorRef" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">actorRef</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materialize
          an<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code>,
          sending messages to it will emit them on the stream. The actor contain
          a buffer but since communication is one way, there is no back
          pressure. Handling overflow is done by either dropping elements or
          failing the stream, the strategy is chosen by the user.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and
          there are messages in the buffer or a message is sent to the actorref</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actorref is sent<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.actor.Status.Success</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">PoisonPill</span></code></p>
      </div>
      <div class="section" id="combine">
        <h3 id="combine" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">combine</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combine
          several sources, using a given strategy such as merge or concat, into
          one source.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand, but
          depending on the strategy</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all sources has
          completed</p>
      </div>
      <div class="section" id="unfoldresource">
        <h3 id="unfoldResource" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unfoldResource</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Wrap
          any resource that can be opened, queried for next element (in a
          blocking way) and closed using three distinct functions into a source.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and
          read function returns value</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when read function
          returns<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">None</span></code></p>
      </div>
      <div class="section" id="unfoldasyncresource">
        <h3 id="unfoldAsyncResource" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unfoldAsyncResource</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Wrap
          any resource that can be opened, queried for next element (in a
          blocking way) and closed using three distinct functions into a source.
          Functions return<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>to achieve asynchronous
          processing</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>from read function
          returns value</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>from read function
          returns<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">None</span></code></p>
      </div>
      <div class="section" id="queue">
        <h3 id="queue" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">queue</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materialize
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SourceQueue</span></code><span
            class="Apple-converted-space">&nbsp;</span>onto which elements can
          be pushed for emitting from the source. The queue contains a buffer,
          if elements are pushed onto the queue faster than the source is
          consumed the overflow will be handled with a strategy specified by the
          user. Functionality for tracking when an element has been emitted is
          available through<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SourceQueue.offer</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is demand and
          the queue contains elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream completes</p>
      </div>
      <div class="section" id="assubscriber">
        <h3 id="asSubscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">asSubscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Integration
          with Reactive Streams, materializes into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">org.reactivestreams.Subscriber</span></code>.</p>
      </div>
      <div class="section" id="frompublisher">
        <h3 id="fromPublisher" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromPublisher</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Integration
          with Reactive Streams, subscribes to a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">org.reactivestreams.Publisher</span></code>.</p>
      </div>
      <div class="section" id="zipn">
        <h3 id="zipN" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">zipN</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combine
          the elements of multiple streams into a stream of sequences.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the inputs
          has an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when any upstream
          completes</p>
      </div>
      <div class="section" id="zipwithn">
        <h3 id="zipWithN" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">zipWithN</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combine
          the elements of multiple streams into a stream of sequences using a
          combiner function.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the inputs
          has an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when any upstream
          completes</p>
      </div>
    </div>
    <div class="section" id="sink-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Sink_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Sink
        stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        built-in sinks are available from<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka.stream.scaladsl.Sink</span></code>:</p>
      <div class="section" id="head">
        <h3 id="head" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">head</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which completes with the
          first value arriving, after this the stream is canceled. If no element
          is emitted, the future is be failed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>after receiving one
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="headoption">
        <h3 id="headOption" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">headOption</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Option[T]]</span></code><span
            class="Apple-converted-space">&nbsp;</span>which completes with the
          first value arriving wrapped in a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Some</span></code>,
          or a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">None</span></code>if
          the stream completes without any elements emitted.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>after receiving one
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="last">
        <h3 id="last" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">last</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will complete with
          the last value emitted when the stream completes. If the stream
          completes with no elements the future is failed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="lastoption">
        <h3 id="lastOption" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">lastOption</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materialize
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Option[T]]</span></code><span
            class="Apple-converted-space">&nbsp;</span>which completes with the
          last value emitted wrapped in an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Some</span></code><span
            class="Apple-converted-space">&nbsp;</span>when the stream
          completes. if the stream completes with no elements the future is
          completed with<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">None</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="ignore">
        <h3 id="ignore" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">ignore</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Consume
          all elements but discards them. Useful when a stream has to be
          consumed but there is no use to actually do anything with the
          elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="cancelled">
        <h3 id="cancelled" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">cancelled</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Immediately
          cancel the stream</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>immediately</p>
      </div>
      <div class="section" id="seq">
        <h3 id="seq" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">seq</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Collect
          values emitted from the stream into a collection, the collection is
          available through a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>or which completes when
          the stream completes. Note that the collection is bounded to<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Int.MaxValue</span></code>,
          if more element are emitted the sink will cancel the stream</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>If too many values are
          collected</p>
      </div>
      <div class="section" id="foreach">
        <h3 id="foreach" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">foreach</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Invoke
          a given procedure for each element received. Note that it is not safe
          to mutate shared state from the procedure.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          sink materializes into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Option[Done]]</span></code><span
            class="Apple-converted-space">&nbsp;</span>which completes when the
          stream completes, or fails if the stream fails.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that it is not safe to mutate state from the procedure.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the previous
          procedure invocation has not yet completed</p>
      </div>
      <div class="section" id="foreachparallel">
        <h3 id="foreachParallel" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">foreachParallel</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Like<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">foreach</span></code><span
            class="Apple-converted-space">&nbsp;</span>but allows up to<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">parallellism</span></code><span
            class="Apple-converted-space">&nbsp;</span>procedure calls to happen
          in parallel.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the previous
          parallel procedure invocations has not yet completed</p>
      </div>
      <div class="section" id="oncomplete">
        <h3 id="onComplete" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">onComplete</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Invoke
          a callback when the stream has completed or failed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="fold">
        <h3 id="fold" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fold</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Fold
          over emitted element with a function, where each invocation will get
          the new element and the result from the previous fold invocation. The
          first invocation will be provided the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">zero</span></code><span
            class="Apple-converted-space">&nbsp;</span>value.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a future that will complete with the last state when the stream
          has completed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          stage allows combining values into a result without a global mutable
          state by instead passing the state along between invocations.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the previous fold
          function invocation has not yet completed</p>
      </div>
      <div class="section" id="reduce">
        <h3 id="reduce" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">reduce</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Apply
          a reduction function on the incoming elements and pass the result to
          the next invocation. The first invocation receives the two first
          elements of the flow.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a future that will be completed by the last result of the
          reduction function.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the previous
          reduction function invocation has not yet completed</p>
      </div>
      <div class="section" id="id1">
        <h3 id="combine" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">combine</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combine
          several sinks into one using a user specified strategy</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>depends on the strategy</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>depends on the strategy</p>
      </div>
      <div class="section" id="id2">
        <h3 id="actorRef" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">actorRef</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Send
          the elements from the stream to an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code>.
          No backpressure so care must be taken to not overflow the inbox.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actor terminates</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never</p>
      </div>
      <div class="section" id="actorrefwithack">
        <h3 id="actorRefWithAck" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">actorRefWithAck</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Send
          the elements from the stream to an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
            class="Apple-converted-space">&nbsp;</span>which must then
          acknowledge reception after completing a message, to provide back
          pressure onto the sink.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actor terminates</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actor
          acknowledgement has not arrived</p>
      </div>
      <div class="section" id="actorsubscriber">
        <h3 id="actorSubscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">actorSubscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          an actor from a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Props</span></code><span
            class="Apple-converted-space">&nbsp;</span>upon materialization,
          where the actor implements<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorSubscriber</span></code>,
          which will receive the elements from the stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into an<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ActorRef</span></code><span
            class="Apple-converted-space">&nbsp;</span>to the created actor.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when the actor terminates</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>depends on the actor
          implementation</p>
      </div>
      <div class="section" id="aspublisher">
        <h3 id="asPublisher" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">asPublisher</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Integration
          with Reactive Streams, materializes into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">org.reactivestreams.Publisher</span></code>.</p>
      </div>
      <div class="section" id="fromsubscriber">
        <h3 id="fromSubscriber" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromSubscriber</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Integration
          with Reactive Streams, wraps a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">org.reactivestreams.Subscriber</span></code><span
            class="Apple-converted-space">&nbsp;</span>as a sink</p>
      </div>
    </div>
    <div class="section" id="additional-sink-and-source-converters" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Additional_Sink_and_Source_converters" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Additional
        Sink and Source converters</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Sources
        and sinks for integrating with<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">java.io.InputStream</span></code><span
          class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">java.io.OutputStream</span></code><span
          class="Apple-converted-space">&nbsp;</span>can be found on<code class="docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">StreamConverters</span></code>.
        As they are blocking APIs the implementations of these stages are run on
        a separate dispatcher configured through the<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">akka.stream.blocking-io-dispatcher</span></code>.</p>
      <div class="section" id="fromoutputstream">
        <h3 id="fromOutputStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromOutputStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink that wraps an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code>.
          Takes a function that produces an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code>,
          when the sink is materialized the function will be called and bytes
          sent to the sink will be written to the returned<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will complete with
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IOResult</span></code><span
            class="Apple-converted-space">&nbsp;</span>when the stream
          completes.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that a flow can be materialized multiple times, so the function
          producing the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>must be able to handle
          multiple invocations.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be closed when the
          stream that flows into the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>is completed, and the<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>will cancel its inflow
          when the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>is no longer writable.</p>
      </div>
      <div class="section" id="asinputstream">
        <h3 id="asInputStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">asInputStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink which materializes into an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>that can be read to
          trigger demand through the sink. Bytes emitted through the stream will
          be available for reading through the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code></p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be ended when the
          stream flowing into this<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>completes, and the
          closing the<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will cancel the inflow of
          this<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.</p>
      </div>
      <div class="section" id="frominputstream">
        <h3 id="fromInputStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromInputStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a source that wraps an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code>.
          Takes a function that produces an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code>,
          when the source is materialized the function will be called and bytes
          from the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be emitted into the
          stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          into a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will complete with
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IOResult</span></code><span
            class="Apple-converted-space">&nbsp;</span>when the stream
          completes.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that a flow can be materialized multiple times, so the function
          producing the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>must be able to handle
          multiple invocations.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be closed when the<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>is canceled from its
          downstream, and reaching the end of the<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">InputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will complete the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>.</p>
      </div>
      <div class="section" id="asoutputstream">
        <h3 id="asOutputStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">asOutputStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a source that materializes into an<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code>.
          When bytes are written to the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>they are emitted from the
          source.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will no longer be
          writable when the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>has been canceled from
          its downstream, and closing the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OutputStream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will complete the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>.</p>
      </div>
      <div class="section" id="asjavastream">
        <h3 id="asJavaStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">asJavaStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink which materializes into Java 8<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code><span
            class="Apple-converted-space">&nbsp;</span>that can be run to
          trigger demand through the sink. Elements emitted through the stream
          will be available for reading through the Java 8<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          Java 8<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code><span
            class="Apple-converted-space">&nbsp;</span>will be ended when the
          stream flowing into this<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">&nbsp;</span>completes, and closing
          the Java<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code>will
          cancel the inflow of this<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>.
          Java<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code><span
            class="Apple-converted-space">&nbsp;</span>throws exception in case
          reactive stream failed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Be
          aware that Java<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code><span
            class="Apple-converted-space">&nbsp;</span>blocks current thread
          while waiting on next element from downstream.</p>
      </div>
      <div class="section" id="fromjavastream">
        <h3 id="fromJavaStream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromJavaStream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a source that wraps a Java 8<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Stream</span></code>.<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>uses a stream iterator to
          get all its elements and send them downstream on demand.</p>
      </div>
      <div class="section" id="javacollector">
        <h3 id="javaCollector" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">javaCollector</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink which materializes into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will be completed
          with a result of the Java 8<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code>transformation
          and reduction operations. This allows usage of Java 8 streams
          transformations for reactive streams. The<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>will trigger demand
          downstream. Elements emitted through the stream will be accumulated
          into a mutable result container, optionally transformed into a final
          representation after all input elements have been processed. The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>can also do reduction at
          the end. Reduction processing is performed sequentially</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that a flow can be materialized multiple times, so the function
          producing the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>must be able to handle
          multiple invocations.</p>
      </div>
      <div class="section" id="javacollectorparallelunordered">
        <h3 id="javaCollectorParallelUnordered" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">javaCollectorParallelUnordered</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink which materializes into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will be completed
          with a result of the Java 8<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code>transformation
          and reduction operations. This allows usage of Java 8 streams
          transformations for reactive streams. The<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>is triggering demand
          downstream. Elements emitted through the stream will be accumulated
          into a mutable result container, optionally transformed into a final
          representation after all input elements have been processed. The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>can also do reduction at
          the end. Reduction processing is performed in parallel based on graph<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Balance</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that a flow can be materialized multiple times, so the function
          producing the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Collector</span></code><span
            class="Apple-converted-space">&nbsp;</span>must be able to handle
          multiple invocations.</p>
      </div>
    </div>
    <div class="section" id="file-io-sinks-and-sources" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="File_IO_Sinks_and_Sources" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">File
        IO Sinks and Sources</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Sources
        and sinks for reading and writing files can be found on<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">FileIO</span></code>.</p>
      <div class="section" id="fromfile">
        <h3 id="fromFile" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fromFile</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Emit
          the contents of a file, as<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">&nbsp;</span>s, materializes into a<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will be completed
          with a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">IOResult</span></code>upon
          reaching the end of the file or if there is a failure.</p>
      </div>
      <div class="section" id="tofile">
        <h3 id="toFile" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">toFile</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Create
          a sink which will write incoming<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">&nbsp;</span>s to a given file.</p>
      </div>
    </div>
    <div class="section" id="flow-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Flow_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Flow
        stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">All
        flows by default backpressure if the computation they encapsulate is not
        fast enough to keep up with the rate of incoming elements from the
        preceding stage. There are differences though how the different stages
        handle when some of their downstream stages backpressure them.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Most
        stages stop and propagate the failure downstream as soon as any of their
        upstreams emit a failure. This happens to ensure reliable teardown of
        streams and cleanup when failures happen. Failures are meant to be to
        model unrecoverable conditions, therefore they are always eagerly
        propagated. For in-band error handling of normal errors (dropping
        elements if a map fails for example) you should use the supervision
        support, or explicitly wrap your element types in a proper container
        that can express error or success states (for example<span class="Apple-converted-space">&nbsp;</span><code
          class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">Try</span></code><span
          class="Apple-converted-space">&nbsp;</span>in Scala).</p>
    </div>
    <div class="section" id="simple-processing-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Simple_processing_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Simple
        processing stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages can transform the rate of incoming elements since there are
        stages that emit multiple elements for a single input (e.g.<span class="Apple-converted-space">&nbsp;</span><cite
          style="font-style: normal;">mapConcat') or consume multiple elements
          before emitting one output (e.g. ``filter`</cite>). However, these
        rate transformations are data-driven, i.e. it is the incoming elements
        that define how the rate is affected. This is in contrast with<span class="Apple-converted-space">&nbsp;</span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#detached-stages-overview-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Backpressure
            aware stages</span></a><span class="Apple-converted-space">&nbsp;</span>which
        can change their processing behavior depending on being backpressured by
        downstream or not.</p>
      <div class="section" id="map">
        <h3 id="map" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">map</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transform
          each element in the stream by calling a mapping function with it and
          passing the returned value downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the mapping function
          returns an element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="mapconcat">
        <h3 id="mapConcat" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">mapConcat</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transform
          each element into zero or more elements that are individually passed
          downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the mapping function
          returns an element or there are still remaining elements from the
          previously calculated collection</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures or there are still available elements from the
          previously calculated collection</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and all remaining elements has been emitted</p>
      </div>
      <div class="section" id="statefulmapconcat">
        <h3 id="statefulMapConcat" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">statefulMapConcat</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transform
          each element into zero or more elements that are individually passed
          downstream. The difference to<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapConcat</span></code><span
            class="Apple-converted-space">&nbsp;</span>is that the
          transformation function is created from a factory for every
          materialization of the flow.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the mapping function
          returns an element or there are still remaining elements from the
          previously calculated collection</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures or there are still available elements from the
          previously calculated collection</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and all remaining elements has been emitted</p>
      </div>
      <div class="section" id="filter">
        <h3 id="filter" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">filter</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Filter
          the incoming elements using a predicate. If the predicate returns true
          the element is passed downstream, if it returns false the element is
          discarded.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the given predicate
          returns true for the element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the given predicate
          returns true for the element and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="collect">
        <h3 id="collect" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">collect</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Apply
          a partial function to each incoming element, if the partial function
          is defined for a value the returned value is passed downstream. Can
          often replace<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">filter</span></code><span
            class="Apple-converted-space">&nbsp;</span>followed by<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
            class="Apple-converted-space">&nbsp;</span>to achieve the same in
          one single stage.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the provided partial
          function is defined for the element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>the partial function is
          defined for the element and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="grouped">
        <h3 id="grouped" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">grouped</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Accumulate
          incoming events until the specified number of elements have been
          accumulated and then pass the collection of elements downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the specified number
          of elements has been accumulated or upstream completed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when a group has been
          assembled and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="sliding">
        <h3 id="sliding" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">sliding</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Provide
          a sliding window over the incoming stream and pass the windows as
          groups of elements downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note:
          the last window might be smaller than the requested size due to end of
          stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the specified number of
          elements has been accumulated or upstream completed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when a group has been
          assembled and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="scan">
        <h3 id="scan" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">scan</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Emit
          its current value which starts at<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">zero</span></code><span
            class="Apple-converted-space">&nbsp;</span>and then applies the
          current and next value to the given function emitting the next current
          value.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Note
          that this means that scan emits one element downstream before and
          upstream elements will not be requested until the second element is
          required from downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the function
          scanning the element returns a new element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="id3">
        <h3 id="fold" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">fold</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Start
          with current value<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">zero</span></code><span
            class="Apple-converted-space">&nbsp;</span>and then apply the
          current and next value to the given function, when upstream complete
          the current value is emitted downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="drop">
        <h3 id="drop" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">drop</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Drop<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">n</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements and then pass
          any subsequent element downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the specified number
          of elements has been dropped already</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the specified number
          of elements has been dropped and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="take">
        <h3 id="take" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">take</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Pass<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">n</span></code><span
            class="Apple-converted-space">&nbsp;</span>incoming elements
          downstream and then complete</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>while the specified
          number of elements to take has not yet been reached</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when the defined number
          of elements has been taken or upstream completes</p>
      </div>
      <div class="section" id="takewhile">
        <h3 id="takeWhile" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">takeWhile</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Pass
          elements downstream as long as a predicate function return true for
          the element include the element when the predicate first return false
          and then complete.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>while the predicate is
          true and until the first false result</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when predicate returned
          false or upstream completes</p>
      </div>
      <div class="section" id="dropwhile">
        <h3 id="dropWhile" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">dropWhile</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Drop
          elements as long as a predicate function return true for the element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the predicate
          returned false and for all following stream elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>predicate returned false
          and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="recover">
        <h3 id="recover" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">recover</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          sending of one last element downstream when a failure has happened
          upstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the element is
          available from the upstream or upstream is failed and pf returns an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures, not when failure happened</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          or upstream failed with exception pf can handle</p>
      </div>
      <div class="section" id="recoverwith">
        <h3 id="recoverWith" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">recoverWith</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          switching to alternative Source when a failure has happened upstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>the element is available
          from the upstream or upstream is failed and pf returns alternative
          Source</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>downstream backpressures,
          after failure happened it backprssures to alternative Source</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes or
          upstream failed with exception pf can handle</p>
      </div>
      <div class="section" id="detach">
        <h3 id="detach" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">detach</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Detach
          upstream demand from downstream demand without detaching the stream
          rates.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the upstream stage
          has emitted and there is demand</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="throttle">
        <h3 id="throttle" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">throttle</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Limit
          the throughput to a specific number of elements per time unit, or a
          specific total cost per time unit, where a function has to be provided
          to calculate the individual cost of each element.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element and configured time per each element elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
    </div>
    <div class="section" id="asynchronous-processing-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Asynchronous_processing_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Asynchronous
        processing stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages encapsulate an asynchronous computation, properly handling
        backpressure while taking care of the asynchronous operation at the same
        time (usually handling the completion of a Future).</p>
      <div class="section" id="mapasync">
        <h3 id="mapAsync" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">mapAsync</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Pass
          incoming elements to a function that return a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>result. When the future
          arrives the result is passed downstream. Up to<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">n</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements can be processed
          concurrently, but regardless of their completion time the incoming
          order will be kept when results complete. For use cases where order
          does not mather<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsyncUnordered</span></code><span
            class="Apple-converted-space">&nbsp;</span>can be used.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          a Future fails, the stream also fails (unless a different supervision
          strategy is applied)</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the Future returned
          by the provided function finishes for the next element in sequence</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the number of
          futures reaches the configured parallelism and the downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and all futures has been completed and all elements has been emitted</p>
      </div>
      <div class="section" id="mapasyncunordered">
        <h3 id="mapAsyncUnordered" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">mapAsyncUnordered</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Like<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
            class="Apple-converted-space">&nbsp;</span>but<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>results are passed
          downstream as they arrive regardless of the order of the elements that
          triggered them.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          a Future fails, the stream also fails (unless a different supervision
          strategy is applied)</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>any of the Futures
          returned by the provided function complete</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the number of
          futures reaches the configured parallelism and the downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes and
          all futures has been completed and all elements has been emitted</p>
      </div>
    </div>
    <div class="section" id="timer-driven-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Timer_driven_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Timer
        driven stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages process elements using timers, delaying, dropping or grouping
        elements for certain time durations.</p>
      <div class="section" id="takewithin">
        <h3 id="takeWithin" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">takeWithin</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Pass
          elements downstream within a timeout and then complete.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when an upstream element
          arrives</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes or
          timer fires</p>
      </div>
      <div class="section" id="dropwithin">
        <h3 id="dropWithin" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">dropWithin</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Drop
          elements until a timeout has fired</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>after the timer fired and
          a new upstream element arrives</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes</p>
      </div>
      <div class="section" id="groupedwithin">
        <h3 id="groupedWithin" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">groupedWithin</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Chunk
          up the stream into groups of elements received within a time window,
          or limited by the given number of elements, whichever happens first.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the configured time
          elapses since the last group has been emitted</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the group has been
          assembled (the duration elapsed) and downstream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="initialdelay">
        <h3 id="initialDelay" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">initialDelay</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Delay
          the initial element by a user specified duration from stream
          materialization.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream emits an element
          if the initial delay already elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>downstream backpressures
          or initial delay not yet elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="delay">
        <h3 id="delay" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">delay</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Delay
          every element passed through with a specific duration.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>there is a pending
          element in the buffer and configured time for this element elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>differs, depends on<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy</span></code><span
            class="Apple-converted-space">&nbsp;</span>set</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and buffered elements has been drained</p>
      </div>
    </div>
    <div class="section" id="backpressure-aware-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span
        id="detached-stages-overview-scala"></span>
      <h2 id="Backpressure_aware_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Backpressure
        aware stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages are aware of the backpressure provided by their downstreams and
        able to adapt their behavior to that signal.</p>
      <div class="section" id="conflate">
        <h3 id="conflate" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">conflate</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a slower downstream by passing incoming elements and a summary
          into an aggregate function as long as there is backpressure. The
          summary value must be of the same type as the incoming elements, for
          example the sum or average of incoming numbers, if aggregation should
          lead to a different type<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code><span
            class="Apple-converted-space">&nbsp;</span>can be used:</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a conflated element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the aggregate
          function cannot keep up with incoming elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="conflatewithseed">
        <h3 id="conflateWithSeed" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">conflateWithSeed</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a slower downstream by passing incoming elements and a summary
          into an aggregate function as long as there is backpressure. When
          backpressure starts or there is no backpressure element is passed into
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">seed</span></code><span
            class="Apple-converted-space">&nbsp;</span>function to transform it
          to the summary type.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a conflated element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the aggregate or
          seed functions cannot keep up with incoming elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="batch">
        <h3 id="batch" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">batch</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a slower downstream by passing incoming elements and a summary
          into an aggregate function as long as there is backpressure and a
          maximum number of batched elements is not yet reached. When the
          maximum number is reached and downstream still backpressures batch
          will also backpressure.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          backpressure starts or there is no backpressure element is passed into
          a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">seed</span></code><span
            class="Apple-converted-space">&nbsp;</span>function to transform it
          to the summary type.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Will
          eagerly pull elements, this behavior may result in a single pending
          (i.e. buffered) element which cannot be aggregated to the batched
          value.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a batched element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when batched elements
          reached the max limit of allowed batched elements &amp; downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and a "possibly pending" element was drained</p>
      </div>
      <div class="section" id="batchweighted">
        <h3 id="batchWeighted" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">batchWeighted</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a slower downstream by passing incoming elements and a summary
          into an aggregate function as long as there is backpressure and a
          maximum weight batched elements is not yet reached. The weight of each
          element is determined by applying<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">costFn</span></code>.
          When the maximum total weight is reached and downstream still
          backpressures batch will also backpressure.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Will
          eagerly pull elements, this behavior may result in a single pending
          (i.e. buffered) element which cannot be aggregated to the batched
          value.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>downstream stops
          backpressuring and there is a batched element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>batched elements reached
          the max weight limit of allowed batched elements &amp; downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes and a
          "possibly pending" element was drained</p>
      </div>
      <div class="section" id="expand">
        <h3 id="expand" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">expand</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a faster downstream by expanding the last incoming element to an<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Iterator</span></code>.
          For example<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Iterator.continually(element)</span></code><span
            class="Apple-converted-space">&nbsp;</span>to keep repating the last
          incoming element.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="buffer-backpressure">
        <h3 id="buffer__Backpressure_" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">buffer
          (Backpressure)</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a temporarily faster upstream events by buffering<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">size</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements. When the buffer
          is full backpressure is applied.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a pending element in the buffer</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when buffer is full</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and buffered elements has been drained</p>
      </div>
      <div class="section" id="buffer-drop">
        <h3 id="buffer__Drop_" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">buffer
          (Drop)</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a temporarily faster upstream events by buffering<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">size</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements. When the buffer
          is full elements are dropped according to the specified<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">OverflowStrategy</span></code>:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">dropHead</span></code><span
              class="Apple-converted-space">&nbsp;</span>drops the oldest
            element in the buffer to make space for the new element</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">dropTail</span></code><span
              class="Apple-converted-space">&nbsp;</span>drops the youngest
            element in the buffer to make space for the new element</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">dropBuffer</span></code><span
              class="Apple-converted-space">&nbsp;</span>drops the entire buffer
            and buffers the new element</li>
          <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">dropNew</span></code><span
              class="Apple-converted-space">&nbsp;</span>drops the new element</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a pending element in the buffer</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never (when dropping
          cannot keep up with incoming elements)</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>upstream completes and
          buffered elements has been drained</p>
      </div>
      <div class="section" id="buffer-fail">
        <h3 id="buffer__Fail_" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">buffer
          (Fail)</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Allow
          for a temporarily faster upstream events by buffering<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">size</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements. When the buffer
          is full the stage fails the flow with a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BufferOverflowException</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream stops
          backpressuring and there is a pending element in the buffer</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>never, fails the stream
          instead of backpressuring when buffer is full</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and buffered elements has been drained</p>
      </div>
    </div>
    <div class="section" id="nesting-and-flattening-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Nesting_and_flattening_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Nesting
        and flattening stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages either take a stream and turn it into a stream of streams
        (nesting) or they take a stream that contains nested streams and turn
        them into a stream of elements instead (flattening).</p>
      <div class="section" id="prefixandtail">
        <h3 id="prefixAndTail" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">prefixAndTail</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Take
          up to<span class="Apple-converted-space">&nbsp;</span><cite style="font-style: normal;">n</cite><span
            class="Apple-converted-space">&nbsp;</span>elements from the stream
          (less than<span class="Apple-converted-space">&nbsp;</span><cite style="font-style: normal;">n</cite><span
            class="Apple-converted-space">&nbsp;</span>only if the upstream
          completes before emitting<span class="Apple-converted-space">&nbsp;</span><cite
            style="font-style: normal;">n</cite><span class="Apple-converted-space">&nbsp;</span>elements)
          and returns a pair containing a strict sequence of the taken element
          and a stream representing the remaining elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the configured
          number of prefix elements are available. Emits this prefix, and the
          rest as a substream</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures or substream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when prefix elements has
          been consumed and substream has been consumed</p>
      </div>
      <div class="section" id="groupby">
        <h3 id="groupBy" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">groupBy</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Demultiplex
          the incoming stream into separate output streams.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>an element for which the
          grouping function returns a group that has not yet been created. Emits
          the new group there is an element pending for a group whose substream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          (Until the end of stream it is not possible to know whether new
          substreams will be needed or not)</p>
      </div>
      <div class="section" id="splitwhen">
        <h3 id="splitWhen" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">splitWhen</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Split
          off elements into a new substream whenever a predicate function return<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">true</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>an element for which the
          provided predicate is true, opening and emitting a new substream for
          subsequent elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is an element
          pending for the next substream, but the previous is not fully consumed
          yet, or the substream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          (Until the end of stream it is not possible to know whether new
          substreams will be needed or not)</p>
      </div>
      <div class="section" id="splitafter">
        <h3 id="splitAfter" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">splitAfter</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">End
          the current substream whenever a predicate returns<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">true</span></code>,
          starting a new substream for the next element.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when an element passes
          through. When the provided predicate is true it emits the element *
          and opens a new substream for subsequent element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when there is an element
          pending for the next substream, but the previous is not fully consumed
          yet, or the substream backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          (Until the end of stream it is not possible to know whether new
          substreams will be needed or not)</p>
      </div>
      <div class="section" id="flatmapconcat">
        <h3 id="flatMapConcat" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">flatMapConcat</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transform
          each input element into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>whose elements are then
          flattened into the output stream through concatenation. This means
          each source is fully consumed before consumption of the next source
          starts.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the current consumed
          substream has an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and all consumed substreams complete</p>
      </div>
      <div class="section" id="flatmapmerge">
        <h3 id="flatMapMerge" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">flatMapMerge</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Transform
          each input element into a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code><span
            class="Apple-converted-space">&nbsp;</span>whose elements are then
          flattened into the output stream through merging. The maximum number
          of merged sources has to be specified.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when one of the currently
          consumed substreams has an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and all consumed substreams complete</p>
      </div>
    </div>
    <div class="section" id="time-aware-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Time_aware_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Time
        aware stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Those
        stages operate taking time into consideration.</p>
      <div class="section" id="initialtimeout">
        <h3 id="initialTimeout" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">initialTimeout</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the first element has not passed through this stage before the
          provided timeout, the stream is failed with a<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TimeoutException</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          or fails if timeout elapses before first element arrives</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
      <div class="section" id="completiontimeout">
        <h3 id="completionTimeout" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">completionTimeout</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the completion of the stream does not happen until the provided
          timeout, the stream is failed with a<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TimeoutException</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          or fails if timeout elapses before upstream completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
      <div class="section" id="idletimeout">
        <h3 id="idleTimeout" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">idleTimeout</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the time between two processed elements exceeds the provided timeout,
          the stream is failed with a<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TimeoutException</span></code>.
          The timeout is checked periodically, so the resolution of the check is
          one period (equals to timeout value).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          or fails if timeout elapses between two emitted elements</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
      <div class="section" id="backpressuretimeout">
        <h3 id="backpressureTimeout" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">backpressureTimeout</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          the time between the emission of an element and the following
          downstream demand exceeds the provided timeout, the stream is failed
          with a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TimeoutException</span></code>.
          The timeout is checked periodically, so the resolution of the check is
          one period (equals to timeout value).</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          or fails if timeout elapses between element emission and downstream
          demand.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
      <div class="section" id="keepalive">
        <h3 id="keepAlive" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">keepAlive</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Injects
          additional (configured) elements if upstream does not emit for a
          configured amount of time.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element or if the upstream was idle for the configured period</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
      <div class="section" id="id4">
        <h3 id="initialDelay" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">initialDelay</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Delays
          the initial element by the specified duration.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element if the initial delay is already elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures or initial delay is not yet elapsed</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">cancels</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream cancels</p>
      </div>
    </div>
    <div class="section" id="fan-in-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Fan-in_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Fan-in
        stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        stages take multiple streams as their input and provide a single output
        combining the elements from all of the inputs in different ways.</p>
      <div class="section" id="merge">
        <h3 id="merge" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">merge</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Merge
          multiple sources. Picks elements randomly if all sources has elements
          ready.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when one of the inputs
          has an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all upstreams
          complete (This behavior is changeable to completing when any upstream
          completes by setting<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">eagerComplete=true</span></code>.)</p>
      </div>
      <div class="section" id="mergesorted">
        <h3 id="mergeSorted" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">mergeSorted</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Merge
          multiple sources. Waits for one element to be ready from each input
          stream and emits the smallest element.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the inputs
          have an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all upstreams
          complete</p>
      </div>
      <div class="section" id="mergepreferred">
        <h3 id="mergePreferred" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">mergePreferred</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Merge
          multiple sources. Prefer one source if all sources has elements ready.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when one of the inputs
          has an element available, preferring a defined input if multiple have
          elements available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all upstreams
          complete (This behavior is changeable to completing when any upstream
          completes by setting<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">eagerComplete=true</span></code>.)</p>
      </div>
      <div class="section" id="zip">
        <h3 id="zip" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">zip</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combines
          elements from each of multiple sources into tuples and passes the
          tuples downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the inputs
          have an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when any upstream
          completes</p>
      </div>
      <div class="section" id="zipwith">
        <h3 id="zipWith" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">zipWith</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Combines
          elements from multiple sources through a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">combine</span></code><span
            class="Apple-converted-space">&nbsp;</span>function and passes the
          returned value downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the inputs
          have an element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when any upstream
          completes</p>
      </div>
      <div class="section" id="concat">
        <h3 id="concat" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">concat</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">After
          completion of the original upstream the elements of the given source
          will be emitted.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the current stream
          has an element available; if the current input completes, it tries the
          next one</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all upstreams
          complete</p>
      </div>
      <div class="section" id="prepend">
        <h3 id="prepend" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">prepend</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Prepends
          the given source to the flow, consuming it until completion before the
          original source is consumed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
          materialized values needs to be collected<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">prependMat</span></code><span
            class="Apple-converted-space">&nbsp;</span>is available.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the given stream has
          an element available; if the given input completes, it tries the
          current one</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when all upstreams
          complete</p>
      </div>
      <div class="section" id="interleave">
        <h3 id="interleave" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">interleave</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Emits
          a specifiable number of elements from the original source, then from
          the provided source and repeats. If one source completes the rest of
          the other stream will be emitted.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when element is available
          from the currently consumed upstream</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when both upstreams have
          completed</p>
      </div>
    </div>
    <div class="section" id="fan-out-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Fan-out_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Fan-out
        stages</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">These
        have one input and multiple outputs. They might route the elements
        between different outputs, or emit elements on multiple outputs at the
        same time.</p>
      <div class="section" id="unzip">
        <h3 id="unzip" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unzip</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Takes
          a stream of two element tuples and unzips the two elements ino two
          different downstreams.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the outputs
          stops backpressuring and there is an input element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when any of the outputs
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="unzipwith">
        <h3 id="unzipWith" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">unzipWith</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Splits
          each element of input into multiple downstreams using a function</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the outputs
          stops backpressuring and there is an input element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when any of the outputs
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="broadcast">
        <h3 id="broadcast" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">broadcast</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Emit
          each incoming element each of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">n</span></code><span
            class="Apple-converted-space">&nbsp;</span>outputs.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the outputs
          stops backpressuring and there is an input element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when any of the outputs
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="balance">
        <h3 id="balance" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">balance</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Fan-out
          the stream to several streams. Each upstream element is emitted to the
          first available downstream consumer.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when any of the outputs
          stops backpressuring; emits the element to the first available output</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when all of the outputs
          backpressure</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="partition">
        <h3 id="partition" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">partition</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Fan-out
          the stream to several streams. Each upstream element is emitted to one
          downstream consumer according to the partitioner function applied to
          the element.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when the chosen output
          stops backpressuring and there is an input element available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when the chosen output
          backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes
          and no output is pending</p>
      </div>
    </div>
    <div class="section" id="watching-status-stages" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Watching_status_stages" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Watching
        status stages</h2>
      <div class="section" id="watchtermination">
        <h3 id="watchTermination" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">watchTermination</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          to a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future</span></code><span
            class="Apple-converted-space">&nbsp;</span>that will be completed
          with Done or failed depending whether the upstream of the stage has
          been completed or failed. The stage otherwise passes through elements
          unchanged.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when input has an element
          available</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when output backpressures</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
      <div class="section" id="monitor">
        <h3 id="monitor" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">monitor</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Materializes
          to a<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowMonitor</span></code><span
            class="Apple-converted-space">&nbsp;</span>that monitors messages
          flowing through or completion of the stage. The stage otherwise passes
          through elements unchanged. Note that the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">FlowMonitor</span></code><span
            class="Apple-converted-space">&nbsp;</span>inserts a memory barrier
          every time it processes an event, and may therefore affect
          performance.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">emits</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream emits an
          element</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong><span
            class="Apple-converted-space">&nbsp;</span>when downstream<span class="Apple-converted-space">&nbsp;</span><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">backpressures</strong></p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">completes</strong><span
            class="Apple-converted-space">&nbsp;</span>when upstream completes</p>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Streams
      Cookbook</h1>
    <div class="section" id="introduction" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Introduction" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Introduction</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        is a collection of patterns to demonstrate various usage of the Akka
        Streams API by solving small targeted problems in the format of
        "recipes". The purpose of this page is to give inspiration and ideas how
        to approach various small tasks involving streams. The recipes in this
        page can be used directly as-is, but they are most powerful as starting
        points: customization of the code snippets is warmly encouraged.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        part also serves as supplementary material for the main body of
        documentation. It is a good idea to have this page open while reading
        the manual and look for examples demonstrating various streaming
        concepts as they appear in the main body of documentation.</p>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">If
        you need a quick reference of the available processing stages used in
        the recipes see<span class="Apple-converted-space">&nbsp;</span><a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stages-overview.html#stages-overview-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Overview
            of built-in stages and their semantics</span></a>.</p>
    </div>
    <div class="section" id="working-with-flows" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Working_with_Flows" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Working
        with Flows</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        this collection we show simple recipes that involve linear flows. The
        recipes in this section are rather general, more targeted recipes are
        available as separate sections (<a class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-rate.html#stream-rate-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Buffers
            and working with rate</span></a>,<span class="Apple-converted-space">&nbsp;</span><a
          class="reference internal" href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-io.html#stream-io-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Working
            with streaming IO</span></a>).</p>
      <div class="section" id="logging-elements-of-a-stream">
        <h3 id="Logging_elements_of_a_stream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Logging
          elements of a stream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>During development it is
          sometimes helpful to see what happens in a particular section of a
          stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          simplest solution is to simply use a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
            class="Apple-converted-space">&nbsp;</span>operation and use<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">println</span></code><span
            class="Apple-converted-space">&nbsp;</span>to print the elements
          received to the console. While this recipe is rather simplistic, it is
          often suitable for a quick debug session.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">loggedSource</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mySource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">println</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">);</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Another
          approach to logging is to use<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">log()</span></code><span
            class="Apple-converted-space">&nbsp;</span>operation which allows
          configuring logging for elements flowing through the stream as well as
          completion and erroring.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// customise log levels</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mySource</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">log</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"before-map"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withAttributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">logLevels</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">onElement</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Logging</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">WarningLevel</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">analyse</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// or provide custom logging adapter</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">adapter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Logging</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="s" style="color: rgb(0, 128, 0);"><span
class="str" style="color: rgb(131, 185, 37);">"customLogger"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mySource</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">log</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"custom"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="flattening-a-stream-of-sequences">
        <h3 id="Flattening_a_stream_of_sequences" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Flattening
          a stream of sequences</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>A stream is given as a
          stream of sequence of elements, but a stream of elements needed
          instead, streaming all the nested elements inside the sequences
          separately.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapConcat</span></code><span
            class="Apple-converted-space">&nbsp;</span>operation can be used to
          implement a one-to-many transformation of elements using a mapper
          function in the form of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">In</span><span class="Apple-converted-space">&nbsp;</span><span
              class="pre" style="color: rgb(11, 85, 103);">=&gt;</span><span class="Apple-converted-space">&nbsp;</span><span
              class="pre" style="color: rgb(11, 85, 103);">immutable.Seq[Out]</span></code>.
          In this case we want to map a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Seq</span></code><span
            class="Apple-converted-space">&nbsp;</span>of elements to the
          elements in the collection itself, so we can just call<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapConcat(identity)</span></code>.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">myData</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">List</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">someDataSource</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flattened</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">myData</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapConcat</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="draining-a-stream-to-a-strict-collection">
        <h3 id="Draining_a_stream_to_a_strict_collection" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Draining
          a stream to a strict collection</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>A possibly unbounded
          sequence of elements is given as a stream, which needs to be collected
          into a Scala collection while ensuring boundedness</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">A
          common situation when working with streams is one where we need to
          collect incoming elements into a Scala collection. This operation is
          supported via<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink.seq</span></code><span
            class="Apple-converted-space">&nbsp;</span>which materializes into a<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Seq[T]]</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          function<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">limit</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">take</span></code><span
            class="Apple-converted-space">&nbsp;</span>should always be used in
          conjunction in order to guarantee stream boundedness, thus preventing
          the program from running out of memory.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">For
          example, this is best avoided:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Dangerous: might produce a collection with 2 billion elements!</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">f</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mySource</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Rather,
          use<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">limit</span></code><span
            class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">take</span></code><span
            class="Apple-converted-space">&nbsp;</span>to ensure that the
          resulting<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Seq</span></code><span
            class="Apple-converted-space">&nbsp;</span>will contain only up to<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">max</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">MAX_ALLOWED_SIZE</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// OK. Future will fail with a `StreamLimitReachedException`</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="c1"
style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// if the number of incoming elements is larger than max</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">limited</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mySource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">limit</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">MAX_ALLOWED_SIZE</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// OK. Collect up until max-th elements only, then cancel upstream</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">ignoreOverflow</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mySource</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">take</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">MAX_ALLOWED_SIZE</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">runWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="calculating-the-digest-of-a-bytestring-stream">
        <h3 id="Calculating_the_digest_of_a_ByteString_stream" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Calculating
          the digest of a ByteString stream</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>A stream of bytes is
          given as a stream of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteStrings</span></code><span
            class="Apple-converted-space">&nbsp;</span>and we want to calculate
          the cryptographic digest of the stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          recipe uses a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>to host a mutable<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">MessageDigest</span></code><span
            class="Apple-converted-space">&nbsp;</span>class (part of the Java
          Cryptography API) and update it with the bytes arriving from the
          stream. When the stream starts, the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler of the stage is
          called, which just bubbles up the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">pull</span></code><span
            class="Apple-converted-space">&nbsp;</span>event to its upstream. As
          a response to this pull, a ByteString chunk will arrive (<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush</span></code>)
          which we use to update the digest, then it will pull for the next
          chunk.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Eventually
          the stream of<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteStrings</span></code><span
            class="Apple-converted-space">&nbsp;</span>depletes and we get a
          notification about this event via<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onUpstreamFinish</span></code>.
          At this point we want to emit the digest value, but we cannot do it
          with<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">push</span></code><span
            class="Apple-converted-space">&nbsp;</span>in this handler directly
          since there may be no downstream demand. Instead we call<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emit</span></code><span
            class="Apple-converted-space">&nbsp;</span>which will temporarily
          replace the handlers, emit the provided value when demand comes in and
          then reset the stage state. It will then complete the stage.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DigestCalculator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">algorithm</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"DigestCalculator.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"DigestCalculator.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">digest</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MessageDigest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">getInstance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">algorithm</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Trigger</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L4"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Trigger</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunk</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">digest</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">update</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toArray</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onUpstreamFinish</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emit</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">digest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">digest</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k"
style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">digest</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">data</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">DigestCalculator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"SHA-256"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="parsing-lines-from-a-stream-of-bytestrings"><span
          id="cookbook-parse-lines-scala"></span>
        <h3 id="Parsing_lines_from_a_stream_of_ByteStrings" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Parsing
          lines from a stream of ByteStrings</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>A stream of bytes is
          given as a stream of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteStrings</span></code><span
            class="Apple-converted-space">&nbsp;</span>containing lines
          terminated by line ending characters (or, alternatively, containing
          binary frames delimited by a special delimiter byte sequence) which
          needs to be parsed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Framing</span></code><span
            class="Apple-converted-space">&nbsp;</span>helper object contains a
          convenience method to parse messages from a stream of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteStrings</span></code>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">scaladsl</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Framing</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">linesStream</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">rawData</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Framing</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">delimiter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"\r\n"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maximumFrameLength</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">100</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">allowTruncation</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kc" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">utf8String</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="implementing-reduce-by-key">
        <h3 id="Implementing_reduce-by-key" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Implementing
          reduce-by-key</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a stream of
          elements, we want to calculate some aggregated value on different
          subgroups of the elements.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          "hello world" of reduce-by-key style operations is<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">wordcount</em><span class="Apple-converted-space">&nbsp;</span>which
          we demonstrate below. Given a stream of words we first create a new
          stream that groups the words according to the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">identity</span></code><span
            class="Apple-converted-space">&nbsp;</span>function, i.e. now we
          have a stream of streams, where every substream will serve identical
          words.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          count the words, we need to process the stream of streams (the actual
          groups containing identical words).<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code>returns
          a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">SubFlow</span></code>,
          which means that we transform the resulting substreams directly. In
          this case we use the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">reduce</span></code>combinator
          to aggregate the word itself and the number of its occurrences within
          a tuple<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">(String,</span><span
              class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Integer)</span></code>.
          Each substream will then emit one final value—precisely such a
          pair—when the overall input completes. As a last step we merge back
          these values from the substreams into one single output stream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
          noteworthy detail pertains to the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">MaximumDistinctWords</span></code><span
            class="Apple-converted-space">&nbsp;</span>parameter: this defines
          the breadth of the groupBy and merge operations. Akka Streams is
          focused on bounded resource consumption and the number of concurrently
          open inputs to the merge operator describes the amount of resources
          needed by the merge itself. Therefore only a finite number of
          substreams can be active at any given time. If the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code><span
            class="Apple-converted-space">&nbsp;</span>operator encounters more
          keys than this number then the stream cannot continue without
          violating its resource bound, in this case<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code><span
            class="Apple-converted-space">&nbsp;</span>will terminate with a
          failure.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">counts</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">String</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">words</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// split the words into separate streams first</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">groupBy</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MaximumDistinctWords</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">identity</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">//transform each element to pair with number of words in it</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// add counting logic to the streams</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">reduce</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">l</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">l</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">_1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">l</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">_2</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">r</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">_2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// get a stream of word counts</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mergeSubstreams</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">By
          extracting the parts specific to<span class="Apple-converted-space">&nbsp;</span><em
            style="font-style: italic;">wordcount</em><span class="Apple-converted-space">&nbsp;</span>into</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">a<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">groupKey</span></code><span
              class="Apple-converted-space">&nbsp;</span>function that defines
            the groups</li>
          <li style="line-height: 18px;">a<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
              class="Apple-converted-space">&nbsp;</span>map each element to
            value that is used by the reduce on the substream</li>
          <li style="line-height: 18px;">a<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">reduce</span></code><span
              class="Apple-converted-space">&nbsp;</span>function that does the
            actual reduction</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">we
          get a generalized version below:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">reduceByKey</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">K</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">](</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumGroupSize</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">groupKey</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);">         </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">K</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);">              </span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">reduce</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">K</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">groupBy</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">K</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumGroupSize</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">groupKey</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">e</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">groupKey</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">e</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">e</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">reduce</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">l</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">r</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">l</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">_1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">reduce</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">l</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">_2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">r</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">_2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">mergeSubstreams</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">wordCounts</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">words</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">reduceByKey</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MaximumDistinctWords</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">groupKey</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">word</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">word</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">word</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">String</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">left</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">right</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">left</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">right</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Please
            note that the reduce-by-key version we discussed above is sequential
            in reading the overall input stream, in other words it is<span class="Apple-converted-space">&nbsp;</span><strong
              style="font-weight: bold; color: rgb(255, 255, 255);">NOT</strong><span
              class="Apple-converted-space">&nbsp;</span>a parallelization
            pattern like MapReduce and similar frameworks.</p>
        </div>
      </div>
      <div class="section" id="sorting-elements-to-multiple-groups-with-groupby">
        <h3 id="Sorting_elements_to_multiple_groups_with_groupBy" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Sorting
          elements to multiple groups with groupBy</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>The<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">groupBy</span></code><span
            class="Apple-converted-space">&nbsp;</span>operation strictly
          partitions incoming elements, each element belongs to exactly one
          group. Sometimes we want to map elements into multiple groups
          simultaneously.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          achieve the desired result, we attack the problem in two steps:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">first, using a function<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">topicMapper</span></code><span
              class="Apple-converted-space">&nbsp;</span>that gives a list of
            topics (groups) a message belongs to, we transform our stream of<code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">Message</span></code><span
              class="Apple-converted-space">&nbsp;</span>to a stream of<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">(Message,</span><span
                class="Apple-converted-space">&nbsp;</span><span class="pre" style="color: rgb(11, 85, 103);">Topic)</span></code><span
              class="Apple-converted-space">&nbsp;</span>where for each topic
            the message belongs to a separate pair will be emitted. This is
            achieved by using<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">mapConcat</span></code></li>
          <li style="line-height: 18px;">Then we take this new stream of message
            topic pairs (containing a separate pair for each topic a given
            message belongs to) and feed it into groupBy, using the topic as the
            group key.</li>
        </ul>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">topicMapper</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">immutable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Seq</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Topic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">extractTopics</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">messageAndTopic</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Topic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elems</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapConcat</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">topicsForMessage</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">topicMapper</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Create a (Msg, Topic) pair for each of the topics</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// the message belongs to</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">topicsForMessage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">multiGroups</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">messageAndTopic</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">groupBy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">_2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">topic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// do what needs to be done</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="working-with-graphs" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Working_with_Graphs" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Working
        with Graphs</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">In
        this collection we show recipes that use stream graph elements to
        achieve various goals.</p>
      <div class="section" id="triggering-the-flow-of-elements-programmatically">
        <h3 id="Triggering_the_flow_of_elements_programmatically" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Triggering
          the flow of elements programmatically</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a stream of
          elements we want to control the emission of those elements according
          to a trigger signal. In other words, even if the stream would be able
          to flow (not being backpressured) we want to hold back elements until
          a trigger signal arrives.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          recipe solves the problem by simply zipping the stream of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Message</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements with the stream
          of<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Trigger</span></code>signals.
          Since<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Zip</span></code><span
            class="Apple-converted-space">&nbsp;</span>produces pairs, we simply
          map the output stream selecting the first element of the pair.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">graph</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Trigger</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]())</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">elements</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">triggerSource</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[(</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Trigger</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">trigger</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Alternatively,
          instead of using a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Zip</span></code>,
          and then using<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">map</span></code><span
            class="Apple-converted-space">&nbsp;</span>to get the first element
          of the pairs, we can avoid creating the pairs in the first place by
          using<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>which takes a two
          argument function to produce the output element. If this function
          would return a pair of the two argument it would be exactly the
          behavior of<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Zip</span></code><span
            class="Apple-converted-space">&nbsp;</span>so<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ZipWith</span></code><span
            class="Apple-converted-space">&nbsp;</span>is a generalization of
          zipping.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">graph</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">builder</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">builder</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ZipWith</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">trigger</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Trigger</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">msg</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elements</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">zip</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">in0</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">triggerSource</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">in1</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">zip</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="balancing-jobs-to-a-fixed-pool-of-workers"><span
          id="cookbook-balance-scala"></span>
        <h3 id="Balancing_jobs_to_a_fixed_pool_of_workers" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Balancing
          jobs to a fixed pool of workers</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a stream of jobs
          and a worker process expressed as a<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>create a pool of workers
          that automatically balances incoming jobs to available workers, then
          merges the results.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
          will express our solution as a function that takes a worker flow and
          the number of workers to be allocated and gives a flow that internally
          contains a pool of these workers. To achieve the desired result we
          will create a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space">&nbsp;</span>from a graph.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          graph consists of a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Balance</span></code><span
            class="Apple-converted-space">&nbsp;</span>node which is a special
          fan-out operation that tries to route elements to available downstream
          consumers. In a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">for</span></code><span
            class="Apple-converted-space">&nbsp;</span>loop we wire all of our
          desired workers as outputs of this balancer element, then we wire the
          outputs of these workers to a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Merge</span></code><span
            class="Apple-converted-space">&nbsp;</span>element that will collect
          the results from the workers.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          make the worker stages run in parallel we mark them as asynchronous
          with<span class="Apple-converted-space">&nbsp;</span><cite style="font-style: normal;">async</cite>.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">balancer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">](</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">worker</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Any</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">],</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">workerCount</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">In</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span class="pun"
style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">balancer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Balance</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">In</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">workerCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">waitForAllDownstreams</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Merge</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">workerCount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">for</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">&lt;-</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">to</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">workerCount</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// for each worker, add an edge from the balancer to the worker, then wire</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// it to the merge element</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">balancer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">merge</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">balancer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">merge</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">processedJobs</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Result</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">myJobs</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">balancer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">worker</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="working-with-rate" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Working_with_rate" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Working
        with rate</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
        collection of recipes demonstrate various patterns where rate
        differences between upstream and downstream needs to be handled by other
        strategies than simple backpressure.</p>
      <div class="section" id="dropping-elements">
        <h3 id="Dropping_elements" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Dropping
          elements</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a fast producer and
          a slow consumer, we want to drop elements if necessary to not slow
          down the producer too much.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          can be solved by using a versatile rate-transforming operation,<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code>.
          Conflate can be thought as a special<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">reduce</span></code><span
            class="Apple-converted-space">&nbsp;</span>operation that collapses
          multiple upstream elements into one aggregate element if needed to
          keep the speed of the upstream unaffected by the downstream.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">When
          the upstream is faster, the reducing process of the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space">&nbsp;</span>starts. Our reducer
          function simply takes the freshest element. This in a simple dropping
          operation.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">droppyStream</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Message</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">conflate</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">lastMessage</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">newMessage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">newMessage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">There
          is a more general version of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space">&nbsp;</span>named<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code><span
            class="Apple-converted-space">&nbsp;</span>that allows to express
          more complex aggregations, more similar to a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">fold</span></code>.</p>
      </div>
      <div class="section" id="dropping-broadcast">
        <h3 id="Dropping_broadcast" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Dropping
          broadcast</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>The default<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Broadcast</span></code><span
            class="Apple-converted-space">&nbsp;</span>graph element is properly
          backpressured, but that means that a slow downstream consumer can hold
          back the other downstream consumers resulting in lowered throughput.
          In other words the rate of<code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Broadcast</span></code><span
            class="Apple-converted-space">&nbsp;</span>is the rate of its
          slowest downstream consumer. In certain cases it is desirable to allow
          faster consumers to progress independently of their slower siblings by
          dropping elements if necessary.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
          solution to this problem is to append a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">buffer</span></code><span
            class="Apple-converted-space">&nbsp;</span>element in front of all
          of the downstream consumers defining a dropping strategy instead of
          the default<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Backpressure</span></code>.
          This allows small temporary rate differences between the different
          consumers (the buffer smooths out small rate variances), but also
          allows faster consumers to progress by dropping from the buffer of the
          slow consumers if necessary.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">graph</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">RunnableGraph</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">fromGraph</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">create</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mySink1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">mySink2</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mySink3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">b</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">sink1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink2</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink3</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphDSL</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Implicits</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">b</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">add</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Broadcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">3</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">myElements</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">bcast</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink1</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink2</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">bcast</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OverflowStrategy</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">dropHead</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">~&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sink3</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ClosedShape</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="collecting-missed-ticks">
        <h3 id="Collecting_missed_ticks" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Collecting
          missed ticks</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a regular (stream)
          source of ticks, instead of trying to backpressure the producer of the
          ticks we want to keep a counter of the missed ticks instead and pass
          it down when possible.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
          will use<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code><span
            class="Apple-converted-space">&nbsp;</span>to solve the problem. The
          seed version of conflate takes two functions:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">A seed function that produces the zero
            element for the folding process that happens when the upstream is
            faster than the downstream. In our case the seed function is a
            constant function that returns 0 since there were no missed ticks at
            that point.</li>
          <li style="line-height: 18px;">A fold function that is invoked when
            multiple upstream messages needs to be collapsed to an aggregate
            value due to the insufficient processing rate of the downstream. Our
            folding function simply increments the currently stored count of the
            missed ticks so far.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          a result, we have a flow of<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Int</span></code><span
            class="Apple-converted-space">&nbsp;</span>where the number
          represents the missed ticks. A number 0 means that we were able to
          consume the tick fast enough (i.e. zero means: 1 non-missed tick + 0
          missed ticks)</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">missedTicks</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">conflateWithSeed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">seed</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)(</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">missedTicks</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tick</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">missedTicks</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="create-a-stream-processor-that-repeats-the-last-element-seen">
        <h3 id="Create_a_stream_processor_that_repeats_the_last_element_seen" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Create
          a stream processor that repeats the last element seen</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a producer and
          consumer, where the rate of neither is known in advance, we want to
          ensure that none of them is slowing down the other by dropping earlier
          unconsumed elements from the upstream if necessary, and repeating the
          last value for the downstream if necessary.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
          have two options to implement this feature. In both cases we will use<span
            class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>to build our custom
          element. In the first version we will use a provided initial value<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">initial</span></code><span
            class="Apple-converted-space">&nbsp;</span>that will be used to feed
          the downstream if no upstream element is ready yet. In the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler we just overwrite
          the<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">currentValue</span></code><span
            class="Apple-converted-space">&nbsp;</span>variable and immediately
          relieve the upstream by calling<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">pull()</span></code>.
          The downstream<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler is very similar,
          we immediately relieve the downstream by emitting<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">currentValue</span></code>.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">HoldWithInitial</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">initial</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"HoldWithInitial.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"HoldWithInitial.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">currentValue</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">initial</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandlers</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">with</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">currentValue</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">grab</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">currentValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">preStart</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">While
          it is relatively simple, the drawback of the first version is that it
          needs an arbitrary initial element which is not always possible to
          provide. Hence, we create a second version where the downstream might
          need to wait in one single case: if the very first element is not yet
          available.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">We
          introduce a boolean variable<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">waitingFirstValue</span></code><span
            class="Apple-converted-space">&nbsp;</span>to denote whether the
          first element has been provided or not (alternatively an<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Option</span></code><span
            class="Apple-converted-space">&nbsp;</span>can be used for<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">currentValue</span></code><span
            class="Apple-converted-space">&nbsp;</span>or if the element type is
          a subclass of AnyRef a null can be used with the same purpose). In the
          downstream<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull()</span></code><span
            class="Apple-converted-space">&nbsp;</span>handler the difference
          from the previous version is that we check if we have received the
          first value and only emit if we have. This leads to that when the
          first element comes in we must check if there possibly already was
          demand from downstream so that we in that case can push the element
          directly.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">HoldWithWait</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"HoldWithWait.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"HoldWithWait.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">currentValue</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitingFirstValue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">true</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandlers</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">with</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">currentValue</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">grab</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitingFirstValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">waitingFirstValue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kc" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">false</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isAvailable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">currentValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(!</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitingFirstValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">currentValue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">preStart</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">pull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="globally-limiting-the-rate-of-a-set-of-streams">
        <h3 id="Globally_limiting_the_rate_of_a_set_of_streams" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Globally
          limiting the rate of a set of streams</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a set of
          independent streams that we cannot merge, we want to globally limit
          the aggregate throughput of the set of streams.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">One
          possible solution uses a shared actor as the global limiter combined
          with mapAsync to create a reusable<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code>that
          can be plugged into a stream to limit its rate.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">As
          the first step we define an actor that will do the accounting for the
          global rate limit. The actor maintains a timer, a counter for pending
          permit tokens and a queue for possibly waiting participants. The actor
          has an<span class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">open</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">closed</span></code>state.
          The actor is in the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">open</span></code><span
            class="Apple-converted-space">&nbsp;</span>state while it has still
          pending permits. Whenever a request for permit arrives as a<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">WantToPass</span></code><span
            class="Apple-converted-space">&nbsp;</span>message to the actor the
          number of available permits is decremented and we notify the sender
          that it can pass by answering with a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">MayPass</span></code><span
            class="Apple-converted-space">&nbsp;</span>message. If the amount of
          permits reaches zero, the actor transitions to the<code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">closed</span></code><span
            class="Apple-converted-space">&nbsp;</span>state. In this state
          requests are not immediately answered, instead the reference of the
          sender is added to a queue. Once the timer for replenishing the
          pending permits fires by sending a<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ReplenishTokens</span></code><span
            class="Apple-converted-space">&nbsp;</span>message, we increment the
          pending permits counter and send a reply to each of the waiting
          senders. If there are more waiting senders than permits available we
          will stay in the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">closed</span></code><span
            class="Apple-converted-space">&nbsp;</span>state.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Limiter</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WantToPass</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">MayPass</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">object</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ReplenishTokens</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">props</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshPeriod</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">FiniteDuration</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">            </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tokenRefreshAmount</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Props</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Limiter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tokenRefreshPeriod</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">tokenRefreshAmount</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Limiter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshPeriod</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">FiniteDuration</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshAmount</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Actor</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Limiter</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">context</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span></li><li class="L7"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">actor</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Status</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitQueue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">immutable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Queue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ActorRef</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">replenishTimer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">scheduler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">schedule</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">initialDelay</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshPeriod</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">interval</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshPeriod</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">receiver</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">self</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ReplenishTokens</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">receive</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Receive</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">open</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">open</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Receive</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ReplenishTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">math</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">min</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshAmount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WantToPass</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">sender</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MayPass</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">==</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">context</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">become</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">closed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">closed</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Receive</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ReplenishTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">math</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">min</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">tokenRefreshAmount</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maxAvailableTokens</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">releaseWaiting</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">WantToPass</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitQueue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitQueue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">enqueue</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">sender</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">())</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">releaseWaiting</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toBeReleased</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">remainingQueue</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">waitQueue</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">splitAt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitQueue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">remainingQueue</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toBeReleased</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">size</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">toBeReleased</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">foreach</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">MayPass</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">permitTokens</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">context</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">become</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">open</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">postStop</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">replenishTimer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cancel</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">waitQueue</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">foreach</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">!</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Status</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Failure</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">IllegalStateException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"limiter stopped"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)))</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">To
          create a Flow that uses this global limiter actor we use the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">mapAsync</span></code><span
            class="Apple-converted-space">&nbsp;</span>function with the
          combination of the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ask</span></code>pattern.
          We also define a timeout, so if a reply is not received during the
          configured maximum wait period the returned future from<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ask</span></code><span
            class="Apple-converted-space">&nbsp;</span>will fail, which will
          fail the corresponding stream as well.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">limitGlobal</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">](</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">limiter</span></span><span class="k"
style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorRef</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maxAllowedWait</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FiniteDuration</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="pun" style="color: rgb(89, 80, 80);">,</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">pattern</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">ask</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">util</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="typ" style="color: rgb(0, 143, 169);">Timeout</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">T</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">mapAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">4</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)((</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">element</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">T</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">system</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">dispatcher</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">triggerTimeout</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Timeout</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">maxAllowedWait</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">limiterTriggerFuture</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">limiter</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">?</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Limiter</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">WantToPass</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">limiterTriggerFuture</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">element</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <div class="admonition note" style="margin-bottom: 18px; position: relative; padding: 7px 15px; color: rgb(255, 255, 255); border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.247059); border-width: 1px; border-style: solid; border-radius: 4px; box-shadow: rgba(255, 255, 255, 0.247059) 0px 1px 0px inset; background-image: -webkit-linear-gradient(top, rgb(115, 203, 226), rgb(21, 169, 206)); background-color: rgb(253, 245, 217); background-repeat: repeat-x;">
          <p class="first admonition-title" style="margin: 0px 0px 6px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 16px; line-height: 20px; padding-top: 4px; color: rgb(255, 255, 255); font-weight: bold;">Note</p>
          <p class="last" style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
            global actor used for limiting introduces a global bottleneck. You
            might want to assign a dedicated dispatcher for this actor.</p>
        </div>
      </div>
    </div>
    <div class="section" id="working-with-io" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Working_with_IO" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Working
        with IO</h2>
      <div class="section" id="chunking-up-a-stream-of-bytestrings-into-limited-size-bytestrings">
        <h3 id="Chunking_up_a_stream_of_ByteStrings_into_limited_size_ByteStrings"
          style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Chunking
          up a stream of ByteStrings into limited size ByteStrings</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a stream of
          ByteStrings we want to produce a stream of ByteStrings containing the
          same bytes in the same sequence, but capping the size of ByteStrings.
          In other words we want to slice up ByteStrings into smaller chunks if
          they exceed a size threshold.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          can be achieved with a single<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code>.
          The main logic of our stage is in<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emitChunk()</span></code><span
            class="Apple-converted-space">&nbsp;</span>which implements the
          following logic:</p>
        <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
          <li style="line-height: 18px;">if the buffer is empty, and upstream is
            not closed we pull for more bytes, if it is closed we complete</li>
          <li style="line-height: 18px;">if the buffer is nonEmpty, we split it
            according to the<span class="Apple-converted-space">&nbsp;</span><code
              class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                class="pre" style="color: rgb(11, 85, 103);">chunkSize</span></code>.
            This will give a next chunk that we will emit, and an empty or
            nonempty remaining buffer.</li>
        </ul>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Both<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
            class="Apple-converted-space">&nbsp;</span>and<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPull()</span></code><span
            class="Apple-converted-space">&nbsp;</span>calls<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">emitChunk()</span></code><span
            class="Apple-converted-space">&nbsp;</span>the only difference is
          that the push handler also stores the incoming chunk by appending to
          the end of the buffer.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Chunker</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">chunkSize</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Chunker.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Chunker.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">empty</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandler</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isClosed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emitChunk</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">    </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">setHandler</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">elem</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buffer</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">++=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">elem</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">emitChunk</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onUpstreamFinish</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isEmpty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L5"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// There are elements left in buffer, so</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// we keep accepting downstream pulls and push from buffer until emptied.</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">//</span></span></li><li class="L9"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">          </span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// It might be though, that the upstream finished while it was pulled, in which</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// case we will not get an onPull from the downstream, because we already had one.</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// In that case we need to emit from the buffer.</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">          </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isAvailable</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">emitChunk</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L3"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">emitChunk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">buffer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isEmpty</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">isClosed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">completeStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span></li><li class="L0"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nextBuffer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buffer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">splitAt</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunkSize</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">buffer</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">nextBuffer</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">push</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunk</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">chunksStream</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">rawBytes</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">via</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Chunker</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ChunkLimit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="limit-the-number-of-bytes-passing-through-a-stream-of-bytestrings">
        <h3 id="Limit_the_number_of_bytes_passing_through_a_stream_of_ByteStrings"
          style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Limit
          the number of bytes passing through a stream of ByteStrings</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a stream of
          ByteStrings we want to fail the stream if more than a given maximum of
          bytes has been consumed.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">This
          recipe uses a<span class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space">&nbsp;</span>to implement the desired
          feature. In the only handler we override,<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">onPush()</span></code><span
            class="Apple-converted-space">&nbsp;</span>we just update a counter
          and see if it gets larger than<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">maximumBytes</span></code>.
          If a violation happens we signal failure, otherwise we forward the
          chunk we have received.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">akka</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stream</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">stage</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">class</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteLimiter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">maximumBytes</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Long</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">extends</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStage</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Inlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"ByteLimiter.in"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Outlet</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">](</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"ByteLimiter.out"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">FlowShape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">of</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="kwd"
style="color: rgb(48, 166, 40);">out</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">createLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">inheritedAttributes</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Attributes</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">GraphStageLogic</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">shape</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">private</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">count</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">setHandlers</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">InHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">with</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">OutHandler</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPull</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">pull</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">override</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">def</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">onPush</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">chunk</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">grab</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">count</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">chunk</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">size</span></span></li><li class="L8"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">        </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">if</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">count</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">maximumBytes</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">failStage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">IllegalStateException</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"Too much bytes"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">else</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">push</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">out</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">chunk</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">  </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">}</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">limiter</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">new</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteLimiter</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">SizeLimit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="compact-bytestrings-in-a-stream-of-bytestrings">
        <h3 id="Compact_ByteStrings_in_a_stream_of_ByteStrings" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Compact
          ByteStrings in a stream of ByteStrings</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>After a long stream of
          transformations, due to their immutable, structural sharing nature
          ByteStrings may refer to multiple original ByteString instances
          unnecessarily retaining memory. As the final step of a transformation
          chain we want to have clean copies that are no longer referencing the
          original ByteStrings.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">The
          recipe is a simple use of map, calling the<span class="Apple-converted-space">&nbsp;</span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">compact()</span></code><span
            class="Apple-converted-space">&nbsp;</span>method of the<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space">&nbsp;</span>elements. This does
          copying of the underlying arrays, so this should be the last element
          of a long chain if used.</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">compacted</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">data</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">map</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">compact</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="injecting-keep-alive-messages-into-a-stream-of-bytestrings">
        <h3 id="Injecting_keep-alive_messages_into_a_stream_of_ByteStrings" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Injecting
          keep-alive messages into a stream of ByteStrings</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><strong
            style="font-weight: bold; color: rgb(11, 85, 103);">Situation:</strong><span
            class="Apple-converted-space">&nbsp;</span>Given a communication
          channel expressed as a stream of ByteStrings we want to inject
          keep-alive messages but only if this does not interfere with normal
          traffic.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">There
          is a built-in operation that allows to do this directly:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">import</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nn" style="color: rgb(0, 0, 0);"><span
class="pln" style="color: rgb(89, 80, 80);">scala</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">concurrent</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">duration</span><span class="pun" style="color: rgb(89, 80, 80);">.</span><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">injectKeepAlive</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">:</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ByteString</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">keepAlive</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mf" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1.</span></span><span
class="n"><span class="lit" style="color: rgb(25, 95, 145);">second</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">()</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">keepaliveMessage</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Configuration</h1>
    <div class="highlight-scala" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <div class="highlight" style="background: rgb(240, 240, 240);">
        <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="com" style="color: rgb(147, 161, 161);">#####################################</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="com"
style="color: rgb(147, 161, 161);"># Akka Stream Reference Config File #</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="com"
style="color: rgb(147, 161, 161);">#####################################</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">akka </span><span class="pun" style="color: rgb(89, 80, 80);">{</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  stream </span><span class="pun" style="color: rgb(89, 80, 80);">{</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="com" style="color: rgb(147, 161, 161);"># Default flow materializer settings</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    materializer </span><span class="pun" style="color: rgb(89, 80, 80);">{</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Initial size of buffers used in stream elements</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      initial</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">input</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">size </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">4</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Maximum size of buffers used in stream elements</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      max</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">input</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">size </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">16</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Fully qualified config path which holds the dispatcher configuration</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># to be used by FlowMaterialiser when creating Actors.</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># When this value is left empty, the default-dispatcher will be used.</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      dispatcher </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="str" style="color: rgb(131, 185, 37);">""</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Cleanup leaked publishers and subscribers when they are not used within a given</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># deadline</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      subscription</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">timeout </span><span class="pun" style="color: rgb(89, 80, 80);">{</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># when the subscription timeout is reached one of the following strategies on</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># the "stale" publisher:</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># cancel - cancel it (via `onError` or subscribing to the publisher and</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);">#          `cancel()`ing the subscription right away</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># warn   - log a warning statement about the stale element (then drop the</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);">#          reference to it)</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># noop   - do nothing (not recommended)</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        mode </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> cancel</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># time after which a subscriber / publisher is considered stale and eligible</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># for cancelation (see `akka.stream.subscription-timeout.mode`)</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        timeout </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">5s</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Enable additional troubleshooting logging at DEBUG log level</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      debug</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">logging </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> off</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Maximum number of elements emitted in batch if downstream signals large demand</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      output</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">burst</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">limit </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1000</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Enable automatic fusing of all graphs that are run. For short-lived streams</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># this may cause an initial runtime overhead, but most of the time fusing is</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># desirable since it reduces the number of Actors that are created.</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="kwd" style="color: rgb(48, 166, 40);">auto</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">fusing </span><span
class="pun" style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> on</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># buffer upon stream materialization if the requested buffer size is less than this</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># configuration parameter. The default is very high because failing early is better</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># than failing under load.</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);">#</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Buffers sized larger than this will dynamically grow/shrink and consume more memory</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># per element than the fixed size buffers.</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      max</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="kwd" style="color: rgb(48, 166, 40);">fixed</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">buffer</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">size </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1000000000</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Maximum number of sync messages that actor can process for stream to substream communication.</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Parameter allows to interrupt synchronous processing to get upsteam/downstream messages.</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      </span><span class="com" style="color: rgb(147, 161, 161);"># Allows to accelerate message processing that happening withing same actor but keep system responsive.</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      sync</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">processing</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">limit </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1000</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      debug </span><span class="pun"
style="color: rgb(89, 80, 80);">{</span></li><li class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># Enables the fuzzing mode which increases the chance of race conditions</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># by aggressively reordering events and making certain operations more</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># concurrent than usual.</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># This setting is for testing purposes, NEVER enable this in a production</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># environment!</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># To get the best results, try combining this setting with a throughput</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        </span><span class="com" style="color: rgb(147, 161, 161);"># of 1 on the corresponding dispatchers.</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">        fuzzing</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">mode </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> off</span></li><li class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="com" style="color: rgb(147, 161, 161);"># Fully qualified config path which holds the dispatcher configuration</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="com" style="color: rgb(147, 161, 161);"># to be used by FlowMaterialiser when creating Actors for IO operations,</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="com" style="color: rgb(147, 161, 161);"># such as FileSource, FileSink and others.</span></li><li
class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    blocking</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">io</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">dispatcher </span><span class="pun"
style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="str" style="color: rgb(131, 185, 37);">"akka.stream.default-blocking-io-dispatcher"</span></li><li
class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">    </span><span class="kwd" style="color: rgb(48, 166, 40);">default</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">blocking</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">io</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">dispatcher </span><span
class="pun" style="color: rgb(89, 80, 80);">{</span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      type </span><span class="pun"
style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="str" style="color: rgb(131, 185, 37);">"Dispatcher"</span></li><li class="L2"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln" style="color: rgb(89, 80, 80);">      executor </span><span
class="pun" style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="str" style="color: rgb(131, 185, 37);">"thread-pool-executor"</span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">      throughput </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      thread</span><span class="pun"
style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">pool</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">executor </span><span
class="pun" style="color: rgb(89, 80, 80);">{</span></li><li class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        core</span><span class="pun"
style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">pool</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">size</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">min </span><span
class="pun" style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="lit" style="color: rgb(25, 95, 145);">2</span></li><li class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        core</span><span class="pun"
style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">pool</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">size</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">factor </span><span
class="pun" style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="lit" style="color: rgb(25, 95, 145);">2.0</span></li><li class="L8" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">        core</span><span class="pun"
style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">pool</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">size</span><span
class="pun" style="color: rgb(89, 80, 80);">-</span><span class="pln" style="color: rgb(89, 80, 80);">max </span><span
class="pun" style="color: rgb(89, 80, 80);">=</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="lit" style="color: rgb(25, 95, 145);">16</span></li><li class="L9" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">      </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">&nbsp;</span></li><li class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="com" style="color: rgb(147, 161, 161);"># configure overrides to ssl-configuration here (to be used by akka-streams, and akka-http – i.e. when serving https connections)</span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  ssl</span><span class="pun" style="color: rgb(89, 80, 80);">-</span><span
class="pln" style="color: rgb(89, 80, 80);">config </span><span class="pun" style="color: rgb(89, 80, 80);">{</span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    protocol </span><span class="pun" style="color: rgb(89, 80, 80);">=</span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="str" style="color: rgb(131, 185, 37);">"TLSv1.2"</span></li><li
class="L6" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="pun" style="color: rgb(89, 80, 80);">}</span></li><li
class="L7" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pun"
style="color: rgb(89, 80, 80);">}</span></li></ol></pre>
      </div>
    </div>
    <p> </p>
    <h1 style="margin: 0px; font-weight: bold; color: rgb(21, 169, 206); text-rendering: optimizeLegibility; font-size: 30px; line-height: 36px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-style: normal; font-variant: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">Інструкція
      з міграції з 2.0.x до 2.4.x</h1>
    <div class="section" id="general-notes" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="General_notes" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Загальні
        зауваження</h2>
      <div class="section" id="akka-done-and-akka-notused-replacing-unit-and-boxedunit">
        <h3 id="akka_Done_and_akka_NotUsed_replacing_Unit_and_BoxedUnit" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">akka.Done
          та akka.NotUsed замінили Unit та BoxedUnit</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
          провадити більш ясні сігнатури, та мати уніфікований API для обох,
          Java та Scala, були введені два нові типи:</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.NotUsed</span></code><span
            class="Apple-converted-space"> призначений бути використаний
            замість&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Unit</span></code><span
            class="Apple-converted-space"> в</span> Scala та<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BoxedUnit</span></code><span
            class="Apple-converted-space"> в </span>Java, щоб позначити. що тип
          параметра необзідний, але не викорстовується. Це загальний випадок
          для&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code><span
            class="Apple-converted-space">, що не матеріалізують жодного
            значення</span>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.Done</span></code><span
            class="Apple-converted-space"> доданий для випадка використання,
            коли він замкнений в іншому об'єкті, щоб позначити завершення, але
            немає справжнього значення, приєднаного до завершення</span>. Він
          використовується для заміни входжень&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future&lt;BoxedUnit&gt;</span></code><span
            class="Apple-converted-space"> на </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future&lt;Done&gt;</span></code><span
            class="Apple-converted-space"> в </span>Java, та<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Unit]</span></code><span
            class="Apple-converted-space"> на</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Future[Done]</span></code><span
            class="Apple-converted-space"> в</span> Scala.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Всі
          попередні використання&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Unit</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BoxedUnit</span></code><span
            class="Apple-converted-space"> для ціх двох випадків в </span>Akka
          Streams API біли оновлені.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Це
          означає, що код Scala як цей:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Unit</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">потрібно
          змінити на наступний:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">NotUsed</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">source</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="kwd" style="color: rgb(48, 166, 40);">from</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">5</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="pun" style="color: rgb(89, 80, 80);">,</span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Future</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Done</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">]]</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">sink</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Sink</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">ignore</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">()</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Ці
          зміни стосуються до всіх місць, де використовуються потоки, що
          означає, що сигнатури API стійких запитів також зазнали змін.</p>
      </div>
    </div>
    <div class="section" id="removed-implicitmaterializer" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Removed_ImplicitMaterializer" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Видалено
        ImplicitMaterializer</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Допоміжний
        трейт&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">ImplicitMaterializer</span></code><span
          class="Apple-converted-space"> був видалений, оскільки його було важко
          знайти, та можливість не була не варта додаткового трейта. </span>Визначення
        неявного матеріалізатора в оточующому акторові може бути зроблена таким
        чином:</p>
      <div class="highlight-scala">
        <div class="highlight" style="background: rgb(240, 240, 240);">
          <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">final</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">implicit</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">val</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">:</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">ActorMaterializerSettings</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">context</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">system</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
        </div>
      </div>
    </div>
    <div class="section" id="changed-operators" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Changed_Operators" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Змінені
        операції</h2>
      <div class="section" id="expand-is-now-based-on-an-iterator">
        <h3 id="expand___is_now_based_on_an_Iterator" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">expand()</span></code><span
            class="Apple-converted-space"> тепер базується на&nbsp;</span>
          Iterator</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Перед
          цім комбінатор <span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">expand</span></code><span
            class="Apple-converted-space"> потребував двох вхідних функцій</span>:
          перша підіймала входящі значення в екстрапольованому стані, та друга
          виділяля з цього значення, можливо включаючи цей стан. Це було
          спрощено в єдину функцію, що перетворює входящий елемент в Iterator.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Найбільш
          помітний випадок використання раніше було просто повторювати отримане
          перед цім значення:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">identity</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">s</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">s</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Це більше на працює!</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
          Akka 2.4.x це спрощене до:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">continually</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">))</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Якщо
          стан вимагає утримуватись на під час процеса розширення, тоді цей стан
          буде потребувати бути обробленим в ітераторі. Приклад підрахунку числа
          розширень раніше міг виглядати так:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Це більше не працює!</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="nc"
style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">((</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">0</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)){</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="kwd" style="color: rgb(48, 166, 40);">case</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">count</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">count</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">-&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="kwd" style="color: rgb(48, 166, 40);">in</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">count</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">}</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
          Akka 2.4.x це формулюється таким чином:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">expand</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">i</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=&gt;</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">{</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="pln" style="color: rgb(89, 80, 80);">  </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="kwd" style="color: rgb(48, 166, 40);">var</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">state</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pun" style="color: rgb(89, 80, 80);">=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">0</span></span></li><li
class="L2" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Iterator</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">continually</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">({</span></span></li><li
class="L3" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="n"><span class="pln" style="color: rgb(89, 80, 80);">state</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+=</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span></li><li
class="L4" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">    </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">i</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">state</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li
class="L5" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="pln"
style="color: rgb(89, 80, 80);">  </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li><li class="L6"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">})</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="conflate-has-been-renamed-to-conflatewithseed">
        <h3 id="conflate_has_been_renamed_to_conflateWithSeed__" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">conflate</span></code><span
            class="Apple-converted-space"> був переіменований на</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">conflateWithSeed()</span></code></h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Новий
          оператор&nbsp;<span class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflate</span></code><span
            class="Apple-converted-space"> є спеціальним випадком оригінальної
            поведінки </span>(переіменований на&nbsp;<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code>),
          що не змінює тип потока. Використання нового оператора таке просте,
          як:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">[</span></span><span
class="kt" style="color: rgb(0, 0, 128);"><span class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">].</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">conflate</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">+</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">_</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// Додає числа, докі даунстрім не готовий</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Що
          те ж саме, що використовувати&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">conflateWithSeed</span></code><span
            class="Apple-converted-space"> з функцією </span>identity</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>Flow[Int].conflateWithSeed(identity)(_ + _) // Додавати числа,
            докі даунстрім не готовий</div>
        </blockquote>
      </div>
      <div class="section" id="viaasync-and-viaasyncmat-has-been-replaced-with-async">
        <h3 id="viaAsync_and_viaAsyncMat_has_been_replaced_with_async" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">viaAsync</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">viaAsyncMat</span></code><span
            class="Apple-converted-space"> </span>були замінені на<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103); font-size: 16px;">async</span></code></h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">async</span></code><span
            class="Apple-converted-space"> доступний з&nbsp;</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Sink</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Source</span></code>,<span
            class="Apple-converted-space">&nbsp;</span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow</span></code><span
            class="Apple-converted-space"> потоків-заглушок</span>. Він
          провадить скорочення для встановлення атрибута <code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Attributes.asyncBoundary</span></code><span
            class="Apple-converted-space"> на потоці</span>. Існуючі
          методи&nbsp;<span class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow.viaAsync</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Flow.viaAsyncMat</span></code><span
            class="Apple-converted-space"> були видалені, щоб зробити маркування
            асинхронних меж більш узгодженими</span>:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="c1" style="color: rgb(119, 119, 102);"><span class="com" style="color: rgb(147, 161, 161);">// Це більше не працює</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">source</span></span><span class="o"
style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">viaAsync</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">В
          Akka 2.4.x це буде замість цього виглядати так:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pln" style="color: rgb(89, 80, 80);">val</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">flow</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="k" style="color: rgb(0, 0, 128);"><span class="pun" style="color: rgb(89, 80, 80);">=</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="nc" style="color: rgb(0, 0, 0);"><span
class="typ" style="color: rgb(0, 143, 169);">Flow</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">[</span></span><span class="kt" style="color: rgb(0, 0, 128);"><span
class="typ" style="color: rgb(0, 143, 169);">Int</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">].</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">map</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">(</span></span><span class="k" style="color: rgb(0, 0, 128);"><span
class="pln" style="color: rgb(89, 80, 80);">_</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">+</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">1</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">)</span></span></li><li class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span
class="nc" style="color: rgb(0, 0, 0);"><span class="typ" style="color: rgb(0, 143, 169);">Source</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">1</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">to</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="mi" style="color: rgb(0, 128, 0);"><span class="lit" style="color: rgb(25, 95, 145);">10</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">).</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">via</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">flow</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">async</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">)</span></span></li></ol></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="changes-in-akka-http" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Changes_in_Akka_HTTP" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Зміни
        в Akka HTTP</h2>
      <div class="section" id="routing-settings-parameter-name">
        <h3 id="Routing_settings_parameter_name" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Ім'я
          параметра налаштування маршрутизації</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;"><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RoutingSettings</span></code><span
            class="Apple-converted-space"> були до цього єдиним налаштуванням,
            доступним на&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RequestContext</span></code>,
          та були доступні через <code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">settings</span></code>.
          Тепер ми зробили можливим сконфігурувати також налаштування парсерів,
          так що&nbsp;<span class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">RoutingSettings</span></code><span
            class="Apple-converted-space"> тепер </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">routingSettings</span></code><span
            class="Apple-converted-space"> та&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ParserSettings</span></code><span
            class="Apple-converted-space"> тепер доступні через </span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">parserSettings</span></code>.</p>
      </div>
      <div class="section" id="client-server-behaviour-on-cancelled-entity">
        <h3 id="Client___server_behaviour_on_cancelled_entity" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Поведінка
          клієнт/сервер на перерваній сутності </h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Раніше,
          якщо запит або відповідь були перервані або спожиті тільки частково
          (тобто з використанням комбінатора <span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">take</span></code>),
          залишок даних був тихо поглинутий для запобігання звалювання з'єднання,
          оскільки можуть бути більше надходжень запитів/відповідей. Тепер
          поведінка по замовчанню є закриття з'єднання, щоб запобігти надмірного
          використання ресурсів в випадку величезних сутностей.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Стара
          поведінка може бути досягнена через примусове очищення сутностей:</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>response.entity.dataBytes.runWith(Sink.ignore)</div>
        </blockquote>
      </div>
    </div>
    <div class="section" id="changed-sources-sinks" style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="Changed_Sources___Sinks" style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">Змінені&nbsp;
        Source/Sink</h2>
      <div class="section" id="io-sources-sinks-materialize-ioresult">
        <h3 id="IO_Sources___Sinks_materialize_IOResult" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">IO
          Source/Sink матеріалізують IOResult</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Матеріалізовані
          значення наступних джерел та приймачів:</p>
        <blockquote style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
          <div>
            <ul class="simple" style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
              <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">FileIO.fromPath</span></code></li>
              <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">FileIO.toPath</span></code></li>
              <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">StreamConverters.fromInputStream</span></code></li>
              <li style="line-height: 18px;"><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
                    class="pre" style="color: rgb(11, 85, 103);">StreamConverters.fromOutputStream</span></code></li>
            </ul>
          </div>
        </blockquote>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">були
          змінені з&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Long</span></code><span
            class="Apple-converted-space"> на</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.io.IOResult</span></code>.
          Це дозволяє надсилати більш складні сигнали сценаріїв завершення.
          Наприклад, по збою тепер можливо повертати виключення, та число байт,
          записаних до того, як виникло виключення.&nbsp;</p>
      </div>
    </div>
    <div class="section" id="pushstage-pushpullstage-and-detachedstage-have-been-deprecated-in-favor-of-graphstage"
      style="color: rgb(11, 85, 103); font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
      <h2 id="PushStage__PushPullStage_and_DetachedStage_have_been_deprecated_in_favor_of_GraphStage"
        style="margin: 0px 0px 2px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; font-size: 24px; line-height: 36px; padding-top: 14px; padding-bottom: 4px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.14902);">PushStage,
        PushPullStage та DetachedStage пішли в минуле на користь GraphStage</h2>
      <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Класи
        <span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">PushStage</span></code><span
          class="Apple-converted-space">&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">PushPullStage</span></code><span
          class="Apple-converted-space"> та</span><span class="Apple-converted-space">
        </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">DetachedStage</span></code><span
          class="Apple-converted-space"> пішли у відставку, та мають бути
          замінені на&nbsp;</span><code class="xref py py-class docutils literal"
          style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
            class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
          class="Apple-converted-space">&nbsp;</span>(<a class="reference internal"
          href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-customize.html#graphstage-scala"
          style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Власна
            обробка з використанням GraphStage</span></a>), що тепер є єдиним
        потужним API для власної обробки потоків.</p>
      <div class="section" id="update-procedure">
        <h3 id="Update_procedure" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Процедура
          оновелння</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Будь
          ласка, проконсультуйтесь з документацією&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code><span
            class="Apple-converted-space"> </span>(<a class="reference internal"
            href="http://doc.akka.io/docs/akka/2.4/scala/stream/stream-customize.html#graphstage-scala"
            style="color: rgb(21, 169, 206); text-decoration: none;"><span class="std std-ref">Власна
              обробка за допомогою GraphStage</span></a>) та&nbsp;<span class="Apple-converted-space"></span><a
            class="reference external" href="http://doc.akka.io/docs/akka-stream-and-http-experimental/2.0.2/scala/migration-guide-1.0-2.x-scala.html#AsyncStage_has_been_replaced_by_GraphStage"
            style="color: rgb(21, 169, 206); text-decoration: none;">попередньою
            інструкцією по міграції</a><span class="Apple-converted-space"> </span>щодо
          міграції&nbsp;<span class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">AsyncStage</span></code><span
            class="Apple-converted-space"> на</span><span class="Apple-converted-space">
          </span><code class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">GraphStage</span></code>.</p>
      </div>
      <div class="section" id="websocket-now-consistently-named-websocket">
        <h3 id="Websocket_now_consistently_named_WebSocket" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Websocket
тепер
          узгоджено названий WebSocket</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Попередньо
          ми мали суміш методів та класів, названих&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">websocket</span></code><span
            class="Apple-converted-space">або</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Websocket</span></code>,
          що будо в супереч з тим, як промовляється це слово в специфікації та
          деяких інших місцях Akka HTTP.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Методи
          та класи, що використовували слово WebSocket, тепер узгоджено
          використовують його як&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">WebSocket</span></code>,
          так що оновлення є простим як знайти-та-замінити малу&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">s</span></code><span
            class="Apple-converted-space"> </span>на велику<span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">S</span></code><span
            class="Apple-converted-space">, кожного разу, коли трапляється</span>.</p>
      </div>
      <div class="section" id="java-dsl-for-http-binding-and-connections-changed">
        <h3 id="Java_DSL_for_Http_binding_and_connections_changed" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Java
          DSL для прив'язок та з'єднань Http змінено</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Щоб
          мінімізувати число потрібний перевантажень для кожного метода,
          визначеного на&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Http</span></code><span
            class="Apple-converted-space"> розширенні, був введений новий </span>міні-DSL
          для з'єднання до вузлів на основі імена вузла, порта та
          опціонального&nbsp;<span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ConnectionContext</span></code>.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Доступність
          контексту з'єднання (якщо він встановлений до<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">HttpsConnectionContext</span></code>)
          робить сервер прив'язаним як HTTPS сервер, та для вихідних з'єднань ці
          налаштування використовуються замість налаштувань по замовчанню, якщо
          надані.</p>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Було:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">http</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cachedHostConnectionPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toHost</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"akka.io"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">materializer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">());</span></span></li><li class="L1"
style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">http</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">cachedHostConnectionPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"akka.io"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">80</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">,</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">httpsConnectionContext</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">materializer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">());</span></span><span class="pln"
style="color: rgb(89, 80, 80);"> </span><span class="c1" style="color: rgb(119, 119, 102);"><span
class="com" style="color: rgb(147, 161, 161);">// does not work anymore</span></span></li></ol></pre>
          </div>
        </div>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Замінене
          на:</p>
        <div class="highlight-scala">
          <div class="highlight" style="background: rgb(240, 240, 240);">
            <pre class="prettyprint lang-scala linenums" style="padding: 9px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; border: 1px solid rgba(0, 0, 0, 0.2); word-break: break-all; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px; background: rgb(239, 242, 245);"><ol
class="linenums" style="padding: 0px; margin: 0px 0px 0px 40px; list-style: decimal;"><li
class="L0" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">http</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">.</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">cachedHostConnectionPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toHostHttps</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"akka.io"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8081</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">),</span></span><span class="pln" style="color: rgb(89, 80, 80);"> </span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">materializer</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">());</span></span></li><li
class="L1" style="line-height: 20px; color: rgba(0, 0, 0, 0.34902);"><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">http</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">.</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">cachedHostConnectionPool</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">toHostHttps</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="s" style="color: rgb(0, 128, 0);"><span class="str" style="color: rgb(131, 185, 37);">"akka.io"</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">,</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="mi" style="color: rgb(0, 128, 0);"><span
class="lit" style="color: rgb(25, 95, 145);">8081</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">).</span></span><span class="n"><span
class="pln" style="color: rgb(89, 80, 80);">withCustomHttpsContext</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">(</span></span><span
class="n"><span class="pln" style="color: rgb(89, 80, 80);">httpsContext</span></span><span
class="o" style="color: rgb(0, 0, 0);"><span class="pun" style="color: rgb(89, 80, 80);">),</span></span><span
class="pln" style="color: rgb(89, 80, 80);"> </span><span class="n"><span class="pln"
style="color: rgb(89, 80, 80);">materializer</span></span><span class="o" style="color: rgb(0, 0, 0);"><span
class="pun" style="color: rgb(89, 80, 80);">());</span></span></li></ol></pre>
          </div>
        </div>
      </div>
      <div class="section" id="ssltls-has-been-renamed-to-tls-and-moved">
        <h3 id="SslTls_has_been_renamed_to_TLS_and_moved" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">SslTls
          був переіменований на TLS та переміщений</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">DSL
          для доступу до TLS (або SSL)<span class="Apple-converted-space">&nbsp;</span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">BidiFlow</span></code><span
            class="Apple-converted-space"> тепер розділений між пакунками&nbsp;
          </span><span class="Apple-converted-space"></span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">javadsl</span></code><span
            class="Apple-converted-space"> та</span><span class="Apple-converted-space">
          </span><code class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">scaladsl</span></code><span
            class="Apple-converted-space">, та був переіменований на&nbsp;</span><span
            class="Apple-converted-space"></span><code class="xref py py-class docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">TLS</span></code>.
          Загальні опціональні типи (режими закриття, режими аутентифікації,
          тощо) були переміщені на верхній рівень пакунка&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">stream</span></code>,
          та загальні типи повідомлень доступні в класі&nbsp;<span class="Apple-converted-space"></span><code
            class="xref py py-class docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.TLSProtocol</span></code></p>
      </div>
      <div class="section" id="framing-moved-to-akka-stream-javadsl-scaladsl">
        <h3 id="Framing_moved_to_akka_stream_[javadsl_scaladsl]" style="margin: 0px; font-weight: bold; color: rgb(11, 85, 103); text-rendering: optimizeLegibility; line-height: 27px; font-size: 18px; padding-top: 10px;">Фрейми
          переміщені до akka.stream.[javadsl/scaladsl]</h3>
        <p style="margin: 0px 0px 9px; font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 18px; padding-top: 4px;">Об'єкт<span
            class="Apple-converted-space"> </span><code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">Framing</span></code><span
            class="Apple-converted-space">, що може використовуватись для
            нарізання потоків&nbsp;</span><span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">ByteString</span></code><span
            class="Apple-converted-space"> в шматки, залежні від фреймів</span>
          (такі, як рядки) був переміщений до&nbsp;<span class="Apple-converted-space"></span><code
            class="docutils literal" style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.scaladsl.Framing</span></code>,
          та отримав еквівалент Java DSL в вигляді <code class="docutils literal"
            style="padding: 1px 4px; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);"><span
              class="pre" style="color: rgb(11, 85, 103);">akka.stream.javadsl.Framing</span></code>.</p>
      </div>
    </div>
    <br>
  </body>
</html>
