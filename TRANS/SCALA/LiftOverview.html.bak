<!DOCTYPE html>
<html>
  <head>
    <meta  content="text/html; charset=UTF-8"  http-equiv="content-type">
    <title>Lift огляд Перекладено українською Арсеній Чеботарьов Ніжин 2016</title>
  </head>
  <body>
    <div  class="row-fluid"  style="width: 969px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 18px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(248, 248, 248);">
      <div  class="span12"  style="float: left; margin-left: 0px; width: 969px; display: block; min-height: 28px; box-sizing: border-box;">
        <div  class="row-fluid"  style="width: 969px;">
          <div  class="span9"  style="float: left; margin-left: 0px; width: 639.125px; display: block; min-height: 28px; box-sizing: border-box;">
            <div  class="page-header"  style="padding-bottom: 17px; margin: 18px 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">
              <h1  style="margin: 0px; font-family: inherit; font-weight: normal; color: rgb(0, 0, 0); text-rendering: optimizeLegibility; font-size: 30px; line-height: 1; text-shadow: rgb(238, 238, 238) 1px 1px 1px;">Lift:
                Огляд</h1>
            </div>
            <div  class="post-text">
              <p  style="margin: 0px 0px 9px;">Lift is складається з дискретних
                елементів. Ліфт підтримує подібне до JNDI, JTA, JPA, etc. Факт,
                що ви не змушені використовувати ці елементи J/EE є сильним
                покажчиком до модульного дизайну Lift.</p>
              <ul  style="padding: 0px; margin: 0px 0px 9px 25px; list-style: disc;">
                <li  style="line-height: 18px;">Філософія переглядів Lift view є
                  "нехай вірішує розробник". Lift пропонує механізм шаблонів, що
                  не дозволяє жодного коду логіки в перегляді, механізм
                  переглядів базується на виконанні коду Scala та XML літералів
                  Scala, та механізм переглядв базується на Scalate (<span  class="Apple-converted-space"></span><a
                     href="http://scalate.fusesource.org/"  style="color: rgb(0, 136, 204); text-decoration: none;">http://scalate.fusesource.org/</a><span
                     class="Apple-converted-space">&nbsp;</span>). Якщо ви
                  обираєте механізм шаблонів XML, ви потім обираєте, наскільки,
                  якщо взагалі, розмітка належить до вашої бізнес логіки. Ви не
                  можете виразити жодної бізнес логіки за допомогою шаблонів
                  Lift XML.</li>
                <li  style="line-height: 18px;">Філософія Lift Object &lt;-&gt;
                  Persistence є "нехай вирішує розробник". Lift має Mapper, що є
                  об'єктом меппера в стилі ActiveRecord. Він виконує всю роботу
                  в невеликих проектах. Lift підтримує JPA. Lift має абстракцію
                  Record, що підтримує перенесення об'єктів в та з реляційних
                  баз даних, в та з&nbsp; NoSQL сховищ (Lift включає природну
                  підтримку CouchDB та MongoDB, але рівень адаптерів містить
                  пару сотен рядків коду, так що якщо ви бажаєте Cassandra або
                  щось інше, не буде надмірною роботою зробити це). В основному,
                  Lift Web Framework не має залежності від того, як об'єкти
                  матеріалізовані в сесії. Більше того, цикли сесії та запиту
                  відкрити, так що включення перехоплень транзакцій в циклі
                  запиту/відповіді є простим.</li>
                <li  style="line-height: 18px;">Філософія Lift є "серверна
                  команда має знати одну мову, не багато мов". Це означає, що
                  конфігурація робиться через Scala. Це означає, що ми не маємо
                  реалізувати 40% конструкцій мови&nbsp; Java в синтаксисі XML,
                  щоб створити гнучкі опції конфігуації. Це означає, що
                  компілятор перевіряє&nbsp; синтаксис та типи даних
                  конфігуації, так що ви не отримаєте жодних збочених XML
                  парсингів або невірних даних під час виконання. Це означає, що
                  вам не треба мати IDE, що розуміє докладні відомості анотацій,
                  що ви використовуєте, базуючись на бібліотеці.</li>
              </ul>
              <p  style="margin: 0px 0px 9px;">Я написав це:<span  class="Apple-converted-space">&nbsp;</span><a
                   href="http://blog.lostlake.org/index.php?/archives/16-Web-Framework-Manifesto.html"
                   style="color: rgb(0, 136, 204); text-decoration: none;">http://blog.lostlake.org/index.php?/archives/16-Web-Framework-Manifesto.html<span
                     class="Apple-converted-space"> </span></a>перед тим, як я
                став писати Lift. До значної міри, та до значнішої міри, ніж це
                вірно для жодного іншого веб фреймворку, що я знаю, Lift
                задовільняє цім цілям.</p>
              <p  style="margin: 0px 0px 9px;">Lift в своїй основі шукає
                абстрагування від циклу запиту-відповіді HTTP, скоріше, ніж
                покладаючи об'єктну огортку коло HTTP Request. На практичному
                рівні, це означає, що майже всі дії, що може виконати користувач
                (заповнювати форми, виконувати Ajax, etc.) репрезентовано через
                GUID в переглядачеві, та функцією на сервері. Коли GUID
                представлений як частина запиту HTTP, функція&nbsp;
                застосовується&nbsp;(викликається) з наданими параметрами.
                Оскільки GUID складно передбачити, та вони сессія-специфічні,
                атаки повтору та багато атак підробки параметрів стають значно
                більше складними з Lift, ніж з іншими веб фреймворками,
                включаючи Spring. Це також означає, що розробники є більш
                продуктивними, оскільки вони фокусуються на діях користувача, та
                бізнес логіки, асоційованої з діями користувача, скоріше, ніж на
                сантехніку пакування та розпакування HTTP запитів. Наприклад,
                код для прийняття та відохилення дружнього запиту Foursquare:</p>
              <pre  class="prettyprint linenums lang-scala"  style="padding: 2px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12.025px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(136, 136, 136); background-color: rgb(245, 245, 245);"><ol
 class="linenums"  style="padding: 0px; margin: 0px 0px 0px 25px; list-style: decimal;"><li
 class="L0"  style="line-height: 18px; list-style-type: none;"><span  class="pln"
 style="color: rgb(0, 0, 0);"> ajaxButton</span><span  class="pun"  style="color: rgb(102, 102, 0);">(</span><span
 class="str"  style="color: rgb(0, 136, 0);">"Accept"</span><span  class="pun"  style="color: rgb(102, 102, 0);">,</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">()</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">=></span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">{</span><span
 class="pln"  style="color: rgb(0, 0, 0);">request</span><span  class="pun"  style="color: rgb(102, 102, 0);">.</span><span
 class="pln"  style="color: rgb(0, 0, 0);">accept</span><span  class="pun"  style="color: rgb(102, 102, 0);">.</span><span
 class="pln"  style="color: rgb(0, 0, 0);">save</span><span  class="pun"  style="color: rgb(102, 102, 0);">;</span></li><li
 class="L1"  style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="typ"  style="color: rgb(102, 0, 102);">SetHtml</span><span
 class="pun"  style="color: rgb(102, 102, 0);">(</span><span  class="str"  style="color: rgb(0, 136, 0);">"acceptrejectspan"</span><span
 class="pun"  style="color: rgb(102, 102, 0);">,</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);"><</span><span  class="pln"  style="color: rgb(0, 0, 0);">span</span><span
 class="pun"  style="color: rgb(102, 102, 0);">/>})</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">++</span></li><li  class="L2"  style="line-height: 18px; list-style-type: none;"><span
 class="pln"  style="color: rgb(0, 0, 0);"> ajaxButton</span><span  class="pun"
 style="color: rgb(102, 102, 0);">(</span><span  class="str"  style="color: rgb(0, 136, 0);">"Reject"</span><span
 class="pun"  style="color: rgb(102, 102, 0);">,</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">()</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">=></span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">{</span><span  class="pln"  style="color: rgb(0, 0, 0);">request</span><span
 class="pun"  style="color: rgb(102, 102, 0);">.</span><span  class="pln"  style="color: rgb(0, 0, 0);">reject</span><span
 class="pun"  style="color: rgb(102, 102, 0);">.</span><span  class="pln"  style="color: rgb(0, 0, 0);">save</span><span
 class="pun"  style="color: rgb(102, 102, 0);">;</span></li><li  class="L3"  style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="typ"  style="color: rgb(102, 0, 102);">SetHtml</span><span
 class="pun"  style="color: rgb(102, 102, 0);">(</span><span  class="str"  style="color: rgb(0, 136, 0);">"acceptrejectspan"</span><span
 class="pun"  style="color: rgb(102, 102, 0);">,</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);"><</span><span  class="pln"  style="color: rgb(0, 0, 0);">span</span><span
 class="pun"  style="color: rgb(102, 102, 0);">/>})</span></li><li  class="L4"  style="line-height: 18px;"><span
 class="pln"  style="color: rgb(0, 0, 0);">								</span></li></ol></pre>
              <p  style="margin: 0px 0px 9px;">Це так просто. Оскільки&nbsp;
                friendRequest в області зору, коли визначається функція, функція
                замикається на цій області... немає потреби викривати первинний
                ключ дружнього запиту, або робити щось інше... просто визначте
                текст кнопки (це може бути локалізовано, або це може бути
                підтягнуте з XHTML шаблону, або це може бути підтягнуте з
                локалізованого шаблону), та функція виконується, коли
                натискається кнопка. Lift турбується про присвоєння GUID,
                встановлення виклику Ajax (через jQuery або YUI, і, так, ви
                можете додати вашу улюблену бібліотеку JavaScript), роблячи
                автоматичні повтори з відкатами, та уникаючи голодування
                з'єднання через опит запитів Ajax, etc.</p>
              <p  style="margin: 0px 0px 9px;">Фіософія GUID, асоційованого з
                функцією, має подвійну вигоду, значно кращої безпечності, та
                значно кращох продуктивності розробника. Асоціація GUID -&gt;
                Function була перевірена як дуже стійка... та ж сама конструкція
                робить зі звичайними формами, ajax, comet, багато-сторінковими
                візардами, etc.</p>
              <p  style="margin: 0px 0px 9px;">Наступна головна частина Lift є
                утримання високого рівня абстракції, так довго, як можливо. На
                стороні генерації сторінки це означає побудування сторінки як
                елементів XHTML, та утримування сторінки&nbsp; XHTML до межі
                прямо перед&nbsp; употоченням відповіді. Перевагою є стійкість
                до кросс-сайтових помилок скриптингу, можливість переносу тегів
                CSS до заголовку та скриптів донизу сторінки, після того, як
                сторінка була скомпонована, та можливість переписувати сторінку,
                базуючись на цільовому переглядачеві. На стороні вводу, URL
                можуть бути переписані для виділення параметрів (обоє,
                параметрів запиту та шляху) в типо-безпечний спосіб, високий
                рівень, перевірені на безпечність дані доступні дуже рано в
                циклі запиту. Наприклад, ось як визначити обслуговування REST
                запиту:</p>
              <pre  class="prettyprint linenums lang-scala"  style="padding: 2px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12.025px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 18px; line-height: 18px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(136, 136, 136); background-color: rgb(245, 245, 245);"><ol
 class="linenums"  style="padding: 0px; margin: 0px 0px 0px 25px; list-style: decimal;"><li
 class="L0"  style="line-height: 18px; list-style-type: none;"><span  class="pln"
 style="color: rgb(0, 0, 0);"> serve </span><span  class="pun"  style="color: rgb(102, 102, 0);">{</span></li><li
 class="L1"  style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);">   </span><span  class="kwd"  style="color: rgb(0, 0, 136);">case</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="str"  style="color: rgb(0, 136, 0);">"api"</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">::</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="str"  style="color: rgb(0, 136, 0);">"user"</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">::</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="typ"  style="color: rgb(102, 0, 102);">AsUser</span><span
 class="pun"  style="color: rgb(102, 102, 0);">(</span><span  class="pln"  style="color: rgb(0, 0, 0);">user</span><span
 class="pun"  style="color: rgb(102, 102, 0);">)</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">::</span><span  class="pln"  style="color: rgb(0, 0, 0);"> _ </span><span
 class="typ"  style="color: rgb(102, 0, 102);">XmlGet</span><span  class="pln"  style="color: rgb(0, 0, 0);"> _ </span><span
 class="pun"  style="color: rgb(102, 102, 0);">=></span></li><li  class="L2"  style="line-height: 18px; list-style-type: none;"><span
 class="pln"  style="color: rgb(0, 0, 0);">   </span><span  class="pun"  style="color: rgb(102, 102, 0);"><</span><span
 class="pln"  style="color: rgb(0, 0, 0);">b</span><span  class="pun"  style="color: rgb(102, 102, 0);">>{</span><span
 class="pln"  style="color: rgb(0, 0, 0);">user</span><span  class="pun"  style="color: rgb(102, 102, 0);">.</span><span
 class="pln"  style="color: rgb(0, 0, 0);">name</span><span  class="pun"  style="color: rgb(102, 102, 0);">}<!--</span--><span
 class="pln"  style="color: rgb(0, 0, 0);">b</span><span  class="pun"  style="color: rgb(102, 102, 0);">></span></span></li><li
 class="L3"  style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span></li><li  class="L4"  style="line-height: 18px;"><span
 class="pln"  style="color: rgb(0, 0, 0);">   </span><span  class="kwd"  style="color: rgb(0, 0, 136);">case</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="str"  style="color: rgb(0, 136, 0);">"api"</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">::</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="str"  style="color: rgb(0, 136, 0);">"user"</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="pun"  style="color: rgb(102, 102, 0);">::</span><span
 class="pln"  style="color: rgb(0, 0, 0);"> </span><span  class="typ"  style="color: rgb(102, 0, 102);">AsUser</span><span
 class="pun"  style="color: rgb(102, 102, 0);">(</span><span  class="pln"  style="color: rgb(0, 0, 0);">user</span><span
 class="pun"  style="color: rgb(102, 102, 0);">)</span><span  class="pln"  style="color: rgb(0, 0, 0);"> </span><span
 class="pun"  style="color: rgb(102, 102, 0);">::</span><span  class="pln"  style="color: rgb(0, 0, 0);"> _ </span><span
 class="typ"  style="color: rgb(102, 0, 102);">JsonGet</span><span  class="pln"
 style="color: rgb(0, 0, 0);"> _ </span><span  class="pun"  style="color: rgb(102, 102, 0);">=></span></li><li
 class="L5"  style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);">   </span><span  class="typ"  style="color: rgb(102, 0, 102);">JStr</span><span
 class="pun"  style="color: rgb(102, 102, 0);">(</span><span  class="pln"  style="color: rgb(0, 0, 0);">user</span><span
 class="pun"  style="color: rgb(102, 102, 0);">.</span><span  class="pln"  style="color: rgb(0, 0, 0);">name</span><span
 class="pun"  style="color: rgb(102, 102, 0);">)</span></li><li  class="L6"  style="line-height: 18px; list-style-type: none;"><span
 class="pln"  style="color: rgb(0, 0, 0);">  </span><span  class="pun"  style="color: rgb(102, 102, 0);">}</span><span
 class="pln"  style="color: rgb(0, 0, 0);">									</span></li><li  class="L7"
 style="line-height: 18px; list-style-type: none; background: rgb(238, 238, 238);"><span
 class="pln"  style="color: rgb(0, 0, 0);">								</span></li></ol></pre>
              <p  style="margin: 0px 0px 9px;">Використовуючи вбудоване
                співпадіння шаблонів Scala, ми перевіряємо надійшовший запит,
                виділяємо третю частину шляху,та отримуємо User, що відповідає
                значенню, та навіть застосовуємо перевірку контролю доступу (чи
                поточна сесія або запит мають доступ до даного запису User).
                Таким чином, на час, коли примірник User досягає логіки
                застосування, він перевірений.</p>
              <p  style="margin: 0px 0px 9px;">З ціма двома головними частинами,
                Lift має величезну перевагу в термінах безпеки. Щоб надати вам
                ідею розмаху безпеки Lift, що не вписується в перелік
                можливостей, Rasmus Lerdorf (<a  href="http://en.wikipedia.org/wiki/Rasmus_Lerdorf"
                   style="color: rgb(0, 136, 204); text-decoration: none;">http://en.wikipedia.org/wiki/Rasmus_Lerdorf</a><span
                   class="Apple-converted-space">&nbsp;</span>), який робив
                безпеу для Yahoo! сказав наступне про FourSquare (один з
                демо-сайтів Lift):</p>
              <blockquote  class="pull-right"  style="padding: 0px 15px 0px 0px; margin: 0px 0px 18px; border-left-width: 0px; float: right; border-right-width: 5px; border-right-style: solid; border-right-color: rgb(238, 238, 238);">
                <p  style="margin: 0px; font-size: 16px; font-weight: 300; line-height: 22.5px; text-align: right;">Чотири
                  зірки @foursquare - периший сайт до тепер, який я добре
                  дослідив, що не мав жодного питання до безпеки (що я зміг би
                  знайти)</p>
                <small  style="font-size: 13px; display: block; line-height: 18px; color: rgb(153, 153, 153); text-align: right;"><a
                     href="http://twitter.com/rasmus/status/5929904263"  style="color: rgb(0, 136, 204); text-decoration: none;">Rasmus
                    Lerdorf @ twitter</a></small></blockquote>
              <p  style="margin: 0px 0px 9px;"><a  href="http://twitter.com/rasmus/status/5929904263"
                   style="color: rgb(0, 136, 204); text-decoration: none;">http://twitter.com/rasmus/status/5929904263</a></p>
              <p  style="margin: 0px 0px 9px;">На цей час, Foursquare має одного
                інженера, що робить над кодом (ні, той @harryh на є
                супер-генієм), та головний фокус був переписати PHP версію
                Foursquare, при цьому маючи жотижневе подвоєння трафіку.</p>
              <p  style="margin: 0px 0px 9px;">Остання частина фокусу безпеки
                Lift є SiteMap. Це уніффікований контроль доступу, навігації по
                сайту, та системи меню. Розробник визначає правила контролю
                доступу для кожної сторінки з використанням коду Scala (тобто,<span
                   class="Apple-converted-space"> </span><code  style="padding: 2px 4px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);">If(User.loggedIn
                  _)</code>або<span  class="Apple-converted-space"> </span><code
                   style="padding: 2px 4px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; border: 1px solid rgb(225, 225, 232); background-color: rgb(247, 247, 249);">If(User.superUser
                  _)</code><span  class="Apple-converted-space">&nbsp;</span>),
                та ці правила&nbsp;контролю доступу застосовуються перед
                початком любого відтворення сторінки. Це здебільшого як Spring
                Security, за винятком того, що це вбудоване з самого початку
                проекту, та правила контролю доступу уніфіковані з рештою
                застосування, так що вам не треба обробляти правила безпеки в
                XML, коли змінюється URL, або змінюються методи, що обчислюють
                права доступу .</p>
              <p  style="margin: 0px 0px 9px;">Для підсумку, філософія розробки
                Lift дає вам переваги вбудованого контроля доступу, стійкість до
                OWASP 10 вищих уразливостей безпеки, значно кращу підтримку
                Ajax, та значно вища продуктивність розробника.</p>
              <p  style="margin: 0px 0px 9px;">Але Lift також дає вам найкращу
                підтримку Comet, ніж любий інший фреймворк. Ось чому Novell
                обрав&nbsp; Lift для підсилення свого продкуту Pulse (<span  class="Apple-converted-space">&nbsp;</span><a
                   href="http://www.novell.com/products/pulse/"  style="color: rgb(0, 136, 204); text-decoration: none;">http://www.novell.com/products/pulse/</a><span
                   class="Apple-converted-space">&nbsp;</span>), та ось що
                Novell каже про Lift:</p>
              <blockquote  style="padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(238, 238, 238);">
                <p  style="margin: 0px; font-size: 16px; font-weight: 300; line-height: 22.5px;">Lift
є
                  різновидом веб фрейворку, що дозволяє вам, як розробнику,
                  сконцентруватись на великій картинці. Потужна, виразна
                  типізація та високорівневі можливості, як вбудована підтримка
                  Comet, дозволяє вам сфокусуватись на інноваціях, замість
                  сантехніки. Будуючі потужні застосування реального часу, як
                  Novell Pulse, потребує фреймворк з потужністю Lift під
                  покривадлом.</p>
              </blockquote>
              <p  style="margin: 0px 0px 9px;">Так що Lift не просто ще один
                я-теж MVC фреймворк. Це фреймворк, що отримав деякі базові
                принципи дизайну за собою, що зтверділи дуже добре. Це
                фреймворк, що надає подвійні переваги, для безпеки та
                продуктивності розробника. Lift є фреймворком, що побудований з
                прошарків, та дає розробнику вірний вибір, базуючись на його
                потребах... вибір по генерації переглядів, вибір для стійкості
                даних, тощо.</p>
              <p  style="margin: 0px 0px 9px;">Scala та Lift дають розробникам
                значно кращий досвід, ніж суміш з XML, анотацій, та інших ідіом,
                що утворюють Spring.</p>
              <p  style="margin: 0px 0px 9px;"><br>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
