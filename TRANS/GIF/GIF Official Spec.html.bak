<!DOCTYPE html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type">
    <title>GIF Official Spec</title>
  </head>
  <body> <sub>Переклад українською - <a href="mailto:ac2epsilon@gmail.com">Арсеній
        Чеботарьов</a> - Ніжин 2017</sub><br>
    <pre style="color: rgb(0, 0, 0); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; word-wrap: break-word; white-space: pre-wrap;">    Заголовна сторінка GIF89a Specification


    ВІДКЛАДЕНІ КОДИ ОЧИЩЕННЯ В LZW КОМПРЕСІЇ

    Було непорозуміння щодо того, де коди очидення можуть бути знайдені в потоці даних. Як каже специфікація, вони можуть з'явитись будь-коли. Немає вимоги надсилати коди очищення тільки коли таблиця рядків повна. Це рішення кодувальника, коли таблиця має бути очищеною. Коли таблиця заповнена, кодувальник може обрати використовувати таблицю як є, не роблячи в ній змін до того, коли кодувальник вирішить очистити її. На протязі цього часу кодувальник надсилає коди, що за межами максимального розміру коду. Як ми побачимо нижче, коли таблиця декодера повна, вона має залишатись незмінною до отримання коду очищення. Розмір коду є максимальним розміром коду. Обробка, крім цього, виконується звичайно. <br>
    Завдяки великій кількості декодерів, що не вміють обробляти декомпресію в цьому стилі, ми вмовили розробників програмного забезпечення кодувальниуів GIF НЕ реалізувати цю можливість щонайменш до 1991 року та пізніше, якщо їх власний ринок ще не готовий до цього. Це дасть розробникам GIF декодерів час для реалізації цієї можливості, та передасть її в руки їх клієнтів, перед тим, як декодери почнуть "ламатись" на нових     GIF. Не вимагається, щоб кодувальники змінювали своє програмне забезпечення, щоб отримати переваги від відкладеного кода очищення, але для декодерів це так.

    БЛОК РОЗШИРЕННЯ ЗАСТОСУВАННЯ - ІДЕНТИФІКАТОР ЗАСТОСУВАННЯ

    Буде файл Директорії Ввічливості на CompuServe на форумі PICS. Ця директорія буде містити Ідентифікатори Застосувань для блоків розширення застосування, що будуть використовуватись розробниками GIF застосувань. Цей файл призначений для допомоги розробникам, що бажають створити блоки розширення застосування від одночасного використання ідентифікаторів. Це не офіційна директорія; вона призначена тільки для добровільної участі, та не гарантує, що дехто не використає той самий ідентифікатор. Треба надіслати лист до Larry Wood (менеджер форума PICS), що вказує на запит на включення власного ідентифікатора до цього файла.


              GRAPHICS INTERCHANGE FORMAT(sm) Версія 89a (c)1987,1988,1989,1990
              Copyright CompuServe Incorporated Columbus, Ohio

CompuServe Incorporated                              Graphics Interchange Format
Дата документу : 31 July 1990                         Посилання по програмуванню

                                      Зміст

Дисклаймер  .................................................................  1

Передмова ...................................................................  1

Ліцензія   ..................................................................  1

Про документ        .........................................................  2

Загальний опис       ........................................................  2

Номери версій    ............................................................  2

Кодувальник  ................................................................  3

Декодувальник................................................................  3

Відповідність................................................................  3

Щодо рекомендацій      ......................................................  4

Щодо таблиці кольорів........................................................  4

Блоки, розширення та поле зору...............................................  4

Розмір блоків................................................................  5

Використання GIF як вбудованого протокола....................................  5

Суб-блоки даних  ............................................................  5

Термінатор блоку  ...........................................................  6

Заголовок ...................................................................  7

Дескриптор логічного екрана..................................................  8

Глобальна таблиця кольорів................................................... 10

Дескриптор зображення........................................................ 11

Лакальна таблиця кольорів.................................................... 13

Дані зображення на базі таблиці.............................................. 14

Розширення контроля графіки.................................................. 15

Розширення коментаря......................................................... 17

Розширення простого тексту .................................................. 18

Розширення застосування...................................................... 21

Трейлер  .................................................................... 23

Таблиця швидких посилань..................................................... 24

Граматика GIF................................................................ 25

Глосарій  ................................................................... 27

Домовленості ................................................................ 28

Переміжені зображення........................................................ 29

Компрессія зі змінною довжиною коду LZW...................................... 30

Можиливості в один рядок       .............................................. 33

1. Дисклаймер

Все, що тут подане, може бути змінено без повідомлення. В жодному разі CompuServe Incorporated не відповідатиме за втрату, включаючи любу втрату прибутку, або інші ненамисні або наведені збитки, що зазнані від використання або незрозуміння цієї інформації; CompuServe Incorporated не має передбачень щодо вірного застосування цієї інформації.

2. Передмова

Цей документ визначає Graphics Interchange Format. Надана тут специфікація визначає версію 89a, що є поширенням версії 87a. Версія Graphics Interchange Format(sm), що визначається тут, має розглядатись як повна; любе відхилення від його має визначатись як непотріб, включаючи, але не обмежуючись, використанням зарезервованих або невизначених полів в контрольних блоках або блоках даних, використання методів або алгоритмів, що не вказані як частина формату, тощо. Загалом, любі або всі відхилення, розширення або модифікації, не вказані в цьому документі повинні розглядатись як порушення формату, та їх слід уникати.


3. Ліцензування

The Graphics Interchange Format(c) є copyright власністю CompuServe Incorporated. Тільки CompuServe Incorporated авторизований до визначення, перевизначення, розширення, зміни, модифікації або переміни в любий спосіб визначення формата. CompuServe Incorporated цим надає обмежену, не-ексклюзивну, роялти-фрі ліцензію на використання Graphics Interchange Format(sm) в комп'ютерному програмноу забезпеченні; комп'ютерне програмне забезпечення, що задіє GIF(sm) має визнавати власність Graphics Interchange Format, та його Service Mark за CompuServe Incorporated у власній технічній та користувацькій документації. Комп'ютерне програмне забезпечення, що використовує GIF, та розповсюджується, або може розповсюджуватись без користувацької або технічної документації, повинне відображувати не екрані або принтері повідомлення щодо власності Graphics Interchange Format та Service Mark за CompuServe Incorporated; в цьому випадку відповідне повідомлення може відображуватись на відкриваючому вікні або початковому банері, або на заключному вікні або банері. Може використовуватись повідомлення наступного змісту: "The Graphics Interchange Format(c) is the Copyright property of CompuServe Incorporated. GIF(sm) is a Service Mark property of CompuServe Incorporated."

Щодо подальшої інформації, будь ласка, звертайтесь сюди: 

      CompuServe Incorporated
      Graphics Technology Department
      5000 Arlington Center Boulevard
      Columbus, Ohio  43220
      U. S. A.

CompuServe Incorporated підтримує поштовий список з усіма особами та організаціями, хто бажає отримувати копії цього документа, коли він виправляється або переробляється. Цей сервіс надається безкоштовно; для цього запровадьте нам свою поштову адресу.


4. Про цей документ

Цей документ описує в деталях визначення Graphics Interchange Format. Цей документ призначений як посилання для програмування; рекомендуєтсья уважно прочитати цілий документ, перед тим як почати програмування, оскільки різні частини взаємно пов'язані. Існують окремі частини для кожного з блоків формату. В кожному розділі існує суб-секція повтірбної версії, що посилається на номер версії кодувальника, яку треба використовувати, якщо даний блок присутній в потоці даних. В кожному розділі діаграма описує окремі поля блока; діаграма малюється вертикально; верхні байти в діаграмі з'являються перші в потоці даних. Біти в байті зображуються зліва від самого значущого біта.  Багато-байтові числові поля впорядковані в форматі найменш-значущий-перший. Числові константи представлені як шістнадцятирічні, та починаються з "0x". Бітові поля в байті описані в порядку від найбільш значущих бітів.


5. Загальний опис

Graphics Interchange Format(sm) визначає протокол, призначений для онлайн передачі та обміну растровими даними зображення в спосіб, що є незалежним від обладнання, що використовуєтсья для створення та відображення.

Graphics Interchange Format визначений в термінах блоків та суб-блоків, що містять відповідні параметри та дані, що використовуються для відтворення графіки. Потік даних GIF є послідовністю блоків та суб-блоків протоколу, що представляють набір графчних зображень. Загалом, зображення в потоці певною мірою вважаються пов'язаними, та поділяють деяку контрольну інформацію; рекомендовано, щоб кодувальники намагались групувати разом пов'язані зображення, щоб мінімізувати зміни обладнання в процесі обробки та мінімізувати навантаження на контрольну інформацію. З тієї ж причини, непов'язана графіка, або така, що потребує скидання параметрів обладнання, повинна бути закодована окремо, в межах можливості. 

Потік даних може мати локальне походження, як коли коли читається з файла, або може походити віддалено, як коли передається через лінії комунікації. Формат визначений в припущенні, що для комунікації використовується транспортний протокол з виправленням помилок; формат не має способів для пошуку та корекції помилок.

Потік даних GIF має бути інтерпретований в контексті, тобто, програма-застосування має покладатись на інформацію, зовнішню до потоку даних, щоб викликати процес декодувальника.


6. Номери версій

Номери версії в заголовку потоку даних призначений для ідентифікації мінімального набору можливостей, потрібних для декодера, щоб повністю обробити потік даних. Кодувальник повинен використовувати найраніший можливий номер версії, що включає всі блоки, використані в потоці даних. В кожному розділі блока цього документа є відмітка, що позначає номер версії, що означає найраніший номе версії, що включає відповідний блок. Кодувальник повинен зробити спробу використовувати найраніший номер версії, що покриває всі блоки в потоці даних; непотрібне використання пізнішого номера версії буде перешкоджати обробці деякими декодерами.


7. Кодувальник (енкодер)

Кодувальник є програмою, що використовуєтья для створення потоку даних GIF. З растрових даних та іншої інформації енкодер продукує потрібні блоки контролю та даних, що треба для відтворення оригінальної графіки.

Кодувальник відповідає за наступні аспекти.

- Включає в потік даних всю потрібну інформацїю для відтворення графіки.

- Переконується, що потік даних помічений найранішим номером версії, що покриває всі блоки в ньому; це дасть гарантію, що цей потік даних зможе обробити найбільша кількість декодерів.

- Виконує кодуваняя графіки таким чином, щоб оптимізувати процес декодування. За змоги надмірна інформація відкидається.

- В рамках можливого уникається групування графіки, що інакше може викликати потребу скидання апаратних параметрів в процесі декодування. <br>
- Встановлювати в нуль (вимикати) кожний з бітів кожного поля, що помічені як зарезервовані. Зауважте, що ті є поля в дескрипторі логічного екрана та дескрипторі зображення зарезервовані в версії 87a, але використовуються в версії 89a.


8. Декодер

Декодер є програмою, що використовується для обробки потоку даних GIF. Він послідовно обробляє потік даних, розбираючи різні блоки та суб-блоки, використовуючи контрольну інформацію для налаштування обладнання та обробки параметрів, та інтерпретує дані для малювання графіки.

Декодер відповідає за наступне.

- Обробляє кожний фрагмент графіки в потоці без затримок, якщо не вказано в контрольній інформації.

- Встановлює параметри обладнання для максимальної відповідності з контрольною інформацією в потоці даних.


9. Відповідність

Енкодер та декодер відповідні до певної версії Graphics Interchange Format, якщо, і тільки коли, вони повністю відповідають та коректно реалізують визначення стандарту, асоційованого з цією версією. Кодувальник та декодер можуть бути відповідними з даним номером версії, та не сумісними з деякою наступною версією.


10. Щодо рекомендацій

Кожний розділ блока цього документа містить мітку щодо рекомендацій; цей розділ перелічує набір рекомендацій, призначених для настанов та організації використання певного блоку. Такі рекомендації спрямовані на більш ефективне функціонування енкодерів та декодерів, так само, як і покращує використання пропускної полоси комунікацій. Рекомендовано, щоб всі слідували цім настановам.


11. Щодо таблиць кольорів

Формат GIF утилізує таблиці кольорів для малювання растров       ої графіки. Таблиця кольорів може мати один з двох полей зору: глобальний або локальний. Глобальна таблиця кольорів використовуєть всіма тими зображеннями в потоці даних, які не мають асоційованих локальний таблиць кольорів. Глобальна таблиця кольорів огортає весь потік. Локальна таблиця завжди асоційована з окремим зображенням, що безпосередньо слідує за нею; дія локальної таблиці кольорів обмежена до одного зображення. Локальна таблиця кольорів переважає глобальну таблицю, тобто, якщо потік даних має глобальну таблицю кольорів, та зображення має локальну таблицю кольорів, декодер має зберігти глобальну таблицю, використовувати локальну для малювання зображення, та потім відновити локальну таблицю. Обоє типи таблиці кольорів є опціональними, що робить можливим, щоб потік даних мав декілька зображень взагалі без таблиці кольорів. З цієї причини рекомендовано, щоб декодер зберігав останню використану глобальну таблицю, доки не надійде нова глобальна таблиця. В такий спосіб потік даних, що не містить ані глобальної, ані локальної таблиці, може виконувати обробку з використанням останньої глобальної таблиці кольорів, що була збережена. Якщо використовується збережена глобальна таблиця від попереднього потоку, тоді вона стає глобальною таблицею для нагального потоку. Це призначено для зменшення навантаження через таблиці кольорів. Зокрема, рекомендовано, щоб енкодер використовував тільки одну глобальну таблицю кольорів, якщо всі зображення в пов'язаних потоках даних можуть бути відтворені за допомогою однієї таблиці. Якщо доступної таблиці кольорів немає, декодер вільний використовувати системну таблицю кольорів або свою власну таблицю. В цьому випадку декодер може використовувати таблицю з такою кількістю кольорів, яке може підтримувати його обладнання; рекомендовано, щоб така таблиця мала чорний та білий як свої перші два елементи, так що монохромні зображення будуть відображуватись адекватно.

Визначення формату GIF дозволяє, щоб потік даних містив лише заголовок, дескриптор логічного екрана, глобальну таблицю та завершуючий GIF трейлер. Такий потік даних може бути використаний для завантаження в декодер глабальну таблицю кольорів, як підготування для наступних потоків даних, що взагалі не мають таблиць кольорів.


12. Блоки, розширення та сфера дії

Блоки можуть бути класифіковані в три групи: контрольні, відображення графіки та спеціального призначення. Контрольні блоки, такі як заголовок, дескриптор логічного екрану, розширення графічного контролю та трейлер, містять інформацію, що використовуєтсья для обробки потоку даних, або інформації, що встановлює параметри обладнання. Блоки відтворення графіки, такі, як дескриптор зображення або розширення простого тексту містять інформацію та дані, що використовуються для відтворення графіки на пристрої дисплея. Блоки спеціального призначення, такі як розширення коментаря та розширення застосування не використовуються ані в контролі процесом потоку даних, та вони не містять інформацію або дані для відтворення графіки на пристрої дисплею. За винятком дескриптора та глобальної таблиці даних, чия дія весь потік даних, дія інших обмежена до наступного блока малювання. Блоки спеціального призначення не обмежують дію жодних контрольних блоків; блоки спеціального призначення взагалі прозорі для процесу декодування. Блоки малювання графіки та розширення використовуються як обмежувачі бачення для контрольних блоків та розширень. Мітки, використані для помічення блоків, підпадають до трьох диапазонів: 0x00-0x7F (0-127) є блоки графічного відтворення, включаючи трейлер (0x3B); 0x80-0xF9 (128-249) є контрольні блоки; 0xFA-0xFF (250-255) є блоками спеціального призначення. Ці диапазони визначені так, щоб декодери могли обробляти поле зору блоку, відповідно ідентифікувавши мітку блока, навіть якщо самий блок не може бути оброблений.


13. Розмір блоків

Поле розміру блока виміряє число байт в блоці, не зважаючи на саме це поле розміру, та не зважаючи на термінатор блоку, якщо такий передбачений. Блоки, окрім блоків даних, призначені бути фіксованого розміру; поле розміру блока провадиться для того, щоб спростити їх перестрибування, бо їх розмір не зміниться в майбутньому. Блоки даних та суб-блоки змінні за довжиною, щоб відповідати кількості даних.


14. Використання GIF як вбудованого протоколу

В якості вбудованого протоколу GIF може бути частиною більшого протоколу застосування, де GIF використовується для малювання графіки. В такому випадку може визначати блок, в якому може міститись потік даних GIF. Пограма-застосування потім буде викликати декодер GIF, коли натрапить на блок з типом GIF. Цей підхід рекомендований переважно до використання розширень застосування, що накладатиме навантаження на всі інші застосування, що не оброблятимуть його. Оскільки потік GIF має бути оброблений в контексті, застосування має покладатись на деякі засоби, що відрізнятимуть потік даних GIF в середині самого потіку.


15. Суб-блоки даних: 87a

Дані суб-блоків є одиницями, що містять дані. Вони не мають мітки, ці блоки обробляються в контексті контрольних блоків, коли блоки даних вказані в форматі. Перший байт суб-блока даних вказує на число байт, що послідують. Суб-блок даних може містити від 0 до 255 байтів даних. Розмір блока не зважає на сам байт розміру, та, таким чином, пустий суб-блок має один байт зі значенням 0x00.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Розмір блоку                 Байт
     +---------------+
  1  |               |
     +-             -+
  2  |               |
     +-             -+
  3  |               |
     +-             -+
     |               |       Значення Даних                Байт
     +-             -+
 up  |               |
     +-   . . . .   -+
 to  |               |
     +-             -+
     |               |
     +-             -+
255  |               |
     +---------------+

Розмір блоку - число байтів в суб-блоці даних; розмір має бути в межах від 0 до 255 байтів, включно. Значення даних - любі байти, кількість яких точно співпадає з полем розміру.

Цей блок завжди виникає як частина більшого блоку. Сам по собі він не має сфери дії.


16. Блок термінатора: 87a

Цей суб-блок даних нульової довжини використовується для завершення послідовності суб-блоків даних. Він містить один байт в позиції розміру блоку, та не містить даних.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Розмір блоку                 Байт
     +---------------+

Цей суб-блок з особливою довжиною, значенням 0x00. Блок не містить жодних даних. Цей блок завершує послідовність суб-блоків. Він не може бути модифікований жодним розширенням.
<br>
17. Заголовок. Не має відношення до версії, бо сам містить номер версії. 

Заголовок ідентифікує потік даних GIF в контексті. Поле сигнатури відмічає початок потоку даних, та версія ідентифікує набір можливостей, що має забезпечувати декодер, щоб повністю обробляти потік даних. Цей блок ОБОВ'ЯЗКОВИЙ; в потоці даних має бути рівно один потік даних.


      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
   0 |               |       Сигнатура                     3 Байт
     +-             -+
   1 |               |
     +-             -+
   2 |               |
     +---------------+
   3 |               |       Версія                        3 Байт
     +-             -+
   4 |               |
     +-             -+
   5 |               |
     +---------------+

Сигнатура ідентифікує потік даних, це поле має бути завжди містити значення 'GIF'. Версія є номером версії, яку використовує потік даних. Вказує на мінімальний набір можливостей, потрібних декодеру, щоб повністю обробити потік даних. Версії даних станом на 1990й рік: "87a" та "89a". Номери версій утворюються збільшенням числового та літерного компонент. <br><br>Цей блок має глобальне значення, та не може бути модифікований жодним розширенням.
<br>Це поле вказує на початок потоку даних GIF; він не призначений для надання унікальної сигнатури для ідентифікації даних. Ремендовано, щоб потік даних GIF був розпізнаватись зовнішньо самим застосуванням. Посилайтесь до Додатку G щодо онлайн ідентифікації потоку даних GIF.

Версія: енкодер має використовувати найранший номе рверсії, що покриває всі блоки в потоці даних. Коли два або більше потоків даних комбінуються, треба використовувати найпізніший номер версії для результуючого потоку. Декодер повинен спробувати обробляти потік даних з найвищим рівнем можливостей; якщо він натрапляє на номер версії, що не може повністю обробити, він, тим не менш, має намагатись обробити потік даних як зможе, можливо попередивши користувача, що дані можуть бути неповні.


18. Дескриптор логічного екрана. Версія не стосується даного блока. 

Дескриптор логічного екрана містить параметри, потрібні для визначення місця, де буде намальоване зображення. Координати в цьому блоці беруться з верхнього правого кута віртуального екрана; вони не обов'язково посилаються на абсолютні координати пристрою дисплея. Це має на увазі, що вони не посилаються на віконні координати оточення віконного інтерфейсу, або координати принтера, коли використовується принтер.

Цей блок ОБОВ'ЯЗКОВИЙ; рівно один дескриптор логічного екрана має бути присутній в потоці даних. Версія не стосується даного блока. Цей блок має слідувати безпосередньо за блоком заголовка.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Ширина логічного екрана      Беззнакове
     +-             -+
  1  |               |
     +---------------+
  2  |               |       Висота логічного екрана      Беззнакове
     +-             -+
  3  |               |
     +---------------+
  4  | |     | |     |       Паковані біти                Див.нижче
     +---------------+
  5  |               |       Індекс фонового кольору      Байт
     +---------------+
  6  |               |       Пропорція пікселя            Байт
     +---------------+


     Паковані біти    =      Флаг глобальної таблиці кольору   1 Біт
                             Розрішення кольору                3 Біт
                             Флаг сортування                   1 Біт
                             Розмір глобальної таблиці         3 Біт

Логічні ширина та висота екрана - розміри в пікселях, де буде відображені зображення на пристрої дисплея.
<br>Флаг глобальної таблиці кольорів - флаг вказує присутність глобальної таблиці; якщо встановлений, глобальна таблиця слідує безпосередньо за дескриптором логічного екрана. Флаг також обирає інтерпретацію індекса фонового кольору; якщо флаг встановлений, значення індексу фона повинне використовуватись як індекс в таблиці для фонового кольору. Це поле найбільш важливий біт байта. Значення: 0 - глобальна таблиця відсутня, індекс фону не має сенсу, 1 - глобальна таблиця слідує за дескриптором логічного екрана, індекс фону має сенс. 

Розрішення кольору - число біт на кожний первинний колір, доступний для оригінального зображення, мінус 1. Це значення представляє розмір цілої палітри, з якої обираються кольори для графіки, не число кольорів, що дійсно використовуються в графіці. Наприклад, якщо значення в цьому полі є 3, тоді палітра оригінального зображення має 4 біти на кожний первинний колір, доступних для створення оригінального зображення. Це значення повинне бути встановлене щоб вказувати на багатство оригінальної палітри, навіть якщо не кожний колір з цілої палітри доступне на машині джерела.
<br>Флаг сортування - вказує, чи глобальна таблиця кольорів відсортована. Якщо флаг встановлений, таблиця відсортована, в порядку зменшення важливості. Типово, порядок буде за зменшенням частоти використання, найбільш часті кольори ідуть першими. Це допомагає декодеру з меншим числом доступних кольорів, щоб обрати кращий набір кольорів; декодер може використовувати початковий сегмент таблиці щоб малювати графіку. Значення: 0 - не впорядковано, 1 - впорядковано за зменшенням значущості, більш важливі перші.

Розмір глобальної таблиці - якщо таблиця присутня, та відповідний флаг встановлений в 1, значення в цьому полі використовуєтсья для обчислення числа байтів, що містяться в глобальній таблиці кольорів. Щоб визначити дійсний розір таблиці кольорів, віднесіть 2 ступеня значення_цього_поля+1. Навіть якщо глобальна таблиця не встановлена, встановіть це поле відповідно до формули вище, так що декодери можуть обрати кращий режим графіки для відображення потоку. Це поле займає три найменш значущі біти байта.

Індекс фонового кольору - індекс в глобальній таблиці кольорів для кольору фона. Колір фона використовується для тих пікселів екрана, що не покриті зображеннями. Якщо флаг глобальної таблиці встановлений в нуль, це поле повинно бути встановлене в ноль, та повинне ігноруватись.

Пропорції викривлення пікселя - коефіцієнт, що використовуєтсья для обчислення апроксимації геометричних пропорцій пікселя в оригінальному зображенні. Якщо значення цього поля не є 0, ця апроксимація пропорцій обчислюється за формулою: пропорція = (значення_цього_поля + 15) / 64. Пропорція визначається як частка довжини пікселя до його висоти. Диапазон значень для цього поля дозволяє задати найширші пікселі 4:1 до найвищих пікселів 1:4 з кроком в 1/64. Значення: 0 - пропорція пікселя не надається, 1..255 - значення, що використовується в обчисленнях. Дія блока стосується всього потока даних.

19. Глобальна таблиця кольорів. Версія 87a

Цей блок містить таблицю кольорів, що є послідовніть байтів, що по при поспіль представляють компоненти червоного-зеленого-синього. Глобальна таблиця кольорів використовується зображеннями без локальної таблиці, та також розширенням простого тексту. Її присутність позначається флагом глобальної таблиці, що встановлений в 1, в дескрипторі логічного екрана; якщо присутня, глобальна таблиця слідує безпосередньо за дескрипторов логічного екрана, та містить кількість байтів, рівну 3 x 2^(розмір_глобальної_таблиці+1). Цей блок ОПЦІОНАЛЬНИЙ; в кожному потоці даних може зустрічатись щонайбільше одна глобальна таблиця кольорів.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +===============+
  0  |               |       Червоний 0                   Байт
     +-             -+
  1  |               |       Зелений 0                    Байт
     +-             -+
  2  |               |       Синій 0                      Байт
     +-             -+
  3  |               |       Червоний 1                   Байт
     +-             -+
     |               |       Зелений 1                    Байт
     +-             -+
 up  |               |
     +-   . . . .   -+       ...
 to  |               |
     +-             -+
     |               |       Зелений 255                  Байт
     +-             -+
767  |               |       Синій 255                    Байт
     +===============+


Цей блок має дію для всього потоку даних. Він не може бути модифікований розширенням.

20. Дескриптор зображення. Версія 87a
<br>Кожне зображення в потоці даних складається з дескриптора зображення, опціональної локальної таблиці кольорів, та даних зображення. Кожне зображення має вкладатись в рамки логічного екрана, як визначено в дескрипторі логічного екрана.<br><br>Дескриптор екрана містить параметри, необхідні для обробки зображення на базі таблиці. Координати, надані в блоці, посилаються на координати логічного екрана, та надаються в пікселях. Цей блок є блоком малювання графіки, перед яким опціонально стоять один або більше контрольні блоки, такі, як блок розширення графічного контролю, та може опціонально завершуватись локальною таблицею кольорів; за дескриптором зображення завжди ідуть дані зображення.

Цей блок ПОТРІБЕН для зображення. Для кожного зображення в потоці даних має бути рівно один дескриптор зображення.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Роздільник зображень         Байт
     +---------------+
  1  |               |       Ліва позиція зображення      Беззнакове
     +-             -+
  2  |               |
     +---------------+
  3  |               |       Верхня позиція зображення    Беззнакове
     +-             -+
  4  |               |
     +---------------+
  5  |               |       Ширина зображежння           Беззнакове
     +-             -+
  6  |               |
     +---------------+
  7  |               |       Висота зображення            Беззнакове
     +-             -+
  8  |               |
     +---------------+
  9  | | | |   |     |       &lt;Запаковані поля&gt;            Дивіться нижче
     +---------------+

     &lt;Запаковані поля&gt;  =    Флаг локлаьної таблиці        1 Біт
                             Флаг переміження              1 Біт
                             Флаг сортування               1 Біт
                             Зарезервовані                 2 Біт
                             Розмір локальної таблиці      3 Біт

Роздільник зображень - вказує на початок дескриптора зображення. Це поле містить фіксоване значення 0x2C.

           ii) Image Left Position - Column number, in pixels, of the left edge
           of the image, with respect to the left edge of the Logical Screen.
           Leftmost column of the Logical Screen is 0.

           iii) Image Top Position - Row number, in pixels, of the top edge of
           the image with respect to the top edge of the Logical Screen. Top
           row of the Logical Screen is 0.

           iv) Image Width - Width of the image in pixels.

           v) Image Height - Height of the image in pixels.

           vi) Local Color Table Flag - Indicates the presence of a Local Color
           Table immediately following this Image Descriptor. (This field is
           the most significant bit of the byte.)


           Values :    0 -   Local Color Table is not present. Use
                             Global Color Table if available.
                       1 -   Local Color Table present, and to follow
                             immediately after this Image Descriptor.








                                                                        13


           vii) Interlace Flag - Indicates if the image is interlaced. An image
           is interlaced in a four-pass interlace pattern; see Appendix E for
           details.

           Values :    0 - Image is not interlaced.
                       1 - Image is interlaced.

            viii) Sort Flag - Indicates whether the Local Color Table is
            sorted.  If the flag is set, the Local Color Table is sorted, in
            order of decreasing importance. Typically, the order would be
            decreasing frequency, with most frequent color first. This assists
            a decoder, with fewer available colors, in choosing the best subset
            of colors; the decoder may use an initial segment of the table to
            render the graphic.

            Values :    0 -   Not ordered.
                        1 -   Ordered by decreasing importance, most
                              important color first.

            ix) Size of Local Color Table - If the Local Color Table Flag is
            set to 1, the value in this field is used to calculate the number
            of bytes contained in the Local Color Table. To determine that
            actual size of the color table, raise 2 to the value of the field
            + 1. This value should be 0 if there is no Local Color Table
            specified. (This field is made up of the 3 least significant bits
            of the byte.)

     d. Extensions and Scope. The scope of this block is the Table-based Image
     Data Block that follows it. This block may be modified by the Graphic
     Control Extension.

21. Локальна таблиця кольорів. Версія 87a

Цей блок містить таблицю кольорів, що є послідовністю байтів, що представляють триплети червоний-зелений-синій.  The Local Color Table
     is used by the image that immediately follows. Its presence is marked by
     the Local Color Table Flag being set to 1 in the Image Descriptor; if
     present, the Local Color Table immediately follows the Image Descriptor
     and contains a number of bytes equal to
                          3x2^(Size of Local Color Table+1).
     If present, this color table temporarily becomes the active color table
     and the following image should be processed using it. This block is
     OPTIONAL; at most one Local Color Table may be present per Image
     Descriptor and its scope is the single image associated with the Image
     Descriptor that precedes it.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +===============+
  0  |               |       Червоний 0                   Байт
     +-             -+
  1  |               |       Зелений 0                    Байт
     +-             -+
  2  |               |       Синій 0                      Байт
     +-             -+
  3  |               |       Червоний 1                   Байт
     +-             -+
     |               |       Зелений 1                    Байт
     +-             -+
 up  |               |
     +-   . . . .   -+       ...
 to  |               |
     +-             -+
     |               |       Зелений 255                  Байт
     +-             -+
767  |               |       Синій 255                    Байт
     +===============+


     d. Extensions and Scope. The scope of this block is the Table-based Image
     Data Block that immediately follows it. This block cannot be modified by
     any extension.
<br>
22. Table Based Image Data.

     a. Опис: The image data for a table based image consists of a
     sequence of sub-blocks, of size at most 255 bytes each, containing an
     index into the active color table, for each pixel in the image.  Pixel
     indices are in order of left to right and from top to bottom.  Each index
     must be within the range of the size of the active color table, starting
     at 0. The sequence of indices is encoded using the LZW Algorithm with
     variable-length code, as described in Appendix F

     b. Потрібна версія: 87a

     c. Синтакс The image data format is as follows:

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
     |               |       LZW Minimum Code Size         Байт
     +---------------+

     +===============+
     |               |
     /               /       Image Data                    Data Sub-blocks
     |               |
     +===============+








                                                                        15


            i) LZW Minimum Code Size.  This byte determines the initial number
            of bits used for LZW codes in the image data, as described in
            Appendix F.

     d. Extensions and Scope. This block has no scope, it contains raster
     data. Extensions intended to modify a Table-based image must appear
     before the corresponding Image Descriptor.


23. Розширення графічного контроля. Версія 89a

Розширення графічного контроля містить параметри, що використовуються для обробки блока графічного малювання. Поле дії цього розширення є перший графічний блок, що послідує. Розширення містить тільки один суб-блок даних. Цей блок ОПЦІОНАЛЬНИЙ; блоку графічного малювання може передувати не більше одного розширення графічного контроля. Це єдине обмеження на кількість розширень графічного контроля, що можуть міститись в потоці даних.

      7 6 5 4 3 2 1 0        Ім'я поля                     Тип
     +---------------+
  0  |               |       Вступ розширення              Байт
     +---------------+
  1  |               |       Маркер графічного контроля    Байт
     +---------------+

     +---------------+
  0  |               |       Розмір блоку                  Байт
     +---------------+
  1  |     |     | | |       &lt;Паковані поля&gt;               Дивіться нижче
     +---------------+
  2  |               |       Час затримки                  Беззнакове
     +-             -+
  3  |               |
     +---------------+
  4  |               |       Індекс прозорого кольору      Байт
     +---------------+

     +---------------+
  0  |               |       Завершувач блоку              Байт
     +---------------+


      &lt;Паковані поля&gt;  =     Зарезервовано                 3 Біт
                             Метод очистки                 3 Біт
                             Флаг користувацького вводу    1 Біт
                             Флаг прозорого кольору        1 Біт

Вступ розширення - вказує на початок блока розширення. Це поле містить фіксоване значення 0x21.

Маркер графічного контроля - Identifies the current block as a
            Graphic Control Extension. This field contains the fixed value
            0xF9.

            iii) Розмір блоку - Number of bytes in the block, after the Розмір блоку field and up to but not including the Завершувач блоку.  This
            field contains the fixed value 4.

            iv) Disposal Method - Indicates the way in which the graphic is to
            be treated after being displayed.

            Values :    0 -   No disposal specified. The decoder is
                              not required to take any action.
                        1 -   Do not dispose. The graphic is to be left
                              in place.
                        2 -   Restore to background color. The area used by the
                              graphic must be restored to the background color.
                        3 -   Restore to previous. The decoder is required to
                              restore the area overwritten by the graphic with
                              what was there prior to rendering the graphic.
                     4-7 -    To be defined.

            v) User Input Flag - Indicates whether or not user input is
            expected before continuing. If the flag is set, processing will
            continue when user input is entered. The nature of the User input
            is determined by the application (Carriage Return, Mouse Button
            Click, etc.).

            Values :    0 -   User input is not expected.
                        1 -   User input is expected.

            When a Delay Time is used and the User Input Flag is set,
            processing will continue when user input is received or when the
            delay time expires, whichever occurs first.

            vi) Transparency Flag - Indicates whether a transparency index is
            given in the Transparent Index field. (This field is the least
            significant bit of the byte.)

            Values :    0 -   Transparent Index is not given.
                        1 -   Transparent Index is given.

            vii) Delay Time - If not 0, this field specifies the number of
            hundredths (1/100) of a second to wait before continuing with the
            processing of the Data Stream. The clock starts ticking immediately
            after the graphic is rendered. This field may be used in
            conjunction with the User Input Flag field.

            viii) Transparency Index - The Transparency Index is such that when
            encountered, the corresponding pixel of the display device is not
            modified and processing goes on to the next pixel. The index is
            present if and only if the Transparency Flag is set to 1.

            ix) Завершувач блоку - This zero-length data block marks the end of







                                                                        17

            the Graphic Control Extension.

      d. Extensions and Scope. The scope of this Extension is the graphic
      rendering block that follows it; it is possible for other extensions to
      be present between this block and its target. This block can modify the
      Image Descriptor Block and the Plain Text Extension.

      e. Recommendations.

            i) Disposal Method - The mode Restore To Previous is intended to be
            used in small sections of the graphic; the use of this mode imposes
            severe demands on the decoder to store the section of the graphic
            that needs to be saved. For this reason, this mode should be used
            sparingly.  This mode is not intended to save an entire graphic or
            large areas of a graphic; when this is the case, the encoder should
            make every attempt to make the sections of the graphic to be
            restored be separate graphics in the data stream. In the case where
            a decoder is not capable of saving an area of a graphic marked as
            Restore To Previous, it is recommended that a decoder restore to
            the background color.

            ii) User Input Flag - When the flag is set, indicating that user
            input is expected, the decoder may sound the bell (0x07) to alert
            the user that input is being expected.  In the absence of a
            specified Delay Time, the decoder should wait for user input
            indefinitely.  It is recommended that the encoder not set the User
            Input Flag without a Delay Time specified.


24. Comment Extension. Версія 89a

      a. Опис: The Comment Extension contains textual information which
      is not part of the actual graphics in the GIF Data Stream. It is suitable
      for including comments about the graphics, credits, descriptions or any
      other type of non-control and non-graphic data.  The Comment Extension
      may be ignored by the decoder, or it may be saved for later processing;
      under no circumstances should a Comment Extension disrupt or interfere
      with the processing of the Data Stream.

      This block is OPTIONAL; any number of them may appear in the Data Stream.

      c. Синтакс

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Вступ розширення             Байт
     +---------------+
  1  |               |       Comment Label                Байт
     +---------------+

     +===============+
     |               |
  N  |               |       Comment Data                  Data Sub-blocks
     |               |
     +===============+

     +---------------+
  0  |               |       Завершувач блоку              Байт
     +---------------+

Вступ розширення - вказує на початок блока розширення. Це поле містить фіксоване значення 0x21.

            ii) Comment Label - Identifies the block as a Comment Extension.
            This field contains the fixed value 0xFE.

            iii) Comment Data - Sequence of sub-blocks, each of size at most
            255 bytes and at least 1 byte, with the size in a byte preceding
            the data.  The end of the sequence is marked by the Завершувач блоку.

            iv) Завершувач блоку - This zero-length data block marks the end of
            the Comment Extension.

      d. Extensions and Scope. This block does not have scope. This block
      cannot be modified by any extension.

      e. Recommendations.

            i) Data - This block is intended for humans.  It should contain
            text using the 7-bit ASCII character set. This block should
            not be used to store control information for custom processing.

            ii) Position - This block may appear at any point in the Data
            Stream at which a block can begin; however, it is recommended that
            Comment Extensions do not interfere with Control or Data blocks;
            they should be located at the beginning or at the end of the Data
            Stream to the extent possible.


25. Розширення простого тексту. Версія 89a

Розширення простого тексту містить текстові дані та параметри, необхідні для малювання ціх даних як графіки в простій формі. Текстуальні дані закодовані як 7-бітні друковані ASCII символи. Текстові дані малюються з використанням решітки символів, визначеної в полях блока. Кожний символ малюється в окремій клітині. Текстуальні дані в блоці відмальовуються як пропорційні символи, по одному в клітині, з найкращим заповненням щодо роміру та шрифту. Щодо подальшої інформації дивіться рекомендації нижче. Символи даних беруться послідовно з області даних блоку, та відмальовуються в клітинці, починаючи з верхнього лівого кута в сітці, та продовжуються зліва направо та зверху донизу. Текстові дані малюються до кінця тексту, або доки сітка не буде заповнена. Сітка символів містить цілі номери клітин; в випадку, коли розмірності клітин не дозволяють цілі числа, дробні клітини мають бути відкинуті; кодувальник має уважно вказати розмірність клітин, так, щоб цього не трапилось. Цей блок потребує глобальної таблиці кольорів, щоб це було можливе; кольори, що використовуються цім блоком, посилаються на глобальну таблицю в потоці, якщо така є, або на глобальну таблицю з попереднього потоку, якщо він був збережений. Цей блок є блоком графічного малювання, і, таким чином, може бути модифікований розширенням графічного контролю. Цей блок є ОПЦІОНАЛЬНИМ; в потоці даних може траплятись будь яка кількість таких блоків.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Вступ розширення             Байт
     +---------------+
  1  |               |       Мітка простого тексту        Байт
     +---------------+

     +---------------+
  0  |               |       Розмір блоку                 Байт
     +---------------+
  1  |               |       Ліва позиція решітки       Беззнакове
     +-             -+
  2  |               |
     +---------------+
  3  |               |       Верхня позиція решітки     Беззнакове
     +-             -+
  4  |               |
     +---------------+
  5  |               |       Ширина решітки             Беззнакове
     +-             -+
  6  |               |
     +---------------+
  7  |               |       Висота решітки             Беззнакове
     +-             -+
  8  |               |
     +---------------+
  9  |               |       Ширина клітини символів      Байт
     +---------------+
 10  |               |       Висота клітини символів      Байт
     +---------------+
 11  |               |       Індекс кольору текста        Байт
     +---------------+
 12  |               |       Індекс кольору фона          Байт
     +---------------+

     +===============+
     |               |
  N  |               |       Дані простого тексту     Дані суб-блока
     |               |
     +===============+

     +---------------+
  0  |               |       Завершувач блоку             Байт
     +---------------+

Вступ розширення - вказує на початок блока розширення. Це поле містить фіксоване значення 0x21.


Мітка простого тексту - ідентифікує блок як розширення простого тектсу. Це поле містить фіксоване значення 0x01.

Розмір блоку - число байтів розширення після самого розміру, але не включаючи початок даних. Це поле має віксоване значення 12.

Ліва позиція решітки - стовпчик в пікселях лівого кута текстової решітки відносно логічного екрана.
Верхня позиція решітки - номер рядка в пікселях верхнього кута текстової решітки відносно логічного екрана.
Ширина решітки - ширина текстової решітки в пікселях.
Висота решітки - висота текстової решітки в пікселях.
Ширина клітини символа - ширина в пікселях кожної клітини решітки.
Висота клітини символа - висота в пікселях кожної клітини решітки.<br>Індекс кольору тексту - індекс в глобальній таблиці кольору тексту.
Індекс кольору фона - індекс в глобальній таблиці кольору фону. 
<br>Дані простого тексту - послідовність суб-блоків, кожний від 1 до 255 байтів, де розмір передує даним. Кінець послідовності позначається завершувачем блоку.<br><br>Завершувач блоку - блок з нульовою довжиною, що позначає кінець блоків даних простого тексту.

Розширення та поле дії. Поле дії цього блока є простий текст, що міститься в ньому. Цей блок може бути модифікований розширенням графічного контролю.

Дані в розширенні простого тексту очікуються в форматованому вигляді. Вибір шрифту та розміру залишається на розсуд декодера. Якщо трапляються символи меньше 0x20, або більше ніж 0xf7, рекомендовано, щоб декодер відображував символ проміжку (0x20). Кодувальник повинен використовувати сітку та розміри клітин, так, щоб чіле число клітин пасувало до розміру решітки горизонтально та вертикально. Для ширшої сумісності розміри клитин символів мають бути 8x8 або 8x16 (ширина x висота); розглядайте зображення як звичайний текст.


26. Розширення застосування. Версія 89a

Розширення застосування містить специфічну до зостовування інформацію; він відповідає синтаксису блока розширення, як описано нижче, та його мітка 0xFF.

      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       Вступ розширення             Байт
     +---------------+
  1  |               |       Extension Label              Байт
     +---------------+

     +---------------+
  0  |               |       Розмір блоку                 Байт
     +---------------+
  1  |               |
     +-             -+
  2  |               |
     +-             -+
  3  |               |       Ідентифікатор застосування   8 Байт
     +-             -+
  4  |               |
     +-             -+
  5  |               |
     +-             -+
  6  |               |
     +-             -+
  7  |               |
     +-             -+
  8  |               |
     +---------------+
  9  |               |
     +-             -+
 10  |               |       Код аутефінкації застосування  3 Байт
     +-             -+
 11  |               |
     +---------------+

     +===============+
     |               |
     |               |       Дані застосування              Суб-блоки даних
     |               |
     |               |
     +===============+

     +---------------+
  0  |               |       Завершувач блоку               Байт
     +---------------+

Вступ розширення - вказує на початок блока розширення. Це поле містить фіксоване значення 0x21.

Мітка розширення застосування - ідентифікує блок як розширення застосування. Це поле містить фіксоване значення 0xFF.

Розмір блоку - число байт в цьому блоці розширення, що слідують за цім байтом, але не включаючи початок даних застосування. Це поле містить фіксоване значення 11.

Ідентифікатор застосування - послідовність друкованих ASCII символів, що використовуються для ідентифікації застосування, якому належить розширення.

Код аутентифікації застосування - послідовність з трьох байтів, що використовуються для аутентифікації ідентифікатора застосування. Програма застосування може використовувати алгоритм для обчислення двійникового кода, що унікально ідентифікує його, як застосування, якому належить розширення.

Цей блок не має меж дії. Цей блок не може бути модифікований розширенням.

27. Трейлер. Версія 87a

Цей блок є блоком з одного поля, ща вказує на кінець потоку даних GIF. Він містить фіксоване значення 0x3B.


      7 6 5 4 3 2 1 0        Ім'я поля                    Тип
     +---------------+
  0  |               |       GIF Trailer                   Байт
     +---------------+

Розширення та поле дії. Цей блок не має поля дії, він завершує потік даних GIF. Цей блок не може бути модифікований розширенням.

Додаток<br><br>Таблиця для швидкого посилання

Block Name                  Required   Label       Ext.   Верс.
Application Extension       Орц. (*)   0xFF (255)  yes    89a
Comment Extension           Орц. (*)   0xFE (254)  yes    89a
Global Color Table          Орц. (1)   none        no     87a
Graphic Control Extension   Орц. (*)   0xF9 (249)  yes    89a
Header                      Req. (1)   none        no     N/A
Image Descriptor            Орц. (*)   0x2C (044)  no     87a (89a)
Local Color Table           Орц. (*)   none        no     87a
Logical Screen Descriptor   Req. (1)   none        no     87a (89a)
Plain Text Extension        Орц. (*)   0x01 (001)  yes    89a
Trailer                     Req. (1)   0x3B (059)  no     87a

Unlabeled Blocks
Header                      Req. (1)   none        no     N/A
Logical Screen Descriptor   Req. (1)   none        no     87a (89a)
Global Color Table          Орц. (1)   none        no     87a
Local Color Table           Орц. (*)   none        no     87a

Graphic-Rendering Blocks
Plain Text Extension        Орц. (*)   0x01 (001)  yes    89a
Image Descriptor            Орц. (*)   0x2C (044)  no     87a (89a)

Control Blocks
Graphic Control Extension   Орц. (*)   0xF9 (249)  yes    89a

Special Purpose Blocks
Trailer                     Req. (1)   0x3B (059)  no     87a
Comment Extension           Орц. (*)   0xFE (254)  yes    89a
Application Extension       Орц. (*)   0xFF (255)  yes    89a

legend:           (1)   if present, at most one occurrence
                  (*)   zero or more occurrences
                  (+)   one or more occurrences

Notes : The Header is not subject to Version Numbers.
(89a) The Logical Screen Descriptor and the Image Descriptor retained their
syntax from version 87a to version 89a, but some fields reserved under version
87a are used under version 89a.

Appendix
B. GIF Grammar.

A Grammar is a form of notation to represent the sequence in which certain
objects form larger objects.  A grammar is also used to represent the number of
objects that can occur at a given position.  The grammar given here represents
the sequence of blocks that form the GIF Data Stream. A grammar is given by
listing its rules.  Each rule consists of the left-hand side, followed by some
form of equals sign, followed by the right-hand side.  In a rule, the
right-hand side describes how the left-hand side is defined. The right-hand
side consists of a sequence of entities, with the possible presence of special
symbols. The following legend defines the symbols used in this grammar for GIF.

Legend:           &lt;&gt;    grammar word
                  ::=   defines symbol
                  *     zero or more occurrences
                  +     one or more occurrences
                  |     alternate element
                  []    optional element

Example:

&lt;GIF Data Stream&gt; ::= Header &lt;Logical Screen&gt; &lt;Data&gt;* Trailer

This rule defines the entity &lt;GIF Data Stream&gt; as follows. It must begin with a
Header. The Header is followed by an entity called Logical Screen, which is
defined below by another rule. The Logical Screen is followed by the entity
Data, which is also defined below by another rule. Finally, the entity Data is
followed by the Trailer.  Since there is no rule defining the Header or the
Trailer, this means that these blocks are defined in the document.  The entity
Data has a special symbol (*) following it which means that, at this position,
the entity Data may be repeated any number of times, including 0 times. For
further reading on this subject, refer to a standard text on Programming
Languages.


The Grammar.

&lt;GIF Data Stream&gt; ::=     Header &lt;Logical Screen&gt; &lt;Data&gt;* Trailer

&lt;Logical Screen&gt; ::=      Logical Screen Descriptor [Global Color Table]

&lt;Data&gt; ::=                &lt;Graphic Block&gt;  |
                          &lt;Special-Purpose Block&gt;

&lt;Graphic Block&gt; ::=       [Graphic Control Extension] &lt;Graphic-Rendering Block&gt;

&lt;Graphic-Rendering Block&gt; ::=  &lt;Table-Based Image&gt;  |
                               Plain Text Extension

&lt;Table-Based Image&gt; ::=   Image Descriptor [Local Color Table] Image Data

&lt;Special-Purpose Block&gt; ::=    Application Extension  |
                               Comment Extension
NOTE : The grammar indicates that it is possible for a GIF Data Stream to
contain the Header, the Logical Screen Descriptor, a Global Color Table and the
GIF Trailer. This special case is used to load a GIF decoder with a Global
Color Table, in preparation for subsequent Data Streams without color tables at
all.

Appendix C. Glossary.

Active Color Table - Color table used to render the next graphic. If the next
graphic is an image which has a Local Color Table associated with it, the
active color table becomes the Local Color Table associated with that image.
If the next graphic is an image without a Local Color Table, or a Plain Text
Extension, the active color table is the Global Color Table associated with the
Data Stream, if there is one; if there is no Global Color Table in the Data
Stream, the active color table is a color table saved from a previous Data
Stream, or one supplied by the decoder.

Block - Collection of bytes forming a protocol unit. In general, the term
includes labeled and unlabeled blocks, as well as Extensions.

Data Stream - The GIF Data Stream is composed of blocks and sub-blocks
representing images and graphics, together with control information to render
them on a display device. All control and data blocks in the Data Stream must
follow the Header and must precede the Trailer.

Decoder - A program capable of processing a GIF Data Stream to render the
images and graphics contained in it.

Encoder - A program capable of capturing and formatting image and graphic
raster data, following the definitions of the Graphics Interchange Format.

Extension - A protocol block labeled by the Вступ розширення 0x21.

Вступ розширення - Label (0x21) defining an Extension.

Graphic - Data which can be rendered on the screen by virtue of some algorithm.
The term graphic is more general than the term image; in addition to images,
the term graphic also includes data such as text, which is rendered using
character bit-maps.

Image - Data representing a picture or a drawing; an image is represented by an
array of pixels called the raster of the image.

Raster - Array of pixel values representing an image.

Appendix D. Conventions.

Animation - The Graphics Interchange Format is not intended as a platform for
animation, even though it can be done in a limited way.

Байт Ordering - Unless otherwise stated, multi-byte numeric fields are ordered
with the Least Significant Байт first.

Color Indices - Color indices always refer to the active color table, either
the Global Color Table or the Local Color Table.

Color Order - Unless otherwise stated, all triple-component RGB color values
are specified in Червоний-Зелений-Синій order.

Color Tables - Both color tables, the Global and the Local, are optional; if
present, the Global Color Table is to be used with every image in the Data
Stream for which a Local Color Table is not given; if present, a Local Color
Table overrides the Global Color Table.  However, if neither color table is
present, the application program is free to use an arbitrary color table. If
the graphics in several Data Streams are related and all use the same color
table, an encoder could place the color table as the Global Color Table in the
first Data Stream and leave subsequent Data Streams without a Global Color
Table or any Local Color Tables; in this way, the overhead for the table is
eliminated.  It is recommended that the decoder save the previous Global Color
Table to be used with the Data Stream that follows, in case it does not contain
either a Global Color Table or any Local Color Tables. In general, this allows
the application program to use past color tables, significantly reducing
transmission overhead.

Extension Blocks - Extensions are defined using the Вступ розширення code
to mark the beginning of the block, followed by a block label, identifying the
type of extension.  Extension Codes are numbers in the range from 0x00 to 0xFF,
inclusive. Special purpose extensions are transparent to the decoder and may be
omitted when transmitting the Data Stream on-line. The GIF capabilities
dialogue makes the provision for the receiver to request the transmission of
all blocks; the default state in this regard is no transmission of Special
purpose blocks.

Зарезервовано Fields - All Зарезервовано Fields are expected to have each bit set to zero
(off).

Appendix E. Interlaced Images.

The rows of an Interlaced images are arranged in the following order:

      Group 1 : Every 8th. row, starting with row 0.              (Pass 1)
      Group 2 : Every 8th. row, starting with row 4.              (Pass 2)
      Group 3 : Every 4th. row, starting with row 2.              (Pass 3)
      Group 4 : Every 2nd. row, starting with row 1.              (Pass 4)

The Following example illustrates how the rows of an interlaced image are
ordered.

      Row Number                                        Interlace Pass

 0    -----------------------------------------       1
 1    -----------------------------------------                         4
 2    -----------------------------------------                   3
 3    -----------------------------------------                         4
 4    -----------------------------------------             2
 5    -----------------------------------------                         4
 6    -----------------------------------------                   3
 7    -----------------------------------------                         4
 8    -----------------------------------------       1
 9    -----------------------------------------                         4
 10   -----------------------------------------                   3
 11   -----------------------------------------                         4
 12   -----------------------------------------             2
 13   -----------------------------------------                         4
 14   -----------------------------------------                   3
 15   -----------------------------------------                         4
 16   -----------------------------------------       1
 17   -----------------------------------------                         4
 18   -----------------------------------------                   3
 19   -----------------------------------------                         4

Appendix F. Variable-Length-Code LZW Compression.

The Variable-Length-Code LZW Compression is a variation of the Lempel-Ziv
Compression algorithm in which variable-length codes are used to replace
patterns detected in the original data. The algorithm uses a code or
translation table constructed from the patterns encountered in the original
data; each new pattern is entered into the table and its index is used to
replace it in the compressed stream.

The compressor takes the data from the input stream and builds a code or
translation table with the patterns as it encounters them; each new pattern is
entered into the code table and its index is added to the output stream; when a
pattern is encountered which had been detected since the last code table
refresh, its index from the code table is put on the output stream, thus
achieving the data compression.  The expander takes input from the compressed
data stream and builds the code or translation table from it; as the compressed
data stream is processed, codes are used to index into the code table and the
corresponding data is put on the decompressed output stream, thus achieving
data decompression.  The details of the algorithm are explained below.  The
Variable-Length-Code aspect of the algorithm is based on an initial code size
(LZW-initial code size), which specifies the initial number of bits used for
the compression codes.  When the number of patterns detected by the compressor
in the input stream exceeds the number of patterns encodable with the current
number of bits, the number of bits per LZW code is increased by one.

The Raster Data stream that represents the actual output image can be
represented as:

         7 6 5 4 3 2 1 0
        +---------------+
        | LZW code size |
        +---------------+

        +---------------+ ----+
        |  block size   |     |
        +---------------+     |
        |               |     +-- Repeated as many
        |  data bytes   |     |   times as necessary.
        |               |     |
        +---------------+ ----+

        . . .       . . . ------- The code that terminates the LZW
                                  compressed data must appear before
                                  Завершувач блоку.
        +---------------+
        |0 0 0 0 0 0 0 0|  Завершувач блоку
        +---------------+

The conversion of the image from a series of pixel values to a transmitted or
stored character stream involves several steps. In brief these steps are:

1. Establish the Code Size - Define the number of bits needed to represent the
actual data.

2. Compress the Data - Compress the series of image pixels to a series of compression codes.

3. Build a Series of Байт - Take the set of compression codes and convert to a
string of 8-bit bytes.

4. Package the Байт - Package sets of bytes into blocks preceded by character
counts and output.

ESTABLISH CODE SIZE

The first byte of the Compressed Data stream is a value indicating the minimum
number of bits required to represent the set of actual pixel values. Normally
this will be the same as the number of color bits. Because of some algorithmic
constraints however, black &amp; white images which have one color bit must be
indicated as having a code size of 2.
This code size value also implies that the compression codes must start out one
bit longer.

COMPRESSION

The LZW algorithm converts a series of data values into a series of codes which
may be raw values or a code designating a series of values. Using text
characters as an analogy, the output code consists of a character or a code
representing a string of characters.

The LZW algorithm used in GIF matches algorithmically with the standard LZW
algorithm with the following differences:

1.  A special Clear code is defined which resets all compression/decompression
parameters and tables to a start-up state. The value of this code is 2**&lt;code
size&gt;. For example if the code size indicated was 4 (image was 4 bits/pixel)
the Clear code value would be 16 (10000 binary). The Clear code can appear at
any point in the image data stream and therefore requires the LZW algorithm to
process succeeding codes as if a new data stream was starting. Encoders should
output a Clear code as the first code of each image data stream.

2. An End of Information code is defined that explicitly indicates the end of
the image data stream. LZW processing terminates when this code is encountered.
It must be the last code output by the encoder for an image. The value of this
code is &lt;Clear code&gt;+1.

3. The first available compression code value is &lt;Clear code&gt;+2.

4. The output codes are of variable length, starting at &lt;code size&gt;+1 bits per
code, up to 12 bits per code. This defines a maximum code value of 4095
(0xFFF). Whenever the LZW code value would exceed the current code length, the
code length is increased by one. The packing/unpacking of these codes must then
be altered to reflect the new code length.

BUILD 8-BIT BYTES

Because the LZW compression used for GIF creates a series of variable length
codes, of between 3 and 12 bits each, these codes must be reformed into a
series of 8-bit bytes that will be the characters actually stored or
transmitted. This provides additional compression of the image. The codes are
formed into a stream of bits as if they were packed right to left and then picked off 8 bits at a time to be output.

Assuming a character array of 8 bits per character and using 5 bit codes to be
packed, an example layout would be similar to:

     +---------------+
  0  |               |    bbbaaaaa
     +---------------+
  1  |               |    dcccccbb
     +---------------+
  2  |               |    eeeedddd
     +---------------+
  3  |               |    ggfffffe
     +---------------+
  4  |               |    hhhhhggg
     +---------------+
           . . .
     +---------------+
  N  |               |
     +---------------+


Note that the physical packing arrangement will change as the number of bits
per compression code change but the concept remains the same.

PACKAGE THE BYTES

Once the bytes have been created, they are grouped into blocks for output by
preceding each block of 0 to 255 bytes with a character count byte. A block
with a zero byte count terminates the Raster Data stream for a given image.
These blocks are what are actually output for the GIF image. This block format
has the side effect of allowing a decoding program the ability to read past the
actual image data if necessary by reading block counts and then skipping over
the data.


FURTHER READING

[1] Ziv, J. and Lempel, A. : "A Universal Algorithm for Sequential Data
Compression", IEEE Transactions on Information Theory, May 1977.
[2] Welch, T. : "A Technique for High-Performance Data Compression", Computer,
June 1984.
[3] Nelson, M.R. : "LZW Data Compression", Dr. Dobb's Journal, October 1989.

Appendix G. On-line Capabilities Dialogue.

NOTE : This section is currently (10 July 1990) under revision; the information
provided here should be used as general guidelines. Code written based on this
information should be designed in a flexible way to accommodate any changes
resulting from the revisions.

The following sequences are defined for use in mediating control between a GIF
sender and GIF receiver over an interactive communications line. These
sequences do not apply to applications that involve downloading of static GIF
files and are not considered part of a GIF file.

GIF CAPABILITIES ENQUIRY

The GIF Capabilities Enquiry sequence is issued from a host and requests an
interactive GIF decoder to return a response message that defines the graphics
parameters for the decoder. This involves returning information about available
screen sizes, number of bits/color supported and the amount of color detail
supported. The escape sequence for the GIF Capabilities Enquiry is defined as:

ESC[&gt;0g           0x1B 0x5B 0x3E 0x30 0x67

GIF CAPABILITIES RESPONSE

The GIF Capabilities Response message is returned by an interactive GIF decoder
and defines the decoder's display capabilities for all graphics modes that are
supported by the software. Note that this can also include graphics printers as
well as a monitor screen. The general format of this message is:

#version;protocol{;dev, width, height, color-bits, color-res}...&lt;CR&gt;


'#'            GIF Capabilities Response identifier character.
version        GIF format version number;  initially '87a'.
protocol='0'   No end-to-end protocol supported by decoder Transfer as direct
               8-bit data stream.
protocol='1'   Can use CIS B+ error correction protocol to transfer GIF data
               interactively from the host directly to the display.
dev = '0'      Screen parameter set follows.
dev = '1'      Printer parameter set follows.
width          Maximum supported display width in pixels.
height         Maximum supported display height in pixels.
color-bits     Number of bits per pixel supported. The number of supported
               colors is therefore 2**color-bits.
color-res      Number of bits per color component supported in the hardware
               color palette. If color-res is '0' then no hardware palette
               table is available.

Note that all values in the GIF Capabilities Response are returned as ASCII
decimal numbers and the message is terminated by a Carriage Return character.

The following GIF Capabilities Response message describes three standard IBM PC
Enhanced Graphics Adapter configurations with no printer; the GIF data stream

can be processed within an error correcting protocol:

#87a;1;0,320,200,4,0;0,640,200,2,2;0,640,350,4,2&lt;CR&gt;

ENTER GIF GRAPHICS MODE

Two sequences are currently defined to invoke an interactive GIF decoder into
action. The only difference between them is that different output media are
selected. These sequences are:

ESC[&gt;1g     Display GIF image on screen

                  0x1B 0x5B 0x3E 0x31 0x67

ESC[&gt;2g   Display image directly to an attached graphics printer. The image may
optionally be displayed on the screen as well.

                  0x1B 0x5B 0x3E 0x32 0x67

Note that the 'g' character terminating each sequence is in lowercase.

INTERACTIVE ENVIRONMENT

The assumed environment for the transmission of GIF image data from an
interactive application is a full 8-bit data stream from host to micro.  All
256 character codes must be transferrable. The establishing of an 8-bit data
path for communications will normally be taken care of by the host application
programs. It is however up to the receiving communications programs supporting
GIF to be able to receive and pass on all 256 8-bit codes to the GIF decoder
software.</pre><p></p>
</body></html>