Переклад українською - Арсеній Чеботарьов - ac2epsilon@gmail.com - Ніжин 2015 

Розширення Tor для протоколу SOCKS

1. Огляд

  Протокол SOCKS провадить базовий інтерфейс для TCP проксі.  Клієнтске програмне забезпечення з’єднується з SOCKS сервером через TCP, та запитує  TCP з’єднання з іншою адресою та портом. SOCKS сервер встановлює з’єднання, та звітує про успіх або невдачу клієнту. Після того, як з’єднання було встановлене, клієнтське застосування використовує TCP з’єднання звичаним шляхом.

  Tor підтримує SOCKS4, як визначено в [1], SOCKS4A як визначено в [2], та SOCKS5 як визначено в [3].

  Найскладнішим питання для Tor в підтримці клієнтів, на практиці, це змусити DNS пошук, щоб він відбувався на стороні OR: якщо клієнт виконує свій власний DNS пошук, DNS сервер може побачити, які ядреси та клієнти він бажає досягти.
  SOCKS4 підтримує адресування за IPv4 адресою; SOCKS4A є надбудовою над   SOCKS4, що дозволяє адресувати за ім’ям; SOCKS5 підтримує IPv4, IPv6, та імена вузлів.

1.1. Повнота пдітримки

  Tor підтримує SOCKS4, SOCKS4A та SOCKS5 стандарти, за винятком наступного:

  ОБОЄ:
  - Команда BIND не підтримується.

  SOCKS4,4A:
  - Імена користувачів SOCKS4 використовується для забезпечення ізоляції потоків.

  SOCKS5:
  - Команда (SOCKS5) "UDP ASSOCIATE" не підтримується.
  - IPv6 не підтримується в команді CONNECT.
  - Метод аутентифікації "NO AUTHENTICATION REQUIRED" (SOCKS5) [00] підтримується; та починаючи з Tor 0.2.3.2-alpha, метод аутентифікації "USERNAME/PASSWORD" (SOCKS5) [02] також підтримується, та використовується як метод для реалізації ізоляції потоків. Як розширення для підтримки деяких поломаних клієнтів, ми дозволяємо клієнтам передавати нам аутентифікацію  "USERNAME/PASSWORD", навіть якщо не було обрано жодної аутентифікації.

  (Для додаткової інформації по ізоляції потоків, дивіться IsolateSOCKSAuth на Tor сторінці.)

2. Пошук імені

  Як розширення до SOCKS4A та SOCKS5, Tor реалізує нові значення команд,
  "RESOLVE" [F0]. Коли Tor отримує SOCKS команду "RESOLVE", це ініціює віддалений пошук імені вузла, як цільової адреси SOCKS запиту. Відповідь буде або помилка (якщо адреса не може бути розв’язана) або відповідь успіху. В випадку успіху, адреса зберігається як яастина відповіді SOCKS, зарезервована для віддаленої IP адреси.

  (Ми підтримуємо RESOLVE в SOCKS4 також, навіть якщо це і не потрібно).

  Виключно для SOCKS5, ми підтримуємо розрішення з повим значенням команди "RESOLVE_PTR" [F1]. У відповідь на команду "RESOLVE_PTR" SOCKS5 з IPv4 в якості цілі, Tor намагається знайти канонічне ім’я файлу для цього запису IPv4, та повертає його в частині "server bound address" відповіді. (Ця команда не підтримувалась до Tor 0.1.2.2-alpha.)

3. Різні розширення команд.

  Tor 0.1.2.4-alpha додає нове значення команд: "CONNECT_DIR" [F2]. В цьому Tor буде відкривати шифроване пряме TCP з’єднання з портом каталогу Tor сервера, вказаного як address:port (вказаний порт має бути ORPort сервера). Він використовує однострибковий тунель та "BEGIN_DIR" клітина надсилається для створення цього безпечного з’єднання.

  The F2 command value was removed in Tor 0.2.0.10-alpha in favor of a
  new use_begindir flag in edge_connection_t.

4. HTTP-стійкість

  Tor перевіряє перший байт кожного SOCKS запиту, щоб побачити, чи він не виглядає скоріше як HTTP запит (тобто, чи він починається з "G", "H" або "P"). Якщо так, Tor повертає маленьку веб сторінку, що сповіщує користувача, що його браузер невірно сконфігурований. Це корисно для багатьох користувачів, хто помилково намагається використати Tor як HTTP проксі, замість SOCKS проксі.

5. Оптимістичні дані

  Tor дозволяє SOCKS клієнтам надсилати дані в з’єднання перед тим, як Tor відіслав SOCKS відповідь. Потім, використовуючи вихідний вузол, що підтримує "оптимістичні дані", Tor буде надсилати такі дані на сервер без очіківання, чи була успішною спроба з’єднання. Ця поведінка може зберегти час одного обігу на початку з’єднання з протоколом, коли клієнт звертається першим (як HTTP). Клієнти, що роблять це, мають бути готові почути, що їх з’єднання було успішним або не, _після_ того, як вони відіслали дані.

Посилання:
 [1] http://en.wikipedia.org/wiki/SOCKS#SOCKS4
 [2] http://en.wikipedia.org/wiki/SOCKS#SOCKS4a
 [3] SOCKS5: RFC1928
