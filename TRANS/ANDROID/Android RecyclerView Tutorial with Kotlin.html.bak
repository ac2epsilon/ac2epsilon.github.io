<!DOCTYPE html>
<!-- saved from url=(0073)https://www.raywenderlich.com/170075/android-recyclerview-tutorial-kotlin -->
<html class="chrome gr__raywenderlich_com" lang="en-US">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Туторіал Android RecyclerView з Kotlin</title>
  </head>
  <body style="   " data-gr-c-s-loaded="true" class="post-template-default single single-post postid-170075 single-format-standard">
    <sub><a id="firstLine" name="firstLine"></a>Переклад українською - <a href="mailto:ac2epsilon@gmail.com">Арсеній
        Чеботарьов</a> - Ніжин 2015-2018<br>
    </sub>
    <div id="main" class="wrapper clearfix">
      <div id="container">
        <div id="primary" class="no-margin-left">
          <div id="primary-container">
            <div id="content">
              <article id="post-170075" class="clearfix post-170075 post type-post status-publish format-standard has-post-thumbnail hentry category-user-interface-android tag-tutorial tag-kotlin tag-recyclerview tag-android">
                <header class="entry-header">
                  <h2 class="entry-title"> <a href="https://www.raywenderlich.com/170075/android-recyclerview-tutorial-kotlin"
                      title="Android RecyclerView Tutorial with Kotlin" sl-processed="1">Туторіал
                      Android RecyclerView з Kotlin</a> </h2>
                  <div class="tutorial-meta" id="larger-screens">
                    <div class="author-meta"> <a href="https://www.raywenderlich.com/u/rbiresch"
                        sl-processed="1"><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ecf3313d6dc0db1568a252b8b20e1bd0.jpg"
                          alt="" class="user-avatar" width="100" height="100"></a><a
                        href="https://www.raywenderlich.com/u/rbiresch" class="author-name"
                        sl-processed="1">Rod Biresch</a> <span class="author-post-date">on
                        October 4, 2017</span></div>
                  </div>
                </header>
                <div class="content-wrapper">
                  <div class="note">
                    <p><em>Зауваження щото оновлення</em>: Цей туторіал був
                      оновлений&nbsp;Rod Biresch для Kotlin, Android 26 (Oreo)
                      та Android Studio 3.0. Оригінальний туторіал був написаний
                      Darryl Bayliss. </p>
                  </div>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/RecyclerView-feature-320x320.png"
                      alt="RecyclerView-feature" class="alignright size-medium wp-image-136529"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-320x320.png 320w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-250x250.png 250w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature.png 500w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-32x32.png 32w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-50x50.png 50w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-64x64.png 64w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-96x96.png 96w, https://koenig-media.raywenderlich.com/uploads/2016/06/RecyclerView-feature-128x128.png 128w"
                      sizes="(max-width: 250px) 100vw, 250px" width="250" height="250">Ресайклінг
                    (ака повторне використання) є одною з тих речей, що корисна
                    для планети, та є логічним способом переконатись, що ми не
                    потонемо у власному смітті, або залишимось без ресурсів в
                    майбутньому. </p>
                  <p>Декілька Android інженерів подумали про вигоди ресайклингу
                    та уявили, що OS може виконуватись більш ефективно, якщо
                    буде повтороно використовувати ресурси. Результатом цього
                    натхнення були мільйони еко-воїнів та ентузіастів
                    ресайклінгу, коли віджет <code>RecyclerView</code> був
                    включений до Android Lollipop — або десь так. :]</p>
                  <p>Ще більше свято було, коли Google анонсував бібліотеку
                    підтримки, що робить це чистою, зеленою машиною ресайклингу,
                    зворотньо сумісною з усіма версіями аж до Android Eclair
                    (2.2), що був виданий аж у 2010му році!</p>
                  <p>В цьому туторіалі ви отримаєте досвід щодо використання
                    RecyclerView в дії, а саме навчитесь щодо наступного:</p>
                  <ul>
                    <li>Призначення RecyclerView</li>
                    <li>Компоненти, з яких складається RecyclerView</li>
                    <li>Як змінити розміщення RecyclerView</li>
                    <li>Як додати деякі милі анімації до вашого RecyclerView</li>
                  </ul>
                  <p>Також ми завітаємо у відкритий космос, разом з прикладом
                    застосування <em>Galacticon</em>. Ви будете будувати свій
                    потік зі щоденних астрономічних світлин з публічного NASA
                    API.</p>
                  <div class="note">
                    <p><em>Попередні вимоги</em>: Вам треба мати робочі навички
                      з робробки для Android з Kotlin, перед проходженням цього
                      туторіала. Якщо вам треба оновити знаяння, подивіться на
                      наші <a title="Android Tutorials" href="http://www.raywenderlich.com/category/android"
                        target="_blank" sl-processed="1">вступні туторіали</a>!
                      Також вам знадобиться Android Studio 3.0 або новіша.</p>
                  </div>
                  <h2>Прямуємо на мис Канаверал: починаємо</h2>
                  <p>Завантажте <a href="https://koenig-media.raywenderlich.com/uploads/2017/09/galacticon-starter-5.zip"
                      sl-processed="1">початковий проект</a> та відкрийте його в
                    Android Studio. Це ще не багато що робить, та всемогутній
                    RecyclerView нема де бачити. </p>
                  <p>Клацніть на кнопці <em>Run app</em> зверху, та початите
                    дещо, що представляє відкритий космос в дещо невірний
                    спосіб:<br>
                    <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/1-empty-app-1-281x500.png"
                      alt="" class="aligncenter size-large wp-image-170498" srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/1-empty-app-1-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/1-empty-app-1-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/1-empty-app-1.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <p>Він пустий, але це не добре. Ви не дуже чомусь навчитесь,
                    якщо за вас буде зроблена вся робота! Перед тим, як ви
                    зможете додати чудову астрофоторафію від NASA, вам
                    знадобиться виконати деякі налаштування.</p>
                  <h2>Отримання API ключив до Shuttle</h2>
                  <p>Ви будете використовувати <a href="http://apod.nasa.gov/"
                      target="_blank" title="Astronomy Picture of the Day API" sl-processed="1">Astronomy
                      Picture of the Day API</a>, один з найбільш популярних веб
                    сервісів, запроваджених NASA. Щоб переконатись, що вони не
                    стануть жертвами небажаного трафіку, сервіс вимагає від вас
                    мати ключ API, що буде застосовуватись з вашим
                    застосуванням.</p>
                  <p>На щастя, отримання ключа таке просте, к надання вашого
                    ім'я та адреси електронної пошти до <a href="https://api.nasa.gov/index.html#apply-for-an-api-key"
                      target="_blank" title="webpage" sl-processed="1">api.nasa.gov</a>,
                    та копіювання ключа API, що з'явиться на екрані або (не або,
                    а також - <em>прим.перекл</em>) на вашу електронну пошту.</p>
                  <p>Як тільки ви отримаєте ваш ключ API, скопіюйте його,
                    відкрийте файл <em>strings.xml</em> в вашому проекті, та
                    вставьте ваш ключ API як текстовий ресурс <code>api_key</code>,
                    заміщуючи <code>INSERT API KEY HERE</code>:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/4.-API_KEY-paste-700x296.png"
                      alt="4. API_KEY paste" class="aligncenter size-large wp-image-126540"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2016/02/4.-API_KEY-paste-700x296.png 700w, https://koenig-media.raywenderlich.com/uploads/2016/02/4.-API_KEY-paste-480x203.png 480w, https://koenig-media.raywenderlich.com/uploads/2016/02/4.-API_KEY-paste-768x325.png 768w"
                      sizes="(max-width: 700px) 100vw, 700px" width="700" height="296"></p>
                  <h2>Космічна чудасія: вивчаємо RecyclerView</h2>
                  <p>Ви готові для запуску у відкритий космос, щоб дослідити
                    величність RecyclerViews, але некомпетентний командер
                    прямуватиме до невідомого без підготування. Ви маєте
                    запитання, та вам потрібні відповіді, перед тим, як іти
                    далі. Дивіться на цей розділ, як на брифінг перед міссією.</p>
                  <p>На RecyclerView можна дивитись як на комбінацію <em>ListView</em>
                    та <em>GridView</em>. Однак, існують додаткові можливості,
                    що поділяє ваш код на керовані компоненти, так само, як
                    вонивикористовують ефективні до пам'яті шаблони дизайну. </p>
                  <p>Але як це було б краще за спробувані та протестовані&nbsp;
                    ListView та GridView, які ми вже використовували? Чи це
                    якась технологія прибульців? Відповіді, як завжди, криються
                    в деталях.</p>
                  <h3>Чому вам потрібен RecyclerView</h3>
                  <p>Уявіть, що ви створили ListView, де показати власні
                    документи є досить складним. Займе деякий час мило створити
                    рядкове розташування для ціх елементів, та потім використати
                    це розташування в вашому адаптері. </p>
                  <p>В вашому методі <code>getView()</code> ви розкладуєте ваше
                    нове розташування елементу. Поітм ви посилаєтесь на кожний
                    елемент всередині, через використання унікальних
                    ідентифікаторів, що ви провадите в вашому XML, щоб
                    налаштувати та додати деяку логіку відображення. Коли все
                    буде скінчено, ви передаєте цей елемент до ListView, що
                    готовий відображувати це на екрані. Все гарно…чи не так?</p>
                  <p>Правда полягає в тому, що ListViews та GridViews роблять
                    тільки половину роботи по досягненню дійсної ефективності по
                    пам'яті. Вони повторно використовують <em>макет</em>
                    елементу, але не мають посилання на дітей розташування,
                    примушуючи до виклику <code>findViewById()</code>
                    для кожного елементу розташування, кожного разу при виклику
                    <code>getView()</code>.</p>
                  <p>Всі ці виклики можуть стати <em>дуже</em>
                    процесор-інтенсивними, особливо для складних розташувань.
                    Більше цього, ситуація може призвести до того, що прокрутка
                    вашого ListView стане сіпаною, або нереагуючою, бо він
                    нестямно намагається займати ресурси для запитаних вами
                    елементів.</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ListView--700x491.png"
                      alt="ListView-" class="aligncenter size-large wp-image-126766"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2016/02/ListView-.png 700w, https://koenig-media.raywenderlich.com/uploads/2016/02/ListView--456x320.png 456w"
                      sizes="(max-width: 600px) 100vw, 600px" width="600" height="421"></p>
                  <p>Інженери Android з самого початку провадили рішення до цієї
                    проблеми на сайті Android Developers за допомогою <a href="http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder"
                      title="smooth scrolling" target="_blank" sl-processed="1">гладкого
                      прокручування</a>, через потужний шаблон <code>View
                      Holder</code>. </p>
                  <p>Коли ви використовуєте цей шаблон, ви створите клас, що
                    стає посиланням в пам'яті на всі елементи, потрібні для
                    вашого розташування. Вигода в тому, що якщо ви встановите
                    посилання один раз, та потім будете використовувати їх,
                    ефективно є обхідним шляхом щодо пікового навантаження, що
                    випливає від постійних викликів <code>findViewById()</code>.</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/viewholder_new_larger.png"
                      alt="viewholder_new_larger" class="aligncenter size-full wp-image-134106"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2016/05/viewholder_new_larger.png 594w, https://koenig-media.raywenderlich.com/uploads/2016/05/viewholder_new_larger-418x320.png 418w"
                      sizes="(max-width: 594px) 100vw, 594px" width="594" height="455"></p>
                  <p>Проблема в тому, що це опціональний шаблон для ListView або
                    GridView. Якщо ви не підозрювали про ці деталі, тоді ви
                    можете здивуватись, чому ваші ListViews та GridViews такі
                    повільні.</p>
                  <h2>Перший контакт: RecyclerView та розташування</h2>
                  <p>Поява RecyclerView змінила все. Він використовує <em>Adapter</em>,
                    щоб діяти як джерело даних; однак, ви маєте створити <em>ViewHolders</em>
                    для утримання посилань в пам'яті. </p>
                  <p>Коли вам треба новий елемент, він або створює новий об'єкт
                    ViewHolder для розгортання розташування, та зберігати ці
                    посилання, або буде повторно використаний такий з існуючого
                    стеку.&nbsp; </p>
                  <p>Тепер ви знаєте, чому він названий RecyclerView!</p>
                  <p>Інший прибуток з використання RecyclerViews є в тому, що
                    він іде з анімаціями по замовчанню, що ви не створювали та
                    додавали самотуж&nbsp; — вони просто роблять. </p>
                  <p>Дякуючи потребі в ViewHolder, RecyclerView точно знає, яку
                    анімацію застосовувати до кожного елементу. Та що краще за
                    все, він просто робить, як треба. Ви навіть можете створити
                    ваші власні анімації, та застосувати їх, якщо виникне
                    потреба.</p>
                  <p>Останній, та найбільш цікавий компонент RecyclerView, це
                    його <em>LayoutManager</em>. Цей об'єкт роміщує елементи
                    RecyclerView, та каже йому, коли повторно використовувати
                    елементи, що перемістились за межі екрарну.</p>
                  <p>Менеджери розташування надходять в трьох варіантах по
                    замовчанню:</p>
                  <ul>
                    <li><em>LinearLayoutManager</em> позиціонює ваші елементи як
                      стандартний ListView</li>
                    <li><em>GridLayoutManager</em> розміщує ваші елементи в
                      решитці, подібно до GridView</li>
                    <li><em>StaggeredGridLayoutManager</em> позиціонує елементи
                      в форматі зсунутої сітки.</li>
                  </ul>
                  <p>Також ви можете створити ваш власний <code>LayoutManagers</code>
                    для використання в <code>RecyclerView</code>, якщо ви
                    бажаєте додатковий рівень налаштування.</p>
                  <p>Маємо надію, що це відповідає на всі ваші питання,
                    командер. Тепер час розпочати місію!</p>
                  <h2>Підготовка до запуску: створення RecyclerView</h2>
                  <p>Щоб створити RecyclerView ми розіб'ємо роботу на чотири
                    частини:</p>
                  <ol>
                    <li>Декларувати RecyclerView в розміщенні макету, та зробити
                      посилання на нього в нашому файлі Kotlin.</li>
                    <li>Створити власний елемент XML розташування для вашого
                      RecyclerView, що буде використовуватись для елементів.</li>
                    <li>Створити зберігач елементів для ваших елементів
                      перегляду, перехопити джерело даних RecyclerView, та
                      ообробити логіку перегляду, через створення адаптеру
                      RecyclerView Adapter.</li>
                    <li>Під'єднати адаптер до RecyclerView.</li>
                  </ol>
                  <p>Перший крок має бути знайомим. Відкрийте файл розташування
                    <em>activity_main.xml</em>, та додайте наступне як дитину до
                    LinearLayout:</p>
                  <pre class="language-xml hljs" lang="xml"><span class="hljs-tag">&lt;<span
class="hljs-name">android.support.v7.widget.RecyclerView</span>
  <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/recyclerView"</span>
  <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
  <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
  <span class="hljs-attr">android:scrollbars</span>=<span class="hljs-string">"vertical"</span>/&gt;</span>
</pre>
                  <p>Тут ми встановлюємо розташування, та кажемо&nbsp;
                    RecyclerView зайняти весь батьківський контейнер.</p>
                  <div class="note">
                    <p><em>Зауваження</em>: Ви використовуєте бібліотеку
                      підтримки v7 для зворотньої сумісності зі старішими
                      пристроями. Стартовий проект вже додає RecyclerView
                      Support Library як залежність до вашого застосування в
                      файлі <em>build.gradle</em>. Якщо ви бажаєте більше
                      інформації як це зробити самотуж, клацніть на сайті <a href="http://developer.android.com/tools/support-library/setup.html"
                        target="_blank" sl-processed="1">Android developer</a>.</p>
                  </div>
                  <p>Відкрийте <em>MainActivity.kt</em>, та декларуйте наступну
                    властивість сверху класу:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> linearLayoutManager: LinearLayoutManager
</pre>
                  <p>В <code>onCreate()</code> додайте наступні рядки після <code>setContentView</code>:</p>
                  <pre class="language-kotlin hljs" lang="kotlin">linearLayoutManager = LinearLayoutManager(<span
class="hljs-keyword">this</span>)
recyclerView.layoutManager = linearLayoutManager
</pre>
                  <p>Android Studio має надати підказку для імпорту <code>kotlinx.android.synthetic.main.activity_main.*</code>
                    для <code>recyclerView</code>. Ви можете здивуватись, як ми
                    збираємось посилатись на <code>recyclerView</code>, зпершу
                    не пошукавши елемент за допомогою <code>findViewById()</code>?
                    Проект був сконфігурований за допомогою плагіна <a href="https://kotlinlang.org/docs/tutorials/android-plugin.html"
                      target="_blank" sl-processed="1">Kotlin Android Extensions</a>.
                    Цей плагін дозволяє можливість імпортувати елементи в
                    розташуванні як “синтетичні” властивості. </p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">import</span> kotlinx.android.synthetic.main.activity_main.*
</pre>
                  <p>Тепер <code>recyclerView</code> є розширеною властивостю
                    для <code>Activity</code>, та вона має той самий тип, як
                    декларовано в <code>activity_main.xml</code>. Плагін
                    видаляє багато зайвого коду, та зменьшує ризик потенційних
                    помилок.</p>
                  <p>Фаза запалювання завершена! Ви декларували та розмістили
                    пам'ять для двох частин пазла, що потрібні&nbsp;
                    RecyclerViews для роботи: самий RecyclerView та його Layout
                    Manager.</p>
                  <h2>Фаза запалювання 2: розташування для елементів
                    RecyclerView</h2>
                  <p>Друга фаза запалювання включає створення власного
                    розташування для елементів, що ви бажаєте використовувати в
                    вашому RecyclerView. Це робить так само, як це було, коли ви
                    створювали розташування для ListView або Gridview.</p>
                  <p>Прямуйте до вашої директорії розташувань, та створіть нове
                    розташування на ім'я <code>recyclerview_item_row</code>, та
                    встановіть кореневий елемент до <code>LinearLayout</code>.
                    В вашому наступному розташуванні додайте наступні XML
                    елементи як дітей до вашого LinearLayout:</p>
                  <pre class="language-xml hljs" lang="xml"><span class="hljs-tag">&lt;<span
class="hljs-name">ImageView</span>
    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/itemImage"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center"</span>
    <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"8dp"</span>
    <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"3"</span>
    <span class="hljs-attr">android:adjustViewBounds</span>=<span class="hljs-string">"true"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">TextView</span>
    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/itemDate"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"top|start"</span>
    <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"8dp"</span>
    <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span>
    <span class="hljs-attr">tools:text</span>=<span class="hljs-string">"Some date"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">TextView</span>
    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/itemDescription"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>
    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center|start"</span>
    <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span>
    <span class="hljs-attr">android:ellipsize</span>=<span class="hljs-string">"end"</span>
    <span class="hljs-attr">android:maxLines</span>=<span class="hljs-string">"5"</span> /&gt;</span>
</pre>
                  <p>Це не космічна наука: ви створили декілька елементів як
                    дитяці до вашого розташування, які ви тепер можете
                    використати в вашому адаптері. </p>
                  <h2>Адаптери: ракетне паливо для вашого RecyclerView</h2>
                  <p>Клацніть правою кнопкою миші на вашому каталозі <em>com.raywenderlich.galacticon</em>,
                    оберіть <em>New \ Kotlin File/Class</em>, та назвіть його <em>RecyclerAdapter</em>
                    та обоеріть <em>Class</em> для Kind. Зверху файлу, під
                    декларацією <code>package</code>, імпортуйте бібліотеку
                    підтримки RecyclerView:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">import</span> android.support.v7.widget.RecyclerView
</pre>
                  <p>Зробіть клас розширенням <em>RecyclerView.Adapter</em>,
                    так, щоб він виглядав наступним чином:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-class"><span
class="hljs-keyword">class</span> <span class="hljs-title">RecyclerAdapter</span> : <span
class="hljs-type">RecyclerView.Adapter</span>&lt;<span class="hljs-type">RecyclerAdapter.PhotoHolder</span>&gt;</span>()  {
}
</pre>
                  <p>Android Studio здогадається, що ви розширюєте клас, що
                    потребує методів, та буде підкреслювати декларацію вашого
                    класу червоним. </p>
                  <p>Щоб вирішити це, клацніть на рядку коду щоб вставити ваш
                    курсор, потім натисніть <em>Option + Return</em> (або <em>Alt
                      + Enter</em> на PC), щоб отримати контекстне меню. Оберіть
                    <em>Implement Methods</em>:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/5-Implements-RecyclerView-Adapter-Methods-650x382.png"
                      alt="5" class="aligncenter size-large wp-image-170792" srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/5-Implements-RecyclerView-Adapter-Methods-650x382.png 650w, https://koenig-media.raywenderlich.com/uploads/2017/09/5-Implements-RecyclerView-Adapter-Methods-480x282.png 480w"
                      sizes="(max-width: 650px) 100vw, 650px" width="650" height="382"></p>
                  <p>Підтвердіть, що ви бажаєте реалізувати підказані методи, та
                    клацніть на <em>OK</em>:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/6-Confirm-RecyclerView-Implemention-Methods-650x381.png"
                      alt="" class="aligncenter size-large wp-image-170793" srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/6-Confirm-RecyclerView-Implemention-Methods-650x381.png 650w, https://koenig-media.raywenderlich.com/uploads/2017/09/6-Confirm-RecyclerView-Implemention-Methods-480x282.png 480w"
                      sizes="(max-width: 650px) 100vw, 650px" width="650" height="381"></p>
                  <p>Ці методи є рушійною силою позаду вашого адаптора
                    RecyclerView. Зауважте, що ви все ще маєте помилку
                    компілятора на цей момент – це тому, що ваш адаптер та
                    потрібні миетоди насправді визначені з ваикористанням класу
                    ViewHolder, <code>PhotoHolder</code>, що досі не існує. Ви
                    отримаєте ваш ViewHolder, та скорочено побачите, що робить
                    кожний з методів, так що тримайтесь, Командере!</p>
                  <p>Як з кожиним адаптером, вам треба запровадити відповідному
                    елементу спосіб заповнення свої поля, та вирішити, скількі
                    елементів загалом має бути.</p>
                  <p>Клацання по елементу раніше обороблялись ListView або
                    GridView в <code>onItemClickListener</code>. RecyclerView
                    не провадить методів як ці, оскільки він має єдине
                    призначення: переконатись, що елементи всередині правильно
                    позиційоновані, та керуються ефективно. </p>
                  <p>Робота по слуханню за діями тепер передана до елелмента
                    RecyclerView, та його дітей. Це може виглядати більше як
                    навантаження, але з іншого боку, ви отримуєте гарно
                    налаштований контроль над тим, як ваші дитячі елементи мають
                    діяти.</p>
                  <p>Зверху вашого класу RecyclerAdapter додайте змінну <code>photos</code>,
                    що міститиме ваші сввітлини в первинному конструкторі:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-class"><span
class="hljs-keyword">class</span> <span class="hljs-title">RecyclerAdapter</span></span>(<span
class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> photos: ArrayList&lt;Photo&gt;) RecyclerView.Adapter&lt;RecyclerAdapter.PhotoHolder&gt;() {
</pre>
                  <p>Nice job, Commander! Your adapter now knows where to look
                    for data. Soon you’ll have an ArrayList of photos filled
                    with the finest astrophotography! </p>
                  <p>Next, you’ll populate the stubbed methods that were added
                    by Android Studio.</p>
                  <p>The first method, <code>getItemCount()</code>, is pretty
                    simple and should be familiar from your work with ListViews
                    or GridViews. </p>
                  <p>The adapter will work out how many items to display. In
                    this case, you want the adapter to show every photo you’ve
                    downloaded from NASA’s API. To do that, add update <code>getItemCount()</code>
                    to the following:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">override</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemCount</span><span
class="hljs-params">()</span></span> = photos.size
</pre>
                  <p>Next, you’re going to exploit the <code>ViewHolder</code>
                    pattern to make an object that holds all your view
                    references.</p>
                  <h2>Velcro For All: Keeping Hold Of Your Views</h2>
                  <p>To create a <strong>PhotoHolder</strong> for your view
                    references, you’ll create a nested class in your adapter.
                    You’ll add it here rather than in a separate class because
                    its behavior is tightly coupled with the adapter. First,
                    import synthetic properties for the recycler view item so
                    you can reference the view properties:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">import</span> kotlinx.android.synthetic.main.recyclerview_item_row.view.*
</pre>
                  <p>Add the following code at the bottom of the RecyclerAdapter
                    class:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-comment">//1</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhotoHolder</span></span>(v: View) : RecyclerView.ViewHolder(v), View.OnClickListener {
  <span class="hljs-comment">//2</span>
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> view: View = v
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> photo: Photo? = <span
class="hljs-literal">null</span>

  <span class="hljs-comment">//3</span>
  init {
    v.setOnClickListener(<span class="hljs-keyword">this</span>)
  }

  <span class="hljs-comment">//4</span>
  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span
class="hljs-title">onClick</span><span class="hljs-params">(v: <span class="hljs-type">View</span>)</span></span> {
    Log.d(<span class="hljs-string">"RecyclerView"</span>, <span class="hljs-string">"CLICK!"</span>)
  }

  <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
    <span class="hljs-comment">//5</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> PHOTO_KEY = <span
class="hljs-string">"PHOTO"</span>
  }
}
</pre>
                  <p>So what did you do here? </p>
                  <ol>
                    <li>Made the class extend RecyclerView.ViewHolder, allowing
                      it to be used as a ViewHolder for the adapter.</li>
                    <li>Added a reference to the lifecycle of the object to
                      allow the ViewHolder to hang on to your View, so it can
                      access the ImageView and TextView as an extension
                      property. Kotlin Android Extensions plugin adds in hidden
                      caching functions and fields so that views are not
                      constantly queried.</li>
                    <li>Initialized the <code>View.OnClickListener</code>.</li>
                    <li>Implemented the required method for <code>View.OnClickListener</code>
                      since ViewHolders are responsible for their own event
                      handling.</li>
                    <li>Added a key for easier reference to the particular item
                      being used to launch your RecyclerView.</li>
                  </ol>
                  <p>You should still have a compiler errors with <code>onBindViewHolder</code>
                    and <code>onCreateViewHolder</code> methods. Change the <code>holder:
                      ?</code> argument on <code>onBindViewHolder</code> to
                    have a type <code>RecyclerAdapter.PhotoHolder</code>.</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">override</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span
class="hljs-params">(holder: <span class="hljs-type">RecyclerAdapter</span>.<span
class="hljs-type">PhotoHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> {
    TODO(<span class="hljs-string">"not implemented"</span>) <span class="hljs-comment">//To change body of created functions use File | Settings | File Templates.</span>
}
</pre>
                  <p>Then add a <code>RecyclerAdapter.PhotoHolder</code> return
                    type to the <code>onCreateViewHolder</code> method and
                    remove the safe call operator (i.e. <code>?</code>) of the
                    <code>parent</code> argument type.</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">override</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateViewHolder</span><span
class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span
class="hljs-type">Int</span>)</span></span>: RecyclerAdapter.PhotoHolder {
    TODO(<span class="hljs-string">"not implemented"</span>) <span class="hljs-comment">//To change body of created functions use File | Settings | File Templates.</span>
 }
</pre>
                  <p>You should now be able to build and run the app again, but
                    it’ll look about the same because you haven’t told the
                    RecyclerView how to associate the PhotoHolder with a view.</p>
                  <h2>Assembling The Pieces</h2>
                  <p>Sometimes there are no ViewHolders available. In this
                    scenario, RecylerView will ask <code>onCreateViewHolder()</code>
                    from RecyclerAdapter to make a new one. You’ll use the item
                    layout — PhotoHolder — to create a view for the ViewHolder.</p>
                  <p>The inflate code could simply be added to <code>onCreateViewHolder()</code>.
                    However, this is a nice opportunity to show a really cool
                    Kotlin feature called <a href="https://kotlinlang.org/docs/reference/extensions.html"
                      target="_blank" sl-processed="1">Extensions</a>. </p>
                  <p>First, add a new Kotlin file named <em>Extensions.kt</em>
                    to the project and then add the following new extension
                    function to the new file:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-function"><span
class="hljs-keyword">fun</span> ViewGroup.<span class="hljs-title">inflate</span><span
class="hljs-params">(<span class="hljs-meta">@LayoutRes</span> layoutRes: <span
class="hljs-type">Int</span>, attachToRoot: <span class="hljs-type">Boolean</span> = <span
class="hljs-literal">false</span>)</span></span>: View {
    <span class="hljs-keyword">return</span> LayoutInflater.from(context).inflate(layoutRes, <span
class="hljs-keyword">this</span>, attachToRoot)
}
</pre>
                  <p>Replace the <code>TODO("not implemented")</code> line
                    between the curly braces in <code>onCreateViewHolder()</code>
                    with the following:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">val</span> inflatedView = parent.inflate(R.layout.recyclerview_item_row, <span
class="hljs-literal">false</span>)
<span class="hljs-keyword">return</span> PhotoHolder(inflatedView)
</pre>
                  <p>Here you inflate the view from its layout and pass it in to
                    a PhotoHolder. The <code>parent.inflate(R.layout.recyclerview_item_row,
                      false)</code> method will execute the new <code>ViewGroup.inflate(...)</code>
                    extension function to inflate the layout.</p>
                  <p>And with that, you’ve made it so the object holds onto
                    those references while it’s recycled, but there are still
                    more pieces to put together before you can launch your
                    rocketship.</p>
                  <p>Start a new activity by replacing the log in ViewHolder’s <code>onClick</code>
                    with this code:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">val</span> context = itemView.context
<span class="hljs-keyword">val</span> showPhotoIntent = Intent(context, PhotoActivity::<span
class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>)</span>
showPhotoIntent.putExtra(PHOTO_KEY, photo)
context.startActivity(showPhotoIntent)
</pre>
                  <p>This grabs the current context of your item view and
                    creates an intent to show a new activity on the screen,
                    passing the photo object you want to show. Passing the
                    context object into the intent allows the app to know what
                    activity it is leaving. </p>
                  <p>Next thing to do is to add this method inside <code>PhotoHolder</code>:
                  </p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-function"><span
class="hljs-keyword">fun</span> <span class="hljs-title">bindPhoto</span><span class="hljs-params">(photo: <span
class="hljs-type">Photo</span>)</span></span> {
  <span class="hljs-keyword">this</span>.photo = photo
  Picasso.with(view.context).load(photo.url).into(view.itemImage)
  view.itemDate.text = photo.humanDate
  view.itemDescription.text = photo.explanation
}
</pre>
                  <p>This binds the photo to the PhotoHolder, giving your item
                    the data it needs to work out what it should show.</p>
                  <p>It also adds the suggested <a href="http://square.github.io/picasso/"
                      target="_blank" title="Picasso" sl-processed="1">Picasso</a>
                    import, which is a library that makes it significantly
                    simpler to get images from a given URL.</p>
                  <p>The last piece of the PhotoHolder assembly will tell it how
                    to show the right photo at the right moment. It’s the
                    RecyclerAdapter’s <code>onBindViewHolder</code>, and it
                    lets you know a new item will be available on screen and the
                    holder needs some data.</p>
                  <p>Add the following code inside the <code>onBindViewHolder()</code>
                    method:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">val</span> itemPhoto = photos[position]
holder.bindPhoto(itemPhoto)
</pre>
                  <p>Here you’re passing in a copy of your ViewHolder and the
                    position where the item will show in your RecyclerView, and
                    calling <code>bindPhoto(...)</code>.</p>
                  <p>And that’s all you needed to do here on the assembly — just
                    use the position where your ViewHolder will appear to grab
                    the photo out of your list, and then pass it to your
                    ViewHolder. </p>
                  <p>Step three of your ignition check protocol is complete!</p>
                  <h2>Countdown And Liftoff: Hooking up the Adapter And
                    RecyclerView</h2>
                  <p>This is the moment you’ve been waiting for, the final stage
                    before blast off! All you need to do is hook your adapter up
                    to your RecyclerView and make sure it retrieves photos when
                    it’s created so you can explore space — in pictures.</p>
                  <p>Open <em>MainActivity.kt</em>, and add this property at
                    the top:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> adapter: RecyclerAdapter
</pre>
                  <p>Next, underneath the assignment of <code>recyclerView.layoutManager</code>,
                    add the following:</p>
                  <pre class="language-kotlin hljs" lang="kotlin">adapter = RecyclerAdapter(photosList)
recyclerView.adapter = adapter
</pre>
                  <p>Here you’re creating the adapter, passing in the
                    constructors it needs and setting it as the adapter for your
                    RecyclerView. </p>
                  <p>Although the adapter is connected, there’s one more thing
                    to do to make sure you don’t have an empty screen.</p>
                  <p>In <code>onStart()</code>, underneath the call to <code>super</code>,
                    add this code:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">if</span> (photosList.size == <span
class="hljs-number">0</span>) {
  requestPhoto()
}
</pre>
                  <p>This adds a check to see if your list is empty, and if yes,
                    it requests a photo.</p>
                  <p>Next, in <code>receivedNewPhoto()</code>, update the
                    method so it looks like the following:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">override</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">receivedNewPhoto</span><span
class="hljs-params">(newPhoto: <span class="hljs-type">Photo</span>)</span></span> {
  runOnUiThread {
    photosList.add(newPhoto)
    adapter.notifyItemInserted(photosList.size)
  }
}
</pre>
                  <p>Here you are informing the recycler adapter that an item
                    was added after the list of photos was updated. </p>
                  <p>Now you’re ready to commence the ignition sequence, er…I
                    mean run the app. </p>
                  <p><em>Run the app</em>, load up the emulator and before long,
                    Galacticon should look something like this:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/7-RecyclerView-Working-281x500.png"
                      alt="7. RecyclerView Working" class="aligncenter size-large wp-image-171028"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/7-RecyclerView-Working-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/7-RecyclerView-Working-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/7-RecyclerView-Working.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <p>That’s not all. Tap on the photo, and you should be greeted
                    with a new activity that brings that item into focus:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/8-Focus-Activity-281x500.png"
                      alt="8. Focus Activity" class="aligncenter size-large wp-image-171029"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/8-Focus-Activity-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/8-Focus-Activity-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/8-Focus-Activity.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <p>But that’s still not all! Try <em>rotating your device or
                      emulator</em> (function + control + F11/F12) and you’ll
                    see the image in full screen glory!</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/9-Landscape-Focus-650x366.png"
                      alt="9. Landscape focus" class="aligncenter size-large wp-image-171030"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/9-Landscape-Focus-650x366.png 650w, https://koenig-media.raywenderlich.com/uploads/2017/09/9-Landscape-Focus-480x270.png 480w, https://koenig-media.raywenderlich.com/uploads/2017/09/9-Landscape-Focus-266x151.png 266w"
                      sizes="(max-width: 650px) 100vw, 650px" width="650" height="366"></p>
                  <p>Depending on the size of the image and your device screen
                    it may look a little distorted, but don’t worry about that.</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/stars_so_beautiful-320x320.png"
                      alt="" class="aligncenter size-medium wp-image-173047" srcset="https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-320x320.png 320w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-250x250.png 250w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful.png 500w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-32x32.png 32w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-50x50.png 50w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-64x64.png 64w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-96x96.png 96w, https://koenig-media.raywenderlich.com/uploads/2017/10/stars_so_beautiful-128x128.png 128w"
                      sizes="(max-width: 320px) 100vw, 320px" width="320" height="320"></p>
                  <p>Congratulations! You have a working RecyclerView and can
                    take your journey amongst the stars.</p>
                  <h2>Taking A Spacewalk: Adding Scrolling support</h2>
                  <p>If you head back to <em>MainActivity</em> on your device
                    and try to scroll down, you’ll notice something is amiss —
                    your RecyclerView isn’t retrieving any new photos.</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/10-Scrolling-Not-Working-281x500.png"
                      alt="10. Scrolling Not Working" class="aligncenter size-large wp-image-171032"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/10-Scrolling-Not-Working-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/10-Scrolling-Not-Working-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/10-Scrolling-Not-Working.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <p>Your RecyclerView is doing exactly as it’s told by showing
                    the contents of <code>photosList</code>. The problem is
                    that the app will only retrieve one photo when you load the
                    app. It has no idea when or how to grab more photos.</p>
                  <p>So next, you’ll retrieve the number of the photos and the
                    last visible photo index while scrolling. Then you’ll check
                    to see if the last photo is visible and if there are no
                    photos already on request. If these are both true, then your
                    app goes and downloads more pretty photos!</p>
                  <p>This patch will require a spacewalk, so break out your
                    spacesuit and get ready for a zero gravity experience.</p>
                  <p>In <em>MainActivity.kt</em>, add this property with custom
                    accessor below to MainActivity:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-keyword">val</span> lastVisibleItemPosition: <span class="hljs-built_in">Int</span>
  <span class="hljs-keyword">get</span>() = linearLayoutManager.findLastVisibleItemPosition()
</pre>
                  <p>This uses your RecyclerView’s LinearLayoutManager to get
                    the index of the last visible item on the screen.</p>
                  <p>Next, you add a method that inserts an <code>onScrollListener</code>
                    to your RecyclerView, so it can get a callback when the user
                    scrolls: </p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setRecyclerViewScrollListener</span><span
class="hljs-params">()</span></span> {
  recyclerView.addOnScrollListener(<span class="hljs-keyword">object</span> : RecyclerView.OnScrollListener() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span
class="hljs-keyword">fun</span> <span class="hljs-title">onScrollStateChanged</span><span
class="hljs-params">(recyclerView: <span class="hljs-type">RecyclerView</span>?, newState: <span
class="hljs-type">Int</span>)</span></span> {
      <span class="hljs-keyword">super</span>.onScrollStateChanged(recyclerView, newState)
      <span class="hljs-keyword">val</span> totalItemCount = recyclerView!!.layoutManager.itemCount
      <span class="hljs-keyword">if</span> (!imageRequester.isLoadingData &amp;&amp; totalItemCount == lastVisibleItemPosition + <span
class="hljs-number">1</span>) {
        requestPhoto()
      }
    }
  })
}
</pre>
                  <p>This function gives the RecyclerView a scroll listener that
                    is triggered by scrolling. During scrolling, the listener
                    retrieves the count of the items in its LayoutManager and
                    calculates the last visible photo index. Once done, it
                    compares these numbers (incrementing the index by 1 because
                    the index begins at 0 while the count begins at 1). If they
                    match and there are no photos already on request, then you
                    request a new photo.</p>
                  <p>Finally, hook everything to the RecyclerView by calling
                    this method from <code>onCreate</code>, just beneath where
                    you set your RecyclerView Adapter:</p>
                  <pre class="language-kotlin hljs" lang="kotlin">setRecyclerViewScrollListener()
</pre>
                  <p>Hop back in the ship (build and run the app again). Scroll
                    down and you should see quite an improvement!</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/11-Scrolling-Update-281x500.png"
                      alt="11. Scrolling Update" class="aligncenter size-large wp-image-171033"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/11-Scrolling-Update-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/11-Scrolling-Update-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/11-Scrolling-Update.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <p>Excellent work, your RecyclerView now updates to show the
                    latest photo requested by your app. The great thing is that
                    <code>receivedNewPhoto()</code> handles most of the work
                    because you told it to notify your adapter about new items.
                  </p>
                  <p>That earns an intergalactic thumbs up for upcycling code!</p>
                  <h2>Layout Changes</h2>
                  <p>Now that your RecyclerView is up and running, it’s time to
                    trick out your spaceship. </p>
                  <p>Wouldn’t it be cool if your RecyclerView could change its
                    layout? Good news: RecyclerView’s item positioning is
                    separated into a layout manager.</p>
                  <p>Add a property for a <em>GridLayoutManager</em> to the top
                    of <em>MainActivity.kt</em>:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> gridLayoutManager: GridLayoutManager
</pre>
                  <p>Note that GridLayoutManager is a built-in layout manager,
                    but it could just as easily be custom. </p>
                  <p>In <code>onCreate()</code>, initialize the LayoutManager
                    below the existing Linear Layout Manager:</p>
                  <pre class="language-kotlin hljs" lang="kotlin">gridLayoutManager = GridLayoutManager(<span
class="hljs-keyword">this</span>, <span class="hljs-number">2</span>)
</pre>
                  <p>Just like you did with the previous LayoutManager, you pass
                    in the context the manager will appear in, but unlike the
                    former, it takes an integer parameter. In this case, you’re
                    setting the number of columns the grid will have.</p>
                  <p>Add this method to MainActivity:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">changeLayoutManager</span><span
class="hljs-params">()</span></span> {
  <span class="hljs-keyword">if</span> (recyclerView.layoutManager == linearLayoutManager) {
    <span class="hljs-comment">//1</span>
    recyclerView.layoutManager = gridLayoutManager
    <span class="hljs-comment">//2</span>
    <span class="hljs-keyword">if</span> (photosList.size == <span class="hljs-number">1</span>) {
      requestPhoto()
    }
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">//3</span>
    recyclerView.layoutManager = linearLayoutManager
  }
}
</pre>
                  <p>This code checks to see what LayoutManager your
                    RecyclerView is using, and then: </p>
                  <ol>
                    <li>If it’s using the LinearLayoutManager, it swaps in the
                      GridLayoutManager</li>
                    <li>It requests a new photo if your grid layout only has one
                      photo to show</li>
                    <li>If it’s using the GridLayoutManager, it swaps in the
                      LinearLayoutManager</li>
                  </ol>
                  <p>Next, you need to make some changes to <code>lastVisibleItemPosition</code>
                    to help it handle the new LayoutManager. Make it look like
                    the following:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-keyword">val</span> lastVisibleItemPosition: <span class="hljs-built_in">Int</span>
  <span class="hljs-keyword">get</span>() = <span class="hljs-keyword">if</span> (recyclerView.layoutManager == linearLayoutManager) {
      linearLayoutManager.findLastVisibleItemPosition()
    } <span class="hljs-keyword">else</span> {
      gridLayoutManager.findLastVisibleItemPosition()
    }
</pre>
                  <p>Here you ask the RecyclerView to tell you what its
                    LayoutManager is, then you ask that LayoutManager to tell
                    you the position of the last visible item.</p>
                  <p>To use the grid layout, make use of the Options menu button
                    that is already available in the app. Add the following code
                    underneath <code>onStart()</code>:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">override</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onOptionsItemSelected</span><span
class="hljs-params">(item: <span class="hljs-type">MenuItem</span>)</span></span>: <span
class="hljs-built_in">Boolean</span> {
  <span class="hljs-keyword">if</span> (item.itemId == R.id.action_change_recycler_manager) {
    changeLayoutManager()
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item)
}
</pre>
                  <p>This checks the ID of the item tapped in the menu, then
                    works out what to do about it. In this case, there should
                    only be one ID that will match up, effectively telling the
                    app to go away and rearrange the RecyclerView’s
                    LayoutManager.</p>
                  <p>And just like that, you’re ready to go! Load up the app and
                    tap the button at the top right of the screen, and you’ll
                    begin to see the stars shift:</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/12-Grid-Layout-281x500.png"
                      alt="12. Grid Layout" class="aligncenter size-large wp-image-171037"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/12-Grid-Layout-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/12-Grid-Layout-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/12-Grid-Layout.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <h2>Star Killer</h2>
                  <p>Sometimes you’ll see things you just don’t like the look
                    of, perhaps a galaxy far, far away that has fallen to the
                    dark side or a planet that is prime for destruction. How
                    could you go about killing it with a swipe?</p>
                  <p>Luckily, Android engineers have provided a useful class
                    named <code>ItemTouchHelper</code> that gives you easy
                    swipe behavior. Creating and attaching this to a
                    RecyclerView requires just a few lines of code.</p>
                  <p>In <em>MainActivity.kt</em>, underneath <code>setRecyclerViewScrollListener()</code>
                    add the following method:</p>
                  <pre class="language-kotlin hljs" lang="kotlin"><span class="hljs-keyword">private</span> <span
class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setRecyclerViewItemTouchListener</span><span
class="hljs-params">()</span></span> {

  <span class="hljs-comment">//1</span>
  <span class="hljs-keyword">val</span> itemTouchCallback = <span class="hljs-keyword">object</span> : ItemTouchHelper.SimpleCallback(<span
class="hljs-number">0</span>, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span
class="hljs-keyword">fun</span> <span class="hljs-title">onMove</span><span class="hljs-params">(recyclerView: <span
class="hljs-type">RecyclerView</span>, viewHolder: <span class="hljs-type">RecyclerView</span>.<span
class="hljs-type">ViewHolder</span>, viewHolder1: <span class="hljs-type">RecyclerView</span>.<span
class="hljs-type">ViewHolder</span>)</span></span>: <span class="hljs-built_in">Boolean</span> {
      <span class="hljs-comment">//2</span>
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
    }

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span
class="hljs-keyword">fun</span> <span class="hljs-title">onSwiped</span><span class="hljs-params">(viewHolder: <span
class="hljs-type">RecyclerView</span>.<span class="hljs-type">ViewHolder</span>, swipeDir: <span
class="hljs-type">Int</span>)</span></span> {
      <span class="hljs-comment">//3</span>
      <span class="hljs-keyword">val</span> position = viewHolder.adapterPosition
      photosList.removeAt(position)
      recyclerView.adapter.notifyItemRemoved(position)
    }
  }

  <span class="hljs-comment">//4</span>
  <span class="hljs-keyword">val</span> itemTouchHelper = ItemTouchHelper(itemTouchCallback)
  itemTouchHelper.attachToRecyclerView(recyclerView)
}
</pre>
                  <p>Let’s go through this step by step:</p>
                  <ol>
                    <li>You create the callback and tell it what events to
                      listen for. It takes two parameters, one for drag
                      directions and one for swipe directions, but you’re only
                      interested in swipe, so you pass 0 to inform the callback
                      not to respond to drag events.</li>
                    <li>You return false in <code>onMove</code> because you
                      don’t want to perform any special behavior here.</li>
                    <li><code>onSwiped</code> is called when you swipe an item
                      in the direction specified in the <code>ItemTouchHelper</code>.
                      Here, you request the <code>viewHolder</code> parameter
                      passed for the position of the item view, then you remove
                      that item from your list of photos. Finally, you inform
                      the RecyclerView adapter that an item has been removed at
                      a specific position.</li>
                    <li>You initialize the <code>ItemTouchHelper</code> with
                      the callback behavior you defined, and then attach it to
                      the RecyclerView.</li>
                  </ol>
                  <p>Add the method to the activity’s <code>onCreate()</code>,
                    underneath <code>setRecyclerViewScrollListener()</code>:</p>
                  <pre class="language-kotlin hljs" lang="kotlin">setRecyclerViewItemTouchListener()
</pre>
                  <p>This will attach the <code>ItemTouchListener</code> to the
                    RecyclerView using the code you just wrote.</p>
                  <p><em>Run the app</em> once more and <em>swipe across</em>
                    one of your items, you should see it begin to move. If you
                    swipe the item far enough, you should see it animate and
                    vanish. If other items are visible, then they will
                    reorganize themselves to cover the hole. How cool is that?</p>
                  <p><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/13-Swipe-Away-Item-281x500.png"
                      alt="13 Swipe Away Item" class="aligncenter size-large wp-image-171038"
                      srcset="https://koenig-media.raywenderlich.com/uploads/2017/09/13-Swipe-Away-Item-281x500.png 281w, https://koenig-media.raywenderlich.com/uploads/2017/09/13-Swipe-Away-Item-180x320.png 180w, https://koenig-media.raywenderlich.com/uploads/2017/09/13-Swipe-Away-Item.png 1080w"
                      sizes="(max-width: 281px) 100vw, 281px" width="281" height="500"></p>
                  <h2>Where To Go From Here?</h2>
                  <div class="inline-video-ad" id="sub-banner-inline">
                    <div class="inline-video-ad-wrapper"> <a href="https://videos.raywenderlich.com/courses"
                        sl-processed="1">
                        <div class="col-wrapper">
                          <div class="col"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/video-yeti@2x.png"
                              alt="yeti holding videos"> </div>
                          <div class="col large-col"> <span>Want to learn even
                              faster? Save time with our <span>video courses</span></span>
                          </div>
                        </div>
                      </a> </div>
                  </div>
                  <p>Nice job! You’ve been on quite an adventure, but now it’s
                    time to head back to Earth and think about what you’ve
                    learned. </p>
                  <ul>
                    <li> You’ve created a RecyclerView and all the components it
                      needs, such as a LayoutManager, an Adapter and a
                      ViewHolder. </li>
                    <li> You’ve updated and removed items from an Adapter. </li>
                    <li> You’ve added some cool features like changing layouts
                      and adding swipe functionality. </li>
                  </ul>
                  <p>Above all, you’ve experienced how separation of components
                    — a key attribute of RecyclerViews — provides so much
                    functionality with such ease. If you want your collections
                    to be flexible and provide some excitement, then look no
                    further than the all-powerful RecyclerView.</p>
                  <p>The final project for this tutorial is available <a href="https://koenig-media.raywenderlich.com/uploads/2017/09/galacticon-final.zip"
                      sl-processed="1">here</a>.</p>
                  <p>If you want to learn more about RecyclerViews then check
                    out the <a href="http://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"
                      target="_blank" title="Android documentation" sl-processed="1">Android
                      documentation</a> to see what it can do. Take a look at
                    the <a href="http://developer.android.com/tools/support-library/features.html#v7-recyclerview"
                      target="_blank" title="support library" sl-processed="1">support
                      library</a> for RecyclerViews to learn how to use it on
                    older devices. If you want to make them fit with the
                    material design spec then check out the <a href="https://www.google.com/design/spec/components/lists.html"
                      target="_blank" title="list component" sl-processed="1">list
                      component</a> design specification.</p>
                  <p>Join us in the forums to discuss this tutorial and your
                    findings as you work with RecylerViews!</p>
                  <p>Until next time, space traveler! </p>
                </div>
                <script>
              jQuery.expr[":"].icontains = jQuery.expr.createPseudo(function (arg) {
                return function (elem) {
                  return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0;        
                };
              });
              jQuery(document).ready(function() {
                var finalHeader = jQuery(".content-wrapper h2:icontains('where to go from here')");
                if (finalHeader.length === 0) {
                  finalHeader = jQuery(".content-wrapper h2:last");
                }
                if (finalHeader.length === 0) {
                  return;
                }
                var inlineAd = jQuery('#sub-banner-inline');
                finalHeader.after(inlineAd);
              });
            </script>
                <div id="credit-module" class="content-wrapper">
                  <header>
                    <h2>Team</h2>
                    <p>Each tutorial at www.raywenderlich.com is created by a
                      team of dedicated developers so that it meets our high
                      quality standards. The team members who worked on this
                      tutorial are: </p>
                  </header>
                  <div id="tutorial-editors">
                    <ul>
                      <li> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ecf3313d6dc0db1568a252b8b20e1bd0%281%29.jpg"
                          '="" width="30" height="30">
                        <div>Author<br>
                          <a href="https://www.raywenderlich.com/u/rbiresch" sl-processed="1">Rod
                            Biresch</a> </div>
                      </li>
                      <li> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/89cae999b8159820689cb97cc2045ae1.jpg"
                          '="" width="30" height="30">
                        <div>Final Pass Editor<br>
                          <a href="https://www.raywenderlich.com/u/macsimus" sl-processed="1">Joe
                            Howard</a> </div>
                      </li>
                    </ul>
                  </div>
                </div>
                <footer>
                  <div class="social-links" style="border-bottom: none;">
                    <ul>
                      <li class="twitter" style="float: left;">
                        <div id="tweetbutton170075m" class="tw_button" style="margin-bottom:10px;"><iframe
                            id="twitter-widget-1" scrolling="no" allowtransparency="true"
                            class="twitter-share-button twitter-share-button-rendered twitter-tweet-button"
                            title="Twitter Tweet Button" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/tweet_button.9c00c8ca14a8618c4db8e2c43139b138.en%281%29.html"
                            style="position: static; visibility: visible; width: 60px; height: 20px;"
                            data-url="https://www.raywenderlich.com/170075/android-recyclerview-tutorial-kotlin"
                            frameborder="0"></iframe></div>
                        <br>
                      </li>
                      <li class="facebook iframe-link" style="position: relative;top: 0px;left: 11px;display: block; float: left;">
                        <iframe src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/like%281%29.html"
                          allowtransparency="true" scrolling="no" style="width: 74px; height: 20px;"
                          frameborder="0"></iframe> <br>
                      </li>
                    </ul>
                  </div>
                </footer>
              </article>
              <div id="author-information" class="clearfix"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/arrow@2x.png"
                  id="arrow" width="40" height="21">
                <div class="author-photo"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ecf3313d6dc0db1568a252b8b20e1bd0.jpg"
                    alt="" class="user-avatar" width="100" height="100"> </div>
                <div class="author-meta"> <a href="https://www.raywenderlich.com/u/rbiresch"
                    sl-processed="1">Rod Biresch</a>
                  <p class="bio">Rod <a href="https://biresch.com/" sl-processed="1">Biresch</a>
                    started his professional career in hardware as an Integrate
                    Circuit (IC) layout designer. He found more creative
                    opportunities in developing software and has been coding
                    since the 1990s. Rod lives in the Philadelphia area and is a
                    consultant for <a href="https://chariotsolutions.com/" sl-processed="1">Chariot
                      Solutions</a>. He also serves as an Advisory Board member
                    for the <a href="http://www.westerndesigncenter.com/wdc/" sl-processed="1">Western
                      Design Center</a>. Away from his day job, Rod is an avid
                    golfer, loves to travel and likes to tinker with <a href="http://wdc65xx.com/"
                      sl-processed="1">65xx technology</a>.</p>
                </div>
                <ul class="follow-links">
                  <li class="twitter"><a href="http://www.twitter.com/rbiresch"
                      target="_block" sl-processed="1">Follow Rod Biresch on
                      Twitter</a></li>
                </ul>
              </div>
              <section id="comments">
                <div class="excerpt" style="display:none">Learn how to display
                  datasets of large or unknown size in this Android RecyclerView
                  tutorial using Kotlin!</div>
                <div id="discourse-comments" style="padding:10px 30px 30px 30px"><iframe
                    src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/comments.html"
                    id="discourse-embed-frame" scrolling="no" width="100%" height="47px"
                    frameborder="0"></iframe></div>
                ​
                <script type="text/javascript">
            DiscourseEmbed = { discourseUrl: "https://forums.raywenderlich.com/",
                               discourseEmbedUrl: "https://www.raywenderlich.com/170075/android-recyclerview-tutorial-kotlin",
                               discourseUserName: "rbiresch"};
            (function() {
              var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
              d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';
              (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
            })();
        </script> </section>
            </div>
          </div>
        </div>
        <section id="secondary">
          <h1 id="other-items-of-interest">Other Items of Interest</h1>
          <section id="video-subscription-ad" class="rw-module"> <a href="https://videos.raywenderlich.com/courses"
              id="sub-banner-sidebar" sl-processed="1">
              <div class="coin-holder"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/subscription-coin-bg-3@2x.png"
                  class="background-coin" alt=""> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/subscription-coin-bg-2@2x.png"
                  class="background-coin" alt=""> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/subscription-coin-bg-1@2x.png"
                  class="background-coin" alt=""> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/subscription-coin-base@2x.png"
                  alt=""> </div>
              <h2><span>Save time.</span><br>
                Learn more with our video courses.</h2>
              <button>Get Started!</button> </a> </section>
          <section id="newsletter-signup" class="rw-module">
            <header>
              <h1>raywenderlich.com Weekly</h1>
            </header>
            <div> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ia_tilted@2x.png"
                width="109" height="139">
              <p>Sign up to receive the latest tutorials from raywenderlich.com
                each week, and receive a <em>free epic-length tutorial</em> as
                a bonus!</p>
              <img src="https://www.raywenderlich.com/170075/android-recyclerview-tutorial-kotlin">
              <form novalidate="" target="_blank" class="validate" name="mc-embedded-subscribe-form"
                id="mc-embedded-subscribe-form" method="post" action="https://raywenderlich.us1.list-manage.com/subscribe/post?u=1bc8e630b1599df629818e59b&amp;id=83b6edc87f">
                <input id="mce-NAME" class="required" name="NAME" value="" placeholder="Your full name"
                  type="text"> <input id="mce-EMAIL" class="required email" name="EMAIL"
                  value="" placeholder="Your best email" type="email"> <input class="button"
id="mc-embedded-subscribe" name="subscribe" value="Sign Up!" type="submit"> </form>
            </div>
          </section>
          <section id="site-ads">
            <h1>Advertise with Us!</h1>
            <div id="bsap_1274837" class="bsap bsap_1274837" data-serve="CV7IEKV">
              <style type="text/css">
div.bsap_1274837{width:100%;display:block;}div.bsap_1274837 a{width:300px;}div.bsap_1274837 a img{padding:0;}div.bsap_1274837 a em{font-style:normal;}div.bsap_1274837 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;margin-bottom:10px;}
div.bsap_1274837 img{border:0;clear:right;}
div.bsap_1274837 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1274837 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1274837 a{line-height:100%;}div.bsap_1274837 a.adhere{width:300px;height:250px;line-height:2000%;}html>body div.bsap_1274837 a.adhere{width:298px;height:248px;}div.bsap_1274837 img.s{height:0;width:0;}div.bsap_1274837{line-height:9px;}div.bsap_1274837 .bsap_adhere a{height:19px !important;width:298px !important;font-size:10px;background:#f1f1f1;border:1px solid #e1e1e1;border-top:none;border-radius: 0 0 2px 2px;line-height:16px;}.bsap_backfillframe{border:0;}
</style><!--INLINE-->
              <script type="text/javascript" id="auto_2" class="ignoreme"><!--
google_ad_client = "ca-pub-0989544819893200";
/* Premium Sidebar */
google_ad_slot = "7993594553";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script> <script type="text/javascript" id="auto_3" class="ignoreme" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/show_ads.js"></script>
              <script data-capture-write="false" type="text/javascript"> if (typeof(_bsap_serving_callback) !== 'undefined') _bsap_serving_callback(20055, 'CV7IEKV', ''); </script>
              <script data-capture-write="false" type="text/javascript"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
            <!-- End BuySellAds Zone Code -->
            <!-- BuySellAds.com Zone Code -->
            <div id="smallads">
              <div id="bsap_1260352" class="bsap bsap_1260352" data-serve="CV7I55V">
                <style type="text/css">
div.bsap_1260352{width:100%;display:block;}div.bsap_1260352 a{width:125px;}div.bsap_1260352 a img{padding:0;}div.bsap_1260352 a em{font-style:normal;}div.bsap_1260352 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;}
div.bsap_1260352 img{border:0;clear:right; }
div.bsap_1260352 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1260352 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1260352 a{line-height:100%;}div.bsap_1260352 a.adhere{width:125px;height:125px;line-height:1000%;}html>body div.bsap_1260352 a.adhere{width:123px;height:123px;}div.bsap_1260352 img.s{height:0;width:0;}
</style><a href="https://srv.buysellads.com/ads/click/x/GTND42QJCYYDLK37CAYLYKQMC6SDT2JLCWAI5Z3JCWYIKK3ECTSDP23KC6BI42JEF67I6K3EHJNCLSIZ"
                  class="ad0 odd " title="Chat and WebRTC Video calls SDK for your iOS apps"
                  id="bsa_7266030" target="_blank" rel="nofollow" sl-processed="1">
                  <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/7266030-1485249161.png"
                    alt="" width="125" height="125"></a><!-- no ad --><a href="https://srv.buysellads.com/ads/click/x/GTND42QJCYYDLK37CAYLYKQMC6SDTKQNCESDTZ3JCWYIKKJLCWSIC27KC6BI42JEF67I6K3EHJNCLSIZ"
                  class="ad2  even" title="Visual Studio App Center" id="bsa_7820947"
                  target="_blank" rel="nofollow" sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/7376dce3bc61fdf99267e09ffc8e50ea-1515427426.png"
                    alt="" width="125" height="125"></a><!-- no ad --><!-- no ad --><!-- no ad -->
                <a href="http://www.buysellads.com/buy/detail/45973/zone/1260352?utm_source=site_45973&amp;utm_medium=website&amp;utm_campaign=imagetext&amp;utm_content=zone_1260352"
                  class="adhere" sl-processed="1">Advertise Here</a>
                <script data-capture-write="false" type="text/javascript"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
              <div style="clear:both"></div>
            </div>
            <div id="razeware_ads"> <a href="http://pragmaconference.com/" target="_blank"
                class="razewareads" sl-processed="1"><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/PragmaConf16_banner_125x125.png"
                  alt="PragmaConf 2016" style="margin-left:15px;" width="125" height="125"></a>
              <a href="http://www.fivepackcreative.com/alt-u/" target="_blank" class="razewareads"
                sl-processed="1"><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/altu.png"
                  alt="Come check out Alt U" style="margin-left:15px" width="125"
                  height="125"></a> </div>
            <!-- End BuySellAds.com Zone Code --> <a href="http://www.raywenderlich.com/advertise"
              class="rw-button2" id="advertise-with-us" sl-processed="1">Advertise
              Here!</a> </section>
          <section id="our-books" class="rw-module">
            <header>
              <h1>Our Books</h1>
            </header>
            <div>
              <ul class="books">
                <li> <a href="https://store.raywenderlich.com/products/ios-11-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/i11t@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/ios-apprentice"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ia1234@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/dbg@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/rxswift"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/rxs@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/unity-games-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ua@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/swift-apprentice"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/sa@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/core-data-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/cdt@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/tvos-apprentice"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/tvt@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/watchos-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/w2t@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/ios-10-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/i10t@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/3d-apple-games-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/igt2@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/ios-animations-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/iat@2x.png"
                      width="110" height="142"> </a> </li>
                <li> <a href="https://store.raywenderlich.com/products/2d-apple-games-by-tutorials"
                    sl-processed="1"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/igt1@2x.png"
                      width="110" height="142"> </a> </li>
              </ul>
            </div>
          </section>
          <section id="tutorial-team" class="rw-module">
            <header>
              <h1>Our Team</h1>
            </header>
            <div>
              <h2>Video Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#bbreshears" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/4f21a6980098474d4a476f2ac309b512.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#vsharma" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/abbd3b3e6215b17318c3e41b268a49e2.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#dsingh" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/503fd6c2c8e4e3979aecb46e3559c94a.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_video-team"
                  sl-processed="1">20 total!</a></p>
              <h2>iOS Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#jgreene" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/7fe924c61368e35b5e90f2fbd026a51d.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#egarcia" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/e38a6a0482e5e6e2b5ba3c16d9bc3f6a.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#kcolligan" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/50e03b67445a473cd9ac475701105dd2.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_tut-ios"
                  sl-processed="1">74 total!</a></p>
              <h2>Android Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#rbiresch" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/ecf3313d6dc0db1568a252b8b20e1bd0.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#kmoore" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/10c4bad10aeb3312958221c9695e55f7.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#dpislaru" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/279a8ad4c7e1eebf07d649962d1baafb.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_tut-android"
                  sl-processed="1">30 total!</a></p>
              <h2>Unity Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#tflint" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/1f9ea83e68f6595c83db941cc521af21.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#jfisher" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/4130f53141ff249692b920a0721b100e.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#sduffy" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/bb1d2d919f229fd2d584ead383f5391a.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_tut-unity"
                  sl-processed="1">14 total!</a></p>
              <h2>Articles Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#wlincoln" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/cb4c3a88248bece0aab4d7990466e1ec.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#abello" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/cae3130e33c8ca88fdf5cdd8c09568e1.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#ttran" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/e6b0f74f6b0294fed6edb668acab8c2c.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_article"
                  sl-processed="1">13 total!</a></p>
              <h2>Resident Authors Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#jalamparambil"
                    sl-processed="1"><img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/31272c98a578c59a4671fb94a999f9e7.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#rlucas" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/a33664187e29e0f9f66a185fb011b29b.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#afurrow" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/0ebf471a3ae8df42a84f93a7efbbdbd0.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_resident-authors"
                  sl-processed="1">29 total!</a></p>
              <h2>Podcast Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/rw-logo_250.png"
                      width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/2e9a29f412569b0a1c22e5e74ef99d89.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#dfreeman" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/8c38070338216629f47913bde3c9e726.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_podcast-team"
                  sl-processed="1">7 total!</a></p>
              <h2>Recruitment Team</h2>
              <ul>
                <li><a href="https://www.raywenderlich.com/about#ekerckhove" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/86316682b3c7d8d6b0cd50a0d5e6a6ee.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#alockett" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/8d0d9afe50fda9772c36a69656f92f47.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
                <li><a href="https://www.raywenderlich.com/about#bmorrow" sl-processed="1"><img
                      src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/d32cf76b0815a8e4941e6284089c8b58.jpg"
                      alt="" class="user-avatar" width="100" height="100"></a></li>
              </ul>
              <p>... <a href="https://www.raywenderlich.com/about#abt_recruitment-team"
                  sl-processed="1">9 total!</a></p>
            </div>
          </section>
        </section>
      </div>
    </div>
    <script type="text/javascript" id="">var _dcq=_dcq||[],_dcs=_dcs||{};_dcs.account="2640130";(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="//tag.getdrip.com/2640130.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})();</script>
    <footer id="main-footer">
      <div class="block">
        <div class="top-row"> <a href="https://www.raywenderlich.com/" class="logo-mark"
            aria-label="Home" sl-processed="1"></a>
          <ul class="footer-nav">
            <li><a href="https://www.raywenderlich.com/104320/open-call-for-writers-and-editors"
                sl-processed="1">Write For Us</a></li>
            <li><a href="http://rwdevcon.com/" sl-processed="1">RWDevCon</a></li>
            <li><a href="https://store.raywenderlich.com/faq" sl-processed="1">FAQ</a></li>
            <li><a href="https://www.raywenderlich.com/advertise" sl-processed="1">Advertise</a></li>
            <li><a href="https://www.raywenderlich.com/contact" sl-processed="1">Contact</a></li>
          </ul>
          <ul class="social-media-links">
            <li><a href="https://www.facebook.com/raywenderlich" aria-label="Follow us on facebook"
                sl-processed="1"><i class="icon-facebook-icon" aria-hidden="true"></i><span>12k+
                  Facebook likes</span></a></li>
            <li><a href="https://twitter.com/rwenderlich" aria-label="Follow us on Twitter"
                sl-processed="1"><i class="icon-twitter-icon" aria-hidden="true"></i><span>57k+
                  Twitter followers</span></a></li>
          </ul>
        </div>
        <div class="middle-row">
          <div class="col screencast-col">
            <div class="img-holder"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/subscribe-footer@2x.png"
                alt=""> </div>
            <div class="content-holder"> <span>Screencasts &amp; Video
                Tutorials</span> <a class="no-link">Join over 4,000
                subscribers!</a>
              <p>Keep your Swift &amp; iOS skills up-to-date via hands-on
                tutorials — in video form! The largest collection of Swift &amp;
                iOS video tutorials anywhere.</p>
              <a class="cta-to-subscribe" href="https://store.raywenderlich.com/products/subscription"
                sl-processed="1">Learn more</a> </div>
          </div>
          <div class="col newsletter-col">
            <div class="img-holder"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/image-rwweekly@2x.png"
                alt="Ray Wenderlich Weekly Development Newsletter"> </div>
            <div class="content-holder"> <span>Join 70,000+ Developers</span> <a>raywenderlich.com
                weekly</a>
              <p>Sign up to receive the latest tutorials from raywenderlich.com
                each week, and receive a free epic-length tutorial as a bonus!</p>
              <form action="https://raywenderlich.us1.list-manage.com/subscribe/post?u=1bc8e630b1599df629818e59b&amp;id=83b6edc87f"
                method="post" class="newsletter-signup-footer validate" id="mc-embedded-subscribe-form"
                name="mc-embedded-subscribe-form" target="_blank" novalidate="">
                <input id="mce-EMAIL" name="EMAIL" placeholder="EMAIL" type="email">
                <button type="submit">Sign up</button> </form>
            </div>
          </div>
        </div>
      </div>
      <div id="gearbox">
        <div class="block">
          <div id="left-gears"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_small.svg"
              class="clockwise-motion small-gear gears" id="gear1" alt=""> <img
              src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_medium.svg"
              class="counter-clockwise-motion  medium-gear gears" id="gear2" alt="">
            <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_large.svg"
              class="clockwise-motion large-gear gears" id="gear3" alt=""> <img
              src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_medium.svg"
              class="counter-clockwise-motion medium-gear gears" id="gear4" alt="">
          </div>
          <ul class="footer-small-links">
            <li style="margin:0"> <a href="https://help.raywenderlich.com/privacy"
                target="_blank" style="font-size:15px;opacity: 1;" sl-processed="1"><span>Privacy
                  Policy<i style="margin: 0 9px;">·</i></span></a></li>
            <li style="margin:0"> <a href="https://help.raywenderlich.com/terms-of-service"
                target="_blank" style="font-size:15px;opacity: 1;" sl-processed="1"><span>Terms
                  of Service<i style="margin: 0 9px;">·</i></span></a> </li>
            <li style="margin:0"> <span style="font-size: 15px;">© 2018
                Razeware LLC.</span> </li>
          </ul>
          <div id="right-gears"> <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_small.svg"
              class="clockwise-motion small-gear gears" id="gear5" alt=""> <img
              src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_medium.svg"
              class="counter-clockwise-motion  medium-gear gears" id="gear6" alt="">
            <img src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_large.svg"
              class="clockwise-motion large-gear gears" id="gear7" alt=""> <img
              src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/gear_medium.svg"
              class="counter-clockwise-motion medium-gear gears" id="gear8" alt="">
          </div>
        </div>
      </div>
    </footer>
    <!--
                                               _           _ _      _                                                   | |         | (_)    | |          _ __ __ _ _   _  __      _____ _ __   __| | ___ _ __| |_  ___| |__       | '__/ _` | | | | \ \ /\ / / _ \ '_ \ / _` |/ _ \ '__| | |/ __| '_ \      | | | (_| | |_| |  \ V  V /  __/ | | | (_| |  __/ |  | | | (__| | | |     |_|  \__,_|\__, |   \_/\_/ \___|_| |_|\__,_|\___|_|  |_|_|\___|_| |_|                 __/ |                                                                    |___/                                                         -->
    <script type="text/javascript" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/widgets.js"></script>
    <script type="text/javascript" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/highlight.pack.js"></script>
    <script type="text/javascript" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/code_highlighting.js"></script>
    <script type="text/javascript" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/countdown.js"></script>
    <script type="text/javascript" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/wp-embed.min.js"></script>
    <script type="text/javascript">var _merchantSettings=_merchantSettings || [];_merchantSettings.push(['AT', '11ld4k']);(function(){var autolink=document.createElement('script');autolink.type='text/javascript';autolink.async=true; autolink.src='https://autolinkmaker.itunes.apple.com/js/itunes_autolinkmaker.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(autolink, s);})();</script>
    <script>
			if (jQuery.browser.msie) { jQuery("html").addClass("msie"); }
			if (typeof window.chrome === "object") { jQuery("html").addClass("chrome"); }
		</script>
    <div class="swiftype-widget">
      <div class="autocomplete" style="position: absolute; z-index: 9999; top: 45px; left: 0px; width: 98px; display: none;">
        <ul>
        </ul>
      </div>
    </div>
    <iframe scrolling="no" allowtransparency="true" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/widget_iframe.9c00c8ca14a8618c4db8e2c43139b138.html"
      style="display: none;" frameborder="0"></iframe><iframe src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/saved_resource.html"
      id="DMGlobalUserIdetifierIFRAME" name="DMGlobalUserIdetifierIFRAME" style="display: none;"
      width="1" height="1"></iframe>
    <div id="fb-root" class=" fb_reset">
      <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">
        <div><iframe name="fb_xdm_frame_https" allowtransparency="true" allowfullscreen="true"
            scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame"
            tabindex="-1" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/lY4eZXm_YWu.html"
            style="border: none;" frameborder="0"></iframe></div>
      </div>
      <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">
        <div></div>
      </div>
    </div>
    <div id="onesignal-bell-container" class="onesignal-bell-container onesignal-reset onesignal-bell-container-bottom-right">
      <div id="onesignal-bell-launcher" class="onesignal-bell-launcher onesignal-bell-launcher-md onesignal-bell-launcher-bottom-right onesignal-bell-launcher-theme-default onesignal-bell-launcher-active">
        <div class="onesignal-bell-launcher-button"><svg class="onesignal-bell-svg"
            xmlns="http://www.w3.org/2000/svg" width="99.7" height="99.7" viewBox="0 0 99.7 99.7"
            style="filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));; -webkit-filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));;"><circle
              class="background" cx="49.9" cy="49.9" r="49.9" style="fill: rgb(0, 104, 55);"></circle><path
              class="foreground" d="M50.1 66.2H27.7s-2-.2-2-2.1c0-1.9 1.7-2 1.7-2s6.7-3.2 6.7-5.5S33 52.7 33 43.3s6-16.6 13.2-16.6c0 0 1-2.4 3.9-2.4 2.8 0 3.8 2.4 3.8 2.4 7.2 0 13.2 7.2 13.2 16.6s-1 11-1 13.3c0 2.3 6.7 5.5 6.7 5.5s1.7.1 1.7 2c0 1.8-2.1 2.1-2.1 2.1H50.1zm-7.2 2.3h14.5s-1 6.3-7.2 6.3-7.3-6.3-7.3-6.3z"
              style=""></path><ellipse class="stroke" cx="49.9" cy="49.9" rx="37.4"
              ry="36.9" style=""></ellipse></svg></div>
        <div class="onesignal-bell-launcher-badge" style=""></div>
        <div class="onesignal-bell-launcher-message">
          <div class="onesignal-bell-launcher-message-body">Click to subscribe
            to notifications</div>
        </div>
        <div class="onesignal-bell-launcher-dialog" style="filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));; -webkit-filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));;">
          <div class="onesignal-bell-launcher-dialog-body"></div>
        </div>
      </div>
    </div>
    <iframe id="rufous-sandbox" scrolling="no" allowtransparency="true" allowfullscreen="true"
      style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;"
      title="Twitter analytics iframe" src="./Android%20RecyclerView%20Tutorial%20with%20Kotlin_files/saved_resource%281%29.html"
      frameborder="0"></iframe>
  </body>
</html>
