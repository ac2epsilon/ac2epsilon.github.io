<!DOCTYPE html>
<!-- saved from url=(0073)https://developer.android.com/topic/libraries/architecture/lifecycle.html -->
<html itemscope="" itemtype="http://schema.org/Article" class="gr__developer_android_com"
  lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">
    <meta content="IE=edge" http-equiv="X-UA-Compatible">
    <script async="" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/async-ads.js"></script>
    <script type="text/javascript" async="" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/linkid.js"></script>
    <script async="" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/analytics.js"></script>
    <script type="text/javascript" async="" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/recaptcha__en.js"></script>
    <script>var a=window.devsite||{};window.devsite=a;a.readyCallbacks=[];window.devsite.readyCallbacks=a.readyCallbacks;a.ready=function(b){a.readyCallbacks.push(b)};window.devsite.ready=a.ready;
</script> <meta name="xsrf_token" content="YCSfQIdAF0wAoOd93UcwUN7rjfnA1b4JeY-lslPZ1K06MTUxNjgwNDI3NzQ1MzAzMA">
    <link rel="canonical" href="https://developer.android.com/topic/libraries/architecture/lifecycle.html">
    <link rel="alternate" href="https://developer.android.com/topic/libraries/architecture/lifecycle.html"
      hreflang="en">
    <link rel="alternate" href="https://developer.android.google.cn/topic/libraries/architecture/lifecycle.html"
      hreflang="en-cn">
    <link rel="alternate" href="https://developer.android.com/topic/libraries/architecture/lifecycle.html"
      hreflang="x-default">
    <link rel="shortcut icon" href="https://developer.android.com/_static/0cbca55952/images/android/favicon.png">
    <link rel="apple-touch-icon" href="https://developer.android.com/_static/0cbca55952/images/android/touchicon-180.png">
    <title> Handling Lifecycles with Lifecycle-Aware Components | Android
      Developers </title>
    <meta name="description" content="Use the new Lifecycle classes to manage activity and fragment lifecycles.">
    <meta itemprop="dateModified" content="2017-11-14T18:08:18.072970">
    <!-- STYLESHEETS -->
    <link rel="stylesheet" href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/css">
    <link rel="stylesheet" href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/css%281%29"
      title="roboto">
    <link rel="stylesheet" href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/dac-devsite.css">
    <link href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/default.css"
      rel="stylesheet" type="text/css">
    <!-- JAVASCRIPT -->
    <script src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/android_3p-bundle.js"
type="text/javascript"></script>
    <script src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/script_foot_closure_android.js"></script>
    <script src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/script_foot_android.js"></script>
    <script type="text/javascript">
  var toRoot = '/';
  devsite.permissions.init({"f62218c009ec029abef196bba5aa34cf": true, "098dafe57affddc137df300142652cfd": false, "8e03e230de0bd8a6fe173fdf172e8b3f": true, "cb025a64a50094835616312f4774a53d": true, "51470233c56fc1fde50f00b73c52b216": false, "d169d485cf24243a263783dbe42029b1": true, "039e5d84b87fd75807ffb37b7f1bbf2c": true, "752953480de00a336d911a46966cc16d": false, "700def1a83e356c06c0925afb05de4b0": false, "6749dcb526ce9bde6993550c7d928d24": true});

  var replaceBlog = false;
  var replaceYouTube = false;
  var siteDefaultLocale = 'en';

  var ANDROID_LANGUAGES = [
      'id','de','en','es','es-419','fr','pt-br','vi','tr','ru','th','ja','zh-cn','zh-tw','ko'
  ];
</script> <script src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/docs.js"
type="text/javascript"></script>
    <script src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/jsapi"
type="text/javascript"></script>
    <link type="text/css" href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/default+en.css"
      rel="stylesheet">
    <link type="text/css" href="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/default%281%29.css"
      rel="stylesheet">
    <script type="text/javascript" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/default+en.I.js"></script>
    <style type="text/css">.gsc-control-cse{font-family:Arial, sans-serif;border-color:#ECEFF1;background-color:#ECEFF1}.gsc-control-cse .gsc-table-result{font-family:Arial, sans-serif}input.gsc-input,.gsc-input-box,.gsc-input-box-hover,.gsc-input-box-focus{border-color:#D9D9D9}input.gsc-search-button,input.gsc-search-button:hover,input.gsc-search-button:focus{border-color:#2F5BB7;background-color:#357AE8;background-image:none;filter:none}.gsc-tabHeader.gsc-tabhInactive{border-color:#CCCCCC;background-color:#FFFFFF}.gsc-tabHeader.gsc-tabhActive{border-color:#CCCCCC;border-bottom-color:#FFFFFF;background-color:#FFFFFF}.gsc-tabsArea{border-color:#CCCCCC}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#ECEFF1;background-color:#ECEFF1}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#ECEFF1;background-color:#ECEFF1}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#039BE5}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#039BE5}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#039BE5}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#039BE5}.gsc-cursor-page{color:#039BE5}a.gsc-trailing-more-results:link{color:#039BE5}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#333333}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#333333}.gs-webResult div.gs-visibleUrl-short{color:#333333}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#ECEFF1}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#CCCCCC;background-color:#ECEFF1;color:#039BE5}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#CCCCCC;background-color:#FFFFFF;color:#039BE5}.gsc-webResult.gsc-result.gsc-promotion{border-color:#F6F6F6;background-color:#F6F6F6}.gsc-completion-title{color:#039BE5}.gsc-completion-snippet{color:#333333}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#1155CC}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#1155CC}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#1155CC}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#1155CC}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#666666}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#039BE5}</style>
    <style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-webkit-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em;-webkit-appearance:button}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 9px}.gsib_a{padding-right:8px;padding-left:8px}.gsst_a{padding-top:5.5px}.gssb_e{border:0}.gssb_l{margin:5px 0}input.gsc-input::-webkit-input-placeholder{font-size:14px}input.gsc-input:-moz-placeholder{font-size:14px}input.gsc-input::-moz-placeholder{font-size:14px}input.gsc-input:-ms-input-placeholder{font-size:14px}input.gsc-input:focus::-webkit-input-placeholder{color:transparent}input.gsc-input:focus:-moz-placeholder{color:transparent}input.gsc-input:focus::-moz-placeholder{color:transparent}input.gsc-input:focus:-ms-input-placeholder{color:transparent}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style>
  </head>
  <body class="gc-documentation                                         develop               libraries                           dac-nav-open"
    data-gr-c-s-loaded="true">
    <sub><a id="firstLine" name="firstLine"></a>Переклад
      українською - <a href="mailto:ac2epsilon@gmail.com">Арсеній Чеботарьов</a>
      - Києв 2018<br>
    </sub>
    <h1 itemprop="name">Обробка Lifecycles за допомогою обізнаних
      компонент&nbsp;</h1>
    <div class="jd-descr " itemprop="articleBody">
      <style>
    .sidebox a.bug {
        padding-right: 25px;
        background: transparent url(images/bug.png) no-repeat center right;
    }
    .sidebox a.g-plus {
        padding-right: 25px;
        background: transparent url(images/g+.ico) no-repeat center right;
    }</style>
      <p> </p>
      <div class="sidebox-wrapper"><br>
      </div>
      <nav class="inline-toc">
        <ol class="toc">
          <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#lc">Lifecycle</a></li>
          <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#lco">LifecycleOwner</a>
            <ol class="toc">
              <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#implementing-lco">Реалізація
                  власного&nbsp; LifecycleOwner</a></li>
            </ol>
          </li>
          <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#lc-bp">Кращі
              практики для lifecycle-aware компонент</a></li>
          <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#use-cases">Випадки
              застосування lifecycle-aware компонент</a></li>
          <li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html#onStop-and-savedState">Обробка
              подій по зупинці</a></li>
        </ol>
      </nav>
      <p>Lifecycle-aware компоненти виконують дії у відповідь на зміну статусу
        життєвого циклу інших компонент, таких, як активності та фрагменти. Ці
        компоненти допомагають вам продукувати краще організовані, та часто
        створюють більш легковажний код, що простіше обслуговувати.</p>
      <p>Загальний шаблон полягає реалізації дій над залежними компонентами в
        методах життєвого циклу активностей або фрагментів. Однак цей шаблон
        призводить до слабкої організації, та провокує помилки. через
        використання обізнаних на життєвому циклі
        (lifecycle-aware)&nbsp;компонент ви можете перемістити код залежиних
        компонент за межі методів життєвого циклу, та в самі компоненти.</p>
      <p>Пакунок <a href="https://developer.android.com/reference/android/arch/lifecycle/package-summary.html"><code>android.arch.lifecycle</code></a>
        провадить класи та інтерфейси, що дозволяють будувати обізнані на
        життєвому циклі компоненти — це такі компоненти, що можуть автоматично
        підлаштовувати свою поведінку на основі поточного стану робочого циклу
        активності або фрагменту.</p>
      <aside class="note"><strong>Зауваження:</strong><span> Щоб імпортувати <a
            href="https://developer.android.com/reference/android/arch/lifecycle/package-summary.html"><code>android.arch.lifecycle</code></a>
          в ваш Android&nbsp;</span><span><span>проект</span>, дивіться <a href="https://developer.android.com/topic/libraries/architecture/adding-components.html">додавання
            компонент до вашого проекту</a>.</span></aside>
      <p>Більшість з компонент застосування, визначені в Android Framework,
        мають приєднаний до себе життєвий цикл. Життєві цикли керуются
        операційною системою або кодом фреймворка, де виконується ваш процес.
        Вони є основою щодо того, як робить Android,&nbsp; та ваше застосування
        повинно поважати їх, не створюючи витоків пам'яті при перемиканні, або
        навіть не спричиняючи падінь застосування.</p>
      <p>Уявіть, що ми маємо активність, що показує положення пристрою на
        екрані. Загальна реалізація може бути наступною:</p>
      <pre class="prettyprint lang-java"><code><span class="kwd">class</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pun">(</span><span
class="typ">Context</span><span class="pln"> context</span><span class="pun">,</span><span
class="pln"> </span><span class="typ">Callback</span><span class="pln"> callback</span><span
class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// ...</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br><br>&nbsp; &nbsp; </span><span class="kwd">void</span><span class="pln"> start</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// під'єднуємость до сервісу локації</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span class="kwd">void</span><span
class="pln"> stop</span><span class="pun">()</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// від'єднуємось від сервісу локації</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span
class="pln"><br><br></span><span class="kwd">class</span><span class="pln"> </span><span
class="typ">MyActivity</span><span class="pln"> </span><span class="kwd">extends</span><span
class="pln"> </span><span class="typ">AppCompatActivity</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">private</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pln"> myLocationListener</span><span
class="pun">;</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span class="lit">@Override</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span
class="kwd">void</span><span class="pln"> onCreate</span><span class="pun">(...)</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pun">(</span><span
class="kwd">this</span><span class="pun">,</span><span class="pln"> </span><span
class="pun">(</span><span class="pln">location</span><span class="pun">)</span><span
class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// оновлюємо UI</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="pun">});</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br><br>&nbsp; &nbsp; </span><span class="lit">@Override</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span
class="kwd">void</span><span class="pln"> onStart</span><span class="pun">()</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onStart</span><span
class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener</span><span
class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// керуємо іншими компонентами, що потребують відповідати на життєвий цикл активності</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@Override</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> onStop</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onStop</span><span
class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener</span><span
class="pun">.</span><span class="pln">stop</span><span class="pun">();</span><span
class="pln"><br></span></code><code><span class="pln"><code><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// керуємо іншими компонентами, що потребують відповідати на життєвий цикл активності</span><span
class="pln"><br></span></code></span><span class="pln">&nbsp; &nbsp; </span><span
class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span
class="pln"><br></span></code></pre>
      <p>Навіть якщо цей приклад виглядає гарно, в реальному застосуванні ви
        отримаєте дуже багато викликів, що обробляють UI та інші компоненти, у
        відповідь на поточний стан життєвого циклу. Керування декількома
        компонентами накаладає помітний обсяг коду в методи життєвого циклу,
        такі, як <code><a href="https://developer.android.com/reference/android/app/Activity.html#onStart%28%29">onStart()</a></code>
        та <code><a href="https://developer.android.com/reference/android/app/Activity.html#onStop%28%29">onStop()</a></code>,
        що робить складною їх підтримку.</p>
      <p>Більше того, немає гарантій, що компоненти стартують перед тим, як
        активність або фрагмент зупиняться. Це особливо вірно, якщо нам треба
        пиконати довготривалу операцію, таку, як деяка перевірка конфігурації в
        <code><a href="https://developer.android.com/reference/android/app/Activity.html#onStart%28%29">onStart()</a></code>.
        Це може призвести до стану гонок, коил метод <code><a href="https://developer.android.com/reference/android/app/Activity.html#onStop%28%29">onStop()</a></code>
        звершиться до&nbsp; <code><a href="https://developer.android.com/reference/android/app/Activity.html#onStart%28%29">onStart()</a></code>,
        утримуючи компонент більш живучим, ніж це треба.</p>
      <pre class="prettyprint lang-java"><code><span class="kwd">class</span><span
class="pln"> </span><span class="typ">MyActivity</span><span class="pln"> </span><span
class="kwd">extends</span><span class="pln"> </span><span class="typ">AppCompatActivity</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="kwd">private</span><span class="pln"> </span><span class="typ">MyLocationListener</span><span
class="pln"> myLocationListener</span><span class="pun">;</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span
class="pln"> onCreate</span><span class="pun">(...)</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pun">(</span><span
class="kwd">this</span><span class="pun">,</span><span class="pln"> location </span><span
class="pun">-&gt;</span><span class="pln"> </span><span class="pun">{</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// оновлення UI</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">});</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@Override</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> onStart</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onStart</span><span
class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="typ">Util</span><span class="pun">.</span><span class="pln">checkUserStatus</span><span
class="pun">(</span><span class="pln">result </span><span class="pun">-&gt;</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// що буде, якщо цей зворотній виклик викличеться ПІСЛЯ зупинки активності?</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span
class="pln"> </span><span class="pun">(</span><span class="pln">result</span><span
class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLocationListener</span><span
class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">});</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@Override</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> onStop</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onStop</span><span
class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener</span><span
class="pun">.</span><span class="pln">stop</span><span class="pun">();</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span
class="pun">}</span><span class="pln"><br></span></code></pre>
      <p>Пакунок <a href="https://developer.android.com/reference/android/arch/lifecycle/package-summary.html"><code>android.arch.lifecycle</code></a>
        провадить класи та інтерфейси, що допомагають вам здолати ці проблеми в
        тихій та ізольований спосіб.</p>
      <h2 id="lc" style="padding-bottom: 0px;">Lifecycle</h2>
      <hr>
      <p><a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        є класом, що зберігає інформацію щодо стану життєвого циклу компонента
        (як активність або фрагмент), та дозволяє іншим об'єктам досліджувати
        цей стан.</p>
      <p><a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        використовує два головні переліків для відстежування життєвого циклу для
        своїх асоційованих компонент:</p>
      <dl>
        <dt>Event</dt>
        <dd>Події життєвого циклу, що передані від фреймворку та класу <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>.
          Ці події відображуються на події зворотнього виклику в активностях та
          фрагментах.</dd>
        <dt>State</dt>
        <dd>Поточний стан компонента, що відстежується об'єктом <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>.</dd>
      </dl>
      <p><img alt="" src="./Handling%20Lifecycles%20with%20Lifecycle-Aware%20Components%20_%20Android%20Developers_files/lifecycle-states.png"></p>
      <p>Думайте про стани як вузли графу, та про події як про гілки між ціма
        вузлами.</p>
      <p>Клас може моніторити статус життєвого циклу, додаючи анотації до ціх
        методів. Потім ви можете додати наглядача, через виклик метода <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html#addObserver%28android.arch.lifecycle.LifecycleObserver%29"><code>addObserver()</code></a>
        класу <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>,
        та передаючи примірник до наглядача, як показано в наступному прикладі:</p>
      <pre class="prettyprint lang-java"><code><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span
class="typ">MyObserver</span><span class="pln"> </span><span class="kwd">implements</span><span
class="pln"> </span><span class="typ">LifecycleObserver</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="lit">@OnLifecycleEvent</span><span
class="pun">(</span><span class="typ">Lifecycle</span><span class="pun">.</span><span
class="typ">Event</span><span class="pun">.</span><span class="pln">ON_RESUME</span><span
class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> connectListener</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="pun">...</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br><br>&nbsp; &nbsp; </span><span class="lit">@OnLifecycleEvent</span><span
class="pun">(</span><span class="typ">Lifecycle</span><span class="pun">.</span><span
class="typ">Event</span><span class="pun">.</span><span class="pln">ON_PAUSE</span><span
class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> disconnectListener</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="pun">...</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br>myLifecycleOwner</span><span
class="pun">.</span><span class="pln">getLifecycle</span><span class="pun">().</span><span
class="pln">addObserver</span><span class="pun">(</span><span class="kwd">new</span><span
class="pln"> </span><span class="typ">MyObserver</span><span class="pun">());</span><span
class="pln"><br></span></code></pre>
      <p>В прикладі вище, об'єкт <code>myLifecycleOwner</code> реалізує
        інтерфейс <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>,
        що пояснюється в наступному розділі.</p>
      <h2 id="lco" style="padding-bottom: 0px;">LifecycleOwner</h2>
      <hr>
      <p><a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>
        є інтерфейсом з однм методом, якій вказує, що клас має&nbsp; <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>.
        Він має один метод, <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html#getLifecycle%28%29"><code>getLifecycle()</code></a>,
        що мусить реалізований класом. Якщо ми замість цього намагаємось
        керувати життєвим циклом цілого процесу застосування, дивіться <a href="https://developer.android.com/reference/android/arch/lifecycle/ProcessLifecycleOwner.html"><code>ProcessLifecycleOwner</code></a>.</p>
      <p>Цей інтерфейс абстрагує власність <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        від індивідуальних класів, таких як <code><a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html">Fragment</a></code>
        та <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html">AppCompatActivity</a></code>,
        та дозволяє написання компонент, що роблять з ними. Кожний власний клас
        застосування може реалізувати свій інтерфейс <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>.</p>
      <p>Компоненти, що реалізують <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver.html"><code>LifecycleObserver</code></a>,
        роблять безшовно з компонентами, що реалізують <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>,&nbsp;
оскільки
        власник може провадити життєвий цикл, за яким наглядач неєструється
        наглядати. </p>
      <p>Для приклада відстеження локації пристрою, ми можемо зробити, щоб клас
        <code>MyLocationListener</code> реалізовав <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver.html"><code>LifecycleObserver</code></a>,
        та потім ініціалізував його <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        активності в методі <code><a href="https://developer.android.com/reference/android/app/Activity.html#onCreate%28android.os.Bundle%29">onCreate()</a></code>.
        Це дозволяє класу <code>MyLocationListener</code> бути самодостатнім,
        що означає, що логіка реакції на зміни в життєвому стані декларована в <code>MyLocationListener</code>,
        замість активності. Коли індивідуальні компоненти зберігають свою власну
        логіку, керування логікою активностей та фрагментів стає простішим.</p>
      <pre class="prettyprint lang-java"><code><span class="kwd">class</span><span
class="pln"> </span><span class="typ">MyActivity</span><span class="pln"> </span><span
class="kwd">extends</span><span class="pln"> </span><span class="typ">AppCompatActivity</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="kwd">private</span><span class="pln"> </span><span class="typ">MyLocationListener</span><span
class="pln"> myLocationListener</span><span class="pun">;</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span
class="pln"> onCreate</span><span class="pun">(...)</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; myLocationListener </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pun">(</span><span
class="kwd">this</span><span class="pun">,</span><span class="pln"> getLifecycle</span><span
class="pun">(),</span><span class="pln"> location </span><span class="pun">-&gt;</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// оновлення UI</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="pun">});</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="typ">Util</span><span class="pun">.</span><span class="pln">checkUserStatus</span><span
class="pun">(</span><span class="pln">result </span><span class="pun">-&gt;</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">result</span><span
class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLocationListener</span><span
class="pun">.</span><span class="pln">enable</span><span class="pun">();</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">});</span><span
class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span
class="pun">}</span><span class="pln"><br></span></code></pre>
      <p>Загальний випадок використання є уникання виклику певних зворотніх
        викликів, якщо <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        прямо зараз не в кращому стані для цього. Наприклад, якщо зворотній
        виклик робить транзицію фрагменту після збереження стану активності, це
        може призвести до краху, так що ви ніколи не схочете викликати цей
        зворотній виклик.</p>
      <p>Щоб зробити цей випадок, клас <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        дозволяє іншому об'єкту запитати поточний стан. </p>
      <pre class="prettyprint"><span class="kwd">class</span><span class="pln"> </span><span
class="typ">MyLocationListener</span><span class="pln"> </span><span class="kwd">implements</span><span
class="pln"> </span><span class="typ">LifecycleObserver</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">private</span><span
class="pln"> </span><span class="kwd">boolean</span><span class="pln"> enabled </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span
class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="typ">MyLocationListener</span><span class="pun">(</span><span
class="typ">Context</span><span class="pln"> context</span><span class="pun">,</span><span
class="pln"> </span><span class="typ">Lifecycle</span><span class="pln"> lifecycle</span><span
class="pun">,</span><span class="pln"> </span><span class="typ">Callback</span><span
class="pln"> callback</span><span class="pun">)</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp;</span><span
class="pun">...</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br><br>&nbsp; &nbsp; </span><span class="lit">@OnLifecycleEvent</span><span
class="pun">(</span><span class="typ">Lifecycle</span><span class="pun">.</span><span
class="typ">Event</span><span class="pun">.</span><span class="pln">ON_START</span><span
class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">void</span><span
class="pln"> start</span><span class="pun">()</span><span class="pln"> </span><span
class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">enabled</span><span
class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span
class="com">// з'єднатись</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span
class="kwd">void</span><span class="pln"> enable</span><span class="pun">()</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; enabled </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span
class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><strong><span
class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">lifecycle</span><span
class="pun">.</span><span class="pln">getCurrentState</span><span class="pun">().</span><span
class="pln">isAtLeast</span><span class="pun">(</span><span class="pln">STARTED</span><span
class="pun">))</span></strong><span class="pln"> </span><span class="pun">{</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// з'єднатись, якщо не з'єднано</span><span
class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@OnLifecycleEvent</span><span class="pun">(</span><span class="typ">Lifecycle</span><span
class="pun">.</span><span class="typ">Event</span><span class="pun">.</span><span
class="pln">ON_STOP</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="kwd">void</span><span class="pln"> stop</span><span class="pun">()</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="com">// роз'єднати, якщо з'єднано</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre>
      <p>З такою реалізацією наш клас <code>LocationListener</code> повністю в
        курсі поточного стану. Якщо нам треба використати наш <code>LocationListener</code>
        з іншої активності або фрагмента, нам тільки треба ініціалізувати його.
        Все налаштування керується самим класом. </p>
      <p>Якщо бібліотека провадить класи, що потребують роботи з життєвим циклом
        Android, ми рекомендуємо, щоб ви використовували налаштовані для цього
        компоненти. Клієнти вашої бібліотеки можуть просто інтегрувати ці
        компоненти без ручного керування життєвим циклом з боку клієнта.</p>
      <h3 id="implementing-lco">Реалізація власного LifecycleOwner</h3>
      <p>Фрагменти та активності в Support Library 26.1.0 та пізніших вже
        реалізують інтерфейс <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>.</p>
      <p>Якщо ви маєте власний клас, який ви бажаєте зробити <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html"><code>LifecycleOwner</code></a>,
        ви можете використовувати клас <a href="https://developer.android.com/reference/android/arch/lifecycle/LifecycleRegistry.html">LifecycleRegistry</a>,
        але вам треба пересилати події в цей клас, як показано в наступному
        прикладі:</p>
      <pre class="prettyprint lang-java"><code><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span
class="typ">MyActivity</span><span class="pln"> </span><span class="kwd">extends</span><span
class="pln"> </span><span class="typ">Activity</span><span class="pln"> </span><span
class="kwd">implements</span><span class="pln"> </span><span class="typ">LifecycleOwner</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span
class="kwd">private</span><span class="pln"> </span><span class="typ">LifecycleRegistry</span><span
class="pln"> mLifecycleRegistry</span><span class="pun">;</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@Override</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">protected</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> onCreate</span><span
class="pun">(</span><span class="typ">Bundle</span><span class="pln"> savedInstanceState</span><span
class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onCreate</span><span
class="pun">(</span><span class="pln">savedInstanceState</span><span class="pun">);</span><span
class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; mLifecycleRegistry </span><span
class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span
class="pln"> </span><span class="typ">LifecycleRegistry</span><span class="pun">(</span><span
class="kwd">this</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; mLifecycleRegistry</span><span
class="pun">.</span><span class="pln">markState</span><span class="pun">(</span><span
class="typ">Lifecycle</span><span class="pun">.</span><span class="typ">State</span><span
class="pun">.</span><span class="pln">CREATED</span><span class="pun">);</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@Override</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span
class="pln"> </span><span class="kwd">void</span><span class="pln"> onStart</span><span
class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">super</span><span class="pun">.</span><span class="pln">onStart</span><span
class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; mLifecycleRegistry</span><span
class="pun">.</span><span class="pln">markState</span><span class="pun">(</span><span
class="typ">Lifecycle</span><span class="pun">.</span><span class="typ">State</span><span
class="pun">.</span><span class="pln">STARTED</span><span class="pun">);</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span
class="lit">@NonNull</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="lit">@Override</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span
class="typ">Lifecycle</span><span class="pln"> getLifecycle</span><span class="pun">()</span><span
class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span
class="kwd">return</span><span class="pln"> mLifecycleRegistry</span><span class="pun">;</span><span
class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span
class="pun">}</span><span class="pln"><br></span></code></pre>
      <h2 id="lc-bp" style="padding-bottom: 0px;">Кращі практики для обізнаних з
        життєвим циклом компонентів</h2>
      <hr>
      <ul>
        <li>Утримуйте UI контролери (активності та фрагменти) такими тонкими, як
          це можливо. Вони не повинні намагатись свої власні дані, для цього
          використовуйте <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>,
          та досліджувати об'єкт <a href="https://developer.android.com/reference/android/arch/lifecycle/LiveData.html"><code>LiveData</code></a>,
          щоб відобразити зміни назад до візуальних елементів.</li>
        <li>Намагайтесь писати рушійний даними UI, де контролери UI відповідають
          за оновлення візуальних елементів, згідно зміні даних, або
          повідомляють про дії користувача назад, до <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>.</li>
        <li>Покладіть вашу логіку даних в ваш клас <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>.
          <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>
          повинен служити як конектор між вашим UI контролером, та залишком
          вашого застосування. Однак будьте обережні, це не відповідальність <a
            href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>
          підтягувати дані (наприклад, з мережі). Замість цього, <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>
          повинен викликати відповідний компонент для отримання даних, та потім
          впровадити результат назад до UI контролера.</li>
        <li>Використовуйте прикріплення даних&nbsp; <a href="https://developer.android.com/topic/libraries/data-binding/index.html">Data
            Binding</a> для підтримки чистого інтерфейсу між вашими візуальними
          елементами та UI контролером. Це дозволяє вам зробити ваші елементи
          більш декларативними, та мінімізувати код оновлення, який ви пишете
          для ваших активностей та фрагментів. Якщо ви схиляєтесь робити це на
          мові програмування Java, використовуйте бібліотеку, як <a href="http://jakewharton.github.io/butterknife/">Butter
            Knife</a>, щоб уникнути повторення коду, та мати кращі абстракції.</li>
        <li>Якщо ваш UI складний, розгляньте&nbsp; можливість створити клас <a
            class="external-link" href="http://www.gwtproject.org/articles/mvp-architecture.html#presenter">презентаці<span
              style="color: rgba(0, 0, 0, 0.68);">ї</span></a>, &nbsp; щоб
          обробляти модифікації UI. Це може бути дослідницькою роботою, але це
          дозволить легше тестування ваших UI компонент.</li>
        <li>Уникайте посилатись на контекст <code><a href="https://developer.android.com/reference/android/view/View.html">View</a></code>
          або <code><a href="https://developer.android.com/reference/android/app/Activity.html">Activity</a></code>
          в вашому&nbsp; <a href="https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html"><code>ViewModel</code></a>.
          Якщо <code>ViewModel</code> переживе активність (в випадку зміни
          конфігурації), ваша активність дасть витік, та не буде вірно
          утилізована збирачем сміття. </li>
      </ul>
      <h2 id="use-cases" style="padding-bottom: 0px;">Випадки використання для
        обізнаних на життевому циклі компонентах</h2>
      <hr>
      <p>Lifecycle-aware компоненти можуть зробити значно простішим для вас
        керувати життєвим циклом в декілька способів. Ось деякі приклади:</p>
      <ul>
        <li>Перемикання між грубими та гарно-вивіренимими оновленнями локацїі.
          Використовуйте&nbsp; lifecycle-aware компоненти, щоб дозволити точні
          оновлення локації, доки ваше застосування видиме, та переходьте до
          грубого, коли воно робить в фоні. <a href="https://developer.android.com/reference/android/arch/lifecycle/LiveData.html"><code>LiveData</code></a>,
          компонент lifecycle-aware, дозволяє вашому застосуванню автоатично
          оновлювати UI, коли ви змінюєте локацію.</li>
        <li>Зупинка та початок відео буферизації. Використовуйте lifecycle-aware
          компоненти для початку відео буферизації так швидко, як це можливо,
          але відкладіть відтворення, доки застосування повністю не стартує. Ви
          також можете викристовувати такі компоненти для переривання
          буферизації, коли ваше застосування знищується.</li>
        <li>Старт та зупинка мережевого з'єднання. Використовуйте
          lifecycle-aware компоненти, щоб дозволити живе оновлення (потоки)
          мережевих даних, коли застосування на передньому плані, та також для
          автомаитчної паузи, коли застосування іде в фоновий режим. </li>
        <li>Пауза та відновлення анімованих малюнків. Використовуйте
          lifecycle-aware компоненти для обробки призупинки анімованих малюнків,
          коли застосування в фоні, та відновлюйте їх після того, як
          застосування повернеться на передній план.</li>
      </ul>
      <h2 id="onStop-and-savedState" style="padding-bottom: 0px;">Обробка на
        подіях зупинки</h2>
      <hr>
      <p>Якщо <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        належить до <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html">AppCompatActivity</a></code>
        або <code><a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html">Fragment</a></code>,
        стан <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        змінюється на <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#CREATED"><code>CREATED</code></a>,
        та надсилається подія <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.Event.html#ON_STOP"><code>ON_STOP</code></a>,
        коли на <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html">AppCompatActivity</a></code>
        або <code><a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html">Fragment</a></code>
        викликається <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onSaveInstanceState%28android.os.Bundle%29">onSaveInstanceState()</a></code>.</p>
      <p>Коли стан <code><a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html">Fragment</a></code>
        або <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html">AppCompatActivity</a></code>
        зберігається через <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onSaveInstanceState%28android.os.Bundle%29">onSaveInstanceState()</a></code>,
        його UI вважається незмінним до виклику <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.Event.html#ON_START"><code>ON_START</code></a>.
        Намагання модифікувати UI після того, як стан збережено, вірогідно
        викличе неузгодженість в навігації стану вашого застосування, ось чому <code><a
            href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html">FragmentManager</a></code>
        викликає виключення, якщо застосування виконує <code><a href="https://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html">FragmentTransaction</a></code>
        після збереження стану. Дивіться <code><a href="https://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html#commit%28%29">commit()</a></code>
        щодо деталей.</p>
      <p><a href="https://developer.android.com/reference/android/arch/lifecycle/LiveData.html"><code>LiveData</code></a>
        запобігає цьому крайньому випадку з самого початку, через відмову
        виклику свого обсервера, якщо асоційований з ним <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        щонайменьше не <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#STARTED"><code>STARTED</code></a>.
        За лаштунками він викликає <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#isAtLeast%28android.arch.lifecycle.Lifecycle.State%29"><code>isAtLeast()</code></a>
        перед вірішенням, чи викликати наглядача. </p>
      <p>На жаль, метод <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html">AppCompatActivity</a></code>'s
        <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onStop%28%29">onStop()</a></code>
        викликається <em>після</em> <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onSaveInstanceState%28android.os.Bundle%29">onSaveInstanceState()</a></code>,
        що залишає проміжок, коли стан змін UI не дозволений, але <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        ще не був переміщений в стан <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#CREATED"><code>CREATED</code></a>.</p>
      <p>Щоб запобігти цьому, клас <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
        в версії <code>beta2</code> та нижче маркує стан як <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#CREATED"><code>CREATED</code></a>
        без надсилання події, так що любий код, що перевіряє поточний стан,
        отримає дійсне значення, навіть незважаючи, що подія не надіслана, доки
        система не викличе <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onStop%28%29">onStop()</a></code>.</p>
      <p>Нажаль, це рішення має дві головні проблеми:</p>
      <ul>
        <li>На API рівня 23 та нижче, система Android насправді зберігає стан
          активності, навіть якщо вона&nbsp; <em>частково</em> перекрита іншою
          активністю. Іншими словами, система Android викликає <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onSaveInstanceState%28android.os.Bundle%29">onSaveInstanceState()</a></code>,
          але не обов'язково викликає <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onStop%28%29">onStop()</a></code>.
          Це створює потенційно довгий інтервал, коли наглядач буде думати, що
          життєвий цикл активний, навіть якщо стан UI не може бути
          модифікований.</li>
        <li>Любий клас, що бажає показати подібну поведінку класу <a href="https://developer.android.com/reference/android/arch/lifecycle/LiveData.html"><code>LiveData</code></a>,
          має реалізувати обхідний шлях, що провадиться <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
          версією <code>beta 2</code> та нижче.</li>
      </ul>
      <aside class="note"><strong>Зауваження:</strong><span> Щоб зробити цей
          потік простіше та впровадити кращу сумісність зі старішими версіями,
          починаючи з версії&nbsp; <code>1.0.0-rc1</code>, о'бєкти&nbsp; <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html"><code>Lifecycle</code></a>
          відмічаються як <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State.html#CREATED"><code>CREATED</code></a>,
          та <a href="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.Event.html#ON_STOP"><code>ON_STOP</code></a>
          надсилається, коли викликається <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onSaveInstanceState%28android.os.Bundle%29">onSaveInstanceState()</a></code>,
          без очікування виклику до метода&nbsp; <code><a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#onStop%28%29">onStop()</a></code>.
          Це скоріше не буде впливати на ваш код, але це дещо, про що треба
          знати, бо це не співпадає з порядком викликів в класі <code><a href="https://developer.android.com/reference/android/app/Activity.html">Activity</a></code>
          в API рівня 26 та нижче.</span></aside>
    </div>
    <footer class="devsite-footer-promos nocontent">
      <nav class="devsite-full-site-width">
        <ul class="devsite-footer-promos-list">
          <li class="devsite-footer-promo"> <a href="https://twitter.com/AndroidDev"
              class="devsite-footer-promo-title gc-analytics-event" data-category="Site-Wide Custom Events"
              data-label="Footer Twitter Promo"> </a><br>
          </li>
        </ul>
      </nav>
    </footer>
  </body>
</html>
