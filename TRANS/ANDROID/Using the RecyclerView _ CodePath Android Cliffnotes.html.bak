<!DOCTYPE html>
<!-- saved from url=(0058)https://guides.codepath.com/android/using-the-recyclerview -->
<html class="gr__guides_codepath_com" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Using the RecyclerView | CodePath Android Cliffnotes</title>
    <link href="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/bootstrap.min.css"
      rel="stylesheet" type="text/css">
    <link href="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/bootstrap-forms.min.css"
      rel="stylesheet" type="text/css">
    <link href="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/markdown.css"
      rel="stylesheet" type="text/css">
    <link href="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/style.css"
      rel="stylesheet" type="text/css">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <script type="text/javascript" async="" src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/linkid.js"></script>
    <script async="" src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/analytics.js"></script>
    <script type="text/javascript">(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-47712505-2', 'codepath.com');
ga('require', 'linkid', 'linkid.js');
ga('require', 'displayfeatures');
ga('send', 'pageview');</script>
  </head>
  <body data-gr-c-s-loaded="true" style=" zoom: 1;">
    <div class="container">
      <div class="row" id="wiki-content">
        <h1 class="col-xs-4 col-sm-9 col-md-9 col-lg-9" id="wiki-title">Використання
          RecyclerView</h1>
        <div id="wiki-body">
          <div class="markdown-body col-xs-6 col-sm-9 col-md-12 col-lg-12">
            <h2>Огляд</h2>
            <p><code>RecyclerView</code> є новим <code>ViewGroup</code>,&nbsp;
              що підготований до малювання любого базованого на адаптері
              перегляду в подібний спосіб. Він може розглядатись як послідовник
              <a class="internal present" href="https://guides.codepath.com/android/Using-an-ArrayAdapter-with-ListView">ListView</a>
              та&nbsp; <a href="http://developer.android.com/guide/topics/ui/layout/gridview.html">GridView</a>,
              та він може бути знайдений в <a href="https://developer.android.com/reference/android/support/v7/app/package-summary.html">останній
                версії support-v7</a>. Одна з причин його існування в тому, що <code>RecyclerView</code>
              має більш розширюваний фреймворк, особливо оскільки він провадить
              можливість реалізувати обоє, горизонтальні та вертикальні
              розташування. Використовуйте <code>RecyclerView</code>, коли ви
              маєте колекції даних, чиї елементи змінюються під час виконання на
              основі дій користувача або мережевих подіях.</p>
            <p>Якщо ви бажаєте використовувати <code>RecyclerView</code>, вам
              знадобиться робити з наступним:</p>
            <ul>
              <li> <code>RecyclerView.Adapter</code> - Щоб обробляти колекцію
                даних, та приєднати його до елементів керування</li>
              <li> <code>LayoutManager</code> - Допомагає в розташуванні
                елементів</li>
              <li> <code>ItemAnimator</code> - Допомагає з анімацією елементів
                для загальних операцій, таких, як додавання або видалення
                елементів</li>
            </ul>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/RecyclerView.png"
                alt="RecyclerView" width="500"></p>
            <p>Більше того, він провадить підтримку анімаії для <code>ListView</code>
              елементів, коли вони додаються або видаляєються, що буде вкрай
              складно зробити в поточній реалізації. <code>RecyclerView</code>
              також починає примушувати до <a class="internal present" href="https://guides.codepath.com/android/Using-an-ArrayAdapter-with-ListView#improving-performance-with-the-viewholder-pattern">шаблону
                ViewHolder</a>, що завжди було рекомендованою практикою, але
              зараз глибоко інтегровано в цьому новому фреймворці.</p>
            <p>Для додаткових деталей дивіться <a href="http://www.grokkingandroid.com/first-glance-androids-recyclerview/">цей
                детальний огляд</a>.</p>
            <h3>Порівняння з ListView</h3>
            <p><code>RecyclerView</code> відрізняється від попередника <code>ListView</code>
              завдяки наступним можливостям:</p>
            <ul>
              <li> <strong>Потребує ViewHolder в Adapter</strong> - адапетри <code>ListView</code>
                не потребують використання шаблону ViewHolder для покращення
                продуктивності. На відміну, реалізація адаптера для <code>RecyclerView</code>
                потребує використання шаблону&nbsp; ViewHolder, для якого він
                використовує <code>RecyclerView.Viewholder</code>.</li>
              <li> <strong>Власні розташування елементів</strong> - <code>ListView</code>
                може розташовувати елементи в вертикальному лінійному
                розташуванні, та це не може бути налаштоване. На відміну, <code>RecyclerView</code>має&nbsp;
                <code>RecyclerView.LayoutManager</code>, що дозволяє любі
                розташування елементів, включаючи горизонтальні списки або
                ступінчасті решітки.</li>
              <li> <strong>Проста анімація елементів </strong>- <code>ListView</code>
                не має спеціальних механізмів, через які ви можете анімувати
                додавання або видалення елементів. На відміну <code>RecyclerView</code>
                має клас <code>RecyclerView.ItemAnimator</code> для обробки
                анімації елементів.</li>
              <li> <strong>Власні джерела даних</strong> - <code>ListView</code>
                має адаптери для різних джерел, такі, як <code>ArrayAdapter</code>
                та <code>CursorAdapter</code>, для масивів та баз даних,
                відповідно. На відміну,&nbsp; <code>RecyclerView.Adapter</code>
                потребує власної реалізації, для підтрики даних в адаптері.</li>
              <li> <strong>Власна декорація елементу</strong> - <code>ListView</code>
                має властивість <code>android:divider</code> для простого
                розділення елементів в списку. На відміну <code>RecyclerView</code>
                потребує використання об'єкту <code>RecyclerView.ItemDecoration</code>
                для встановлення значно більшої кількості власних декораторів
                роздільників.</li>
              <li> <strong>Власна детекція клацання</strong> - <code>ListView</code>
                має інтерфейс <code>AdapterView.OnItemClickListener</code>для
                прив'язування до подій окремих елементів списку. На відміну, <code>RecyclerView</code>
                має підтримку тільки для <code>RecyclerView.OnItemTouchListener</code>,
                що керує індивідуальними подіями натискань, але не має
                вбудованої обробки клацанням.</li>
            </ul>
            <h2>Компоненти<code>RecyclerView</code> </h2>
            <h3><a class="anchor" id="layoutmanagers" href="https://guides.codepath.com/android/using-the-recyclerview#layoutmanagers"><i
                  class="fa fa-link"></i></a><code>LayoutManagers</code></h3>
            <p><code>RecyclerView</code> потребує менеджера розташувань та
              примірник адаптера. Менеджер розташувань позиціює елемент в <code>RecyclerView</code>,
              та визначає, коли повторно використовувати вигляди елементів, що
              більше не видимі користувачеві. </p>
            <p><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html">RecyclerView</a>
              провадить ці вбудовані менеджери розташувань:</p>
            <ul>
              <li> <code>LinearLayoutManager</code> показує елементи в
                вертикальному або горизонтальному списку з прокруткою.</li>
              <li> <code>GridLayoutManager</code> показує елементи в решітці.</li>
              <li> <code>StaggeredGridLayoutManager</code> показує елементи в
                зміщеній решітці.</li>
            </ul>
            <p>Щоб створити власний менеджер розташувань, розширьте клас <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html">RecyclerView.LayoutManager</a>.</p>
            <p>Почитайте, що <a href="https://www.youtube.com/watch?v=gs_C1E8HwvE&amp;index=22&amp;list=WL">каже
                Dave Smith</a> щодо власних менеджерів розташування</p>
            <blockquote>
              <p><strong>Зауваження</strong>: В останніх версіях Support
                Library, якщо ви явно не встановили LayoutManager, RecyclerView
                не буде відображуватись! В Logcat з'явиться помилка <code>E/RecyclerView:
                  No layout manager attached; skipping layout</code></p>
            </blockquote>
            <h3><a class="anchor" id="recyclerview-adapter" href="https://guides.codepath.com/android/using-the-recyclerview#recyclerview-adapter"><i
                  class="fa fa-link"></i></a><code>RecyclerView.Adapter</code></h3>
            <p><code>RecyclerView</code> включає новий тип адаптерів. Це підбний
              підхід до тих, що ми вже використовували, але з деякими
              особливостями, такими, як обов'язковий <code>ViewHolder</code>.
              Вам знадобиться перекрити два головні методи: один для розміщення
              перегляду та його сховища, та інший для прекріплення даних до
              перегляду. Гарна річ щодо цього в тому, що перший метод
              викликається тільки коли нам дійсно треба створити новий перегляд.
              Не треба перевіряти, чи він використовується повторно.</p>
            <h3><a class="anchor" id="itemanimator" href="https://guides.codepath.com/android/using-the-recyclerview#itemanimator"><i
                  class="fa fa-link"></i></a><code>ItemAnimator</code></h3>
            <p><code>RecyclerView.ItemAnimator</code> буде анімувати модифікації
              <code>ViewGroup</code>, такі як додавання/видалення/вибір, що
              повідомляються адаптеру. <code>DefaultItemAnimator</code>може
              використовуваться для базових анімацій, та робить досить добре.
              Дивіться <a class="internal present" href="https://guides.codepath.com/android/Using-the-RecyclerView#animators">розділ&nbsp;</a>
              в цій інструкції для отримання додаткової інформації.</p>
            <h2>Використання RecyclerView</h2>
            <p>Використання <code>RecyclerView</code> має наступні кроки:</p>
            <ol>
              <li>Додаємо підтримку бібліотеки <code>RecyclerView</code> до
                файлу побудови gradle</li>
              <li>Визначте клас моделі, що буде використовуватись як джерело
                даних</li>
              <li>Додайте <code>RecyclerView</code> до вашої активності для
                відображення елементів</li>
              <li>Створіть власне розташування рядка в файлі XML, щоб
                візіалізувати елемент</li>
              <li>Створіть<code>RecyclerView.Adapter</code> та <code>ViewHolder</code>
                для малювання елементу</li>
              <li>Зв'яжіть адаптер до джерела даних, щоб заповнити <code>RecyclerView</code>
              </li>
            </ol>
            <p>Нижче ці кроки пояснені більш детально.</p>
            <h3>Встановлення</h3>
            <p>Переконайтесь, що бібліотека підтримки RecyclerView перелічена
              серед залежностей в вашому&nbsp; <code>app/build.gradle</code>:</p>
            <pre class="highlight" data-lang="Groovy"><code><span class="n">dependencies</span> <span
class="o">{</span>
    <span class="o">...</span>
    <span class="n">compile</span> <span class="s1">'com.android.support:recyclerview-v7:25.3.1'</span>
<span class="o">}</span></code></pre>
            <p>Клацніть на "Sync Project with Gradle files", щоб дозволити
              вашому IDE завантажити відповідні ресурси.</p>
            <h3>Визначення моделі</h3>
            <p>Кожний RecyclerView підтримується джерелом даних. В цьому випадку
              ми будемо визначати клас <code>Contact</code>, що представляє
              модель даних, що відображується RecyclerView:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">Contact</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">mName</span><span
class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mOnline</span><span
class="o">;</span>

    <span class="kd">public</span> <span class="nf">Contact</span><span class="o">(</span><span
class="n">String</span> <span class="n">name</span><span class="o">,</span> <span
class="kt">boolean</span> <span class="n">online</span><span class="o">)</span> <span
class="o">{</span>
        <span class="n">mName</span> <span class="o">=</span> <span class="n">name</span><span
class="o">;</span>
        <span class="n">mOnline</span> <span class="o">=</span> <span class="n">online</span><span
class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span
class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isOnline</span><span
class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mOnline</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span
class="n">lastContactId</span> <span class="o">=</span> <span class="mi">0</span><span
class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ArrayList</span><span
class="o">&lt;</span><span class="n">Contact</span><span class="o">&gt;</span> <span
class="nf">createContactsList</span><span class="o">(</span><span class="kt">int</span> <span
class="n">numContacts</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">contacts</span> <span class="o">=</span> <span
class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span
class="n">Contact</span><span class="o">&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span
class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span
class="n">i</span> <span class="o">&lt;=</span> <span class="n">numContacts</span><span
class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">contacts</span><span class="o">.</span><span class="na">add</span><span
class="o">(</span><span class="k">new</span> <span class="n">Contact</span><span
class="o">(</span><span class="s">"Person "</span> <span class="o">+</span> <span
class="o">++</span><span class="n">lastContactId</span><span class="o">,</span> <span
class="n">i</span> <span class="o">&lt;=</span> <span class="n">numContacts</span> <span
class="o">/</span> <span class="mi">2</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">contacts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <h3>Створення RecyclerView без Layout</h3>
            <p>Всередині XML файлу бажаної активності <code>res/layout/activity_users.xml</code>
              додамо&nbsp; <code>RecyclerView</code> з бібліотеки підтримки:</p>
            <pre class="highlight" data-lang="XML"><code><span class="nt">&lt;RelativeLayout</span> <span
class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span> <span
class="nt">&gt;</span>

    <span class="nt">&lt;android.support.v7.widget.RecyclerView</span>
      <span class="na">android:id=</span><span class="s">"@+id/rvContacts"</span>
      <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
      <span class="na">android:layout_height=</span><span class="s">"match_parent"</span> <span
class="nt">/&gt;</span>

<span class="nt">&lt;/RelativeLayout&gt;</span></code></pre>
            <p>В попередньому перегляді розташування ми можемо бачити <code>RecyclerView</code>в
              активності :</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/Qf5fQ8X.png"
                width="300"></p>
            <p>Тепер наш <code>RecyclerView</code> вбудований в файлі
              розташування нашої активності. Дабі ми можемо визначити
              розташування для кожного елементу в списку.</p>
            <h3>Створюємо власне розташування елементу</h3>
            <p>Перед тим, як ми створимо адаптер, давайте визначимо файл XML
              розташування, що буде використаний для кожного рядка в списку. Це
              розташування елементу поки що має містити горизонтальне лінійне
              застосування з текстовим елементом для ім'я, та кнопкою для
              повідомлення для цієї людини:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/wPRTc76.png"
                width="300"> <img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/fu3FzsV.png"
                width="300"></p>
            <p>Файл розташування може бути створений в <code>res/layout/item_contact.xml</code>,
              та буде відображуватись для кожного рядка в списку. <strong>Зауважте,
                </strong>що ви повинні використовувати <code>wrap_content</code>
              для <code>layout_height</code>, оскільки версії<code>RecyclerView</code>
              до<code>23.2.1</code>
              раніше ігнорували переметри розташування. Дивіться <a href="http://android-developers.blogspot.com/2016/02/android-support-library-232.html">це
                посилання</a> щодо додаткової інформації.</p>
            <pre class="highlight" data-lang="XML"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
        <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
        <span class="na">android:orientation=</span><span class="s">"horizontal"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:paddingTop=</span><span class="s">"10dp"</span>
        <span class="na">android:paddingBottom=</span><span class="s">"10dp"</span>
        <span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/contact_name"</span>
        <span class="na">android:layout_width=</span><span class="s">"0dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_weight=</span><span class="s">"1"</span>
        <span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:id=</span><span class="s">"@+id/message_button"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:paddingLeft=</span><span class="s">"16dp"</span>
        <span class="na">android:paddingRight=</span><span class="s">"16dp"</span>
        <span class="na">android:textSize=</span><span class="s">"10sp"</span>
        <span class="nt">/&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span></code></pre>
            <p>Коли з власним розташуванням елементу скінчено, давайте створимо
              адаптер, щоб заповнити даними наш ресайклер.</p>
            <h3>Створення<code>RecyclerView.Adapter</code> </h3>
            <p>Тепер нам треба створити адаптер, що насправді буде заповнювати
              даними наш RecyclerView. Роль адаптера полягає в <strong>перетворенні
                об'єкту в певній позиції на елемент в рядку списка</strong>, що
              має бути вставлений.</p>
            <p>Однак для <code>RecyclerView</code> адаптер потребує наявності
              о'бєкту "ViewHolder", що описує та провадить доступ до всіх
              переглядів в кожному рядку елементів. Ми можемо створити базовий
              адаптер та утримувач разом в <code>ContactsAdapter.java</code>
              наступним чином:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// Створюємо базовий адаптер, розширюючи RecyclerView.Adapter</span>
<span class="c1">// Зауважте, що ми вказали власний ViewHolder, що надає доступ до наших елементів керування</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContactsAdapter</span> <span
class="kd">extends</span>
    <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="c1">// Провадить пряме посилання до кожного з елементів керування в елементі даних</span>
    <span class="c1">// Використовується для кешування в розташуванні для швидкого доступу</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span
class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span
class="na">ViewHolder</span> <span class="o">{</span>
        <span class="c1">// Ваш утримувач повинен містити член-змінну для кожного елементу,</span>
        <span class="c1">// що буде встановлений по мірі відображення рядка</span>
        <span class="kd">public</span> <span class="n">TextView</span> <span class="n">nameTextView</span><span
class="o">;</span>
        <span class="kd">public</span> <span class="n">Button</span> <span class="n">messageButton</span><span
class="o">;</span>

        <span class="c1">// Ми також створюємо конструктор, що приймає цілий елемент рядка,</span>
        <span class="c1">// та робить пошук елементів керування, щоб знайти кожний</span>
        <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span
class="n">View</span> <span class="n">itemView</span><span class="o">)</span> <span
class="o">{</span>
            <span class="c1">// Зберігаємо itemView в змінній-члені public final, що може бути використана</span>
            <span class="c1">// для доступу до контексту з любого примірника ViewHolder.</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span
class="o">);</span>

            <span class="n">nameTextView</span> <span class="o">=</span> <span class="o">(</span><span
class="n">TextView</span><span class="o">)</span> <span class="n">itemView</span><span
class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span
class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span
class="na">contact_name</span><span class="o">);</span>
            <span class="n">messageButton</span> <span class="o">=</span> <span
class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">itemView</span><span
class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span
class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span
class="na">message_button</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>Тепер, коли ми взиначили базовий адапетр та <code>ViewHolder</code>,
              нам треба почати заповнювати наш адаптер. Зпочатку давайте
              заповнимо змінну-член для списку контактів, та передамо список
              через наш конструктор:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">ContactsAdapter</span> <span class="kd">extends</span>
    <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="c1">// ... зберігач елементів визначений вище...</span>

    <span class="c1">// Зберігаємо член-змінну для контактів</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span
class="n">Contact</span><span class="o">&gt;</span> <span class="n">mContacts</span><span
class="o">;</span>
    <span class="c1">// Зберігаємо контекст для простого доступу</span>
    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span
class="o">;</span>

    <span class="c1">// Передаємо масив контактів в конструктор</span>
    <span class="kd">public</span> <span class="nf">ContactsAdapter</span><span
class="o">(</span><span class="n">Context</span> <span class="n">context</span><span
class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">contacts</span><span class="o">)</span> <span
class="o">{</span>
        <span class="n">mContacts</span> <span class="o">=</span> <span class="n">contacts</span><span
class="o">;</span>
        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span
class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// Простий доступ до об'єкту контексту в ресайклері</span>
    <span class="kd">private</span> <span class="n">Context</span> <span class="nf">getContext</span><span
class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">mContext</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>Кожний адаптер має три первинні методи: <code>onCreateViewHolder</code>
              для розміщення розташування та створення утримувача, <code>onBindViewHolder</code>
              для встановлення атрибутів на основі даних, та <code>getItemCount</code>
              для визначення числа елементів. Нам треба реалізувати всі три, щоб
              завершити адаптер:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">ContactsAdapter</span> <span class="kd">extends</span>
    <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="c1">// ... конструктор та змінні-члени</span>

    <span class="c1">// Звичайно включає розміщення розташування з XML, та пертає утримувач</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span> <span class="nf">onCreateViewHolder</span><span class="o">(</span><span
class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span
class="kt">int</span> <span class="n">viewType</span><span class="o">)</span> <span
class="o">{</span>
        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span
class="n">parent</span><span class="o">.</span><span class="na">getContext</span><span
class="o">();</span>
        <span class="n">LayoutInflater</span> <span class="n">inflater</span> <span
class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span
class="na">from</span><span class="o">(</span><span class="n">context</span><span
class="o">);</span>

        <span class="c1">// Розміщуємо власне розташування</span>
        <span class="n">View</span> <span class="n">contactView</span> <span class="o">=</span> <span
class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span
class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span
class="o">.</span><span class="na">item_contact</span><span class="o">,</span> <span
class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span
class="o">);</span>

        <span class="c1">// Повертаємо новий прммірник утримувача</span>
        <span class="n">ViewHolder</span> <span class="n">viewHolder</span> <span
class="o">=</span> <span class="k">new</span> <span class="n">ViewHolder</span><span
class="o">(</span><span class="n">contactView</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewHolder</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// Включає заповнення даними кожного елементу через утримувач</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBindViewHolder</span><span
class="o">(</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span> <span class="n">viewHolder</span><span class="o">,</span> <span
class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span
class="o">{</span>
        <span class="c1">// Отримуємо модель даних в даній позиції</span>
        <span class="n">Contact</span> <span class="n">contact</span> <span class="o">=</span> <span
class="n">mContacts</span><span class="o">.</span><span class="na">get</span><span
class="o">(</span><span class="n">position</span><span class="o">);</span>

        <span class="c1">// Встановлюємо поля елементу на основі моделі даних </span>
        <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span
class="n">viewHolder</span><span class="o">.</span><span class="na">nameTextView</span><span
class="o">;</span>
        <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span
class="o">(</span><span class="n">contact</span><span class="o">.</span><span class="na">getName</span><span
class="o">());</span>
        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span
class="n">viewHolder</span><span class="o">.</span><span class="na">messageButton</span><span
class="o">;</span>
        <span class="n">button</span><span class="o">.</span><span class="na">setText</span><span
class="o">(</span><span class="n">contact</span><span class="o">.</span><span class="na">isOnline</span><span
class="o">()</span> <span class="o">?</span> <span class="s">"Message"</span> <span
class="o">:</span> <span class="s">"Offline"</span><span class="o">);</span>
        <span class="n">button</span><span class="o">.</span><span class="na">setEnabled</span><span
class="o">(</span><span class="n">contact</span><span class="o">.</span><span class="na">isOnline</span><span
class="o">());</span>
    <span class="o">}</span>

    <span class="c1">// Повертаємо загальний лічильник елементів в списку</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span
class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mContacts</span><span class="o">.</span><span
class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>Коли адаптер завершений, все, що лишається, є прив'язати дані з
              адаптера до RecyclerView.</p>
            <h3><a class="anchor" id="binding-the-adapter-to-the-recyclerview" href="https://guides.codepath.com/android/using-the-recyclerview#binding-the-adapter-to-the-recyclerview"><i
                  class="fa fa-link"></i></a>Binding the Adapter to the
              RecyclerView</h3>
            <p>In our activity, we will populate a set of sample users which
              should be displayed in the <code>RecyclerView</code>.</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">UserListActivity</span> <span class="kd">extends</span> <span
class="n">AppCompatActivity</span> <span class="o">{</span>

     <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">contacts</span><span class="o">;</span>

     <span class="nd">@Override</span>
     <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span
class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span
class="o">)</span> <span class="o">{</span>
         <span class="c1">// ...</span>
         <span class="c1">// Lookup the recyclerview in activity layout</span>
         <span class="n">RecyclerView</span> <span class="n">rvContacts</span> <span
class="o">=</span> <span class="o">(</span><span class="n">RecyclerView</span><span
class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span
class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span
class="na">rvContacts</span><span class="o">);</span>

         <span class="c1">// Initialize contacts</span>
         <span class="n">contacts</span> <span class="o">=</span> <span class="n">Contact</span><span
class="o">.</span><span class="na">createContactsList</span><span class="o">(</span><span
class="mi">20</span><span class="o">);</span>
         <span class="c1">// Create adapter passing in the sample user data</span>
         <span class="n">ContactsAdapter</span> <span class="n">adapter</span> <span
class="o">=</span> <span class="k">new</span> <span class="n">ContactsAdapter</span><span
class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">contacts</span><span
class="o">);</span>
         <span class="c1">// Attach the adapter to the recyclerview to populate items</span>
         <span class="n">rvContacts</span><span class="o">.</span><span class="na">setAdapter</span><span
class="o">(</span><span class="n">adapter</span><span class="o">);</span>
         <span class="c1">// Set layout manager to position the items</span>
         <span class="n">rvContacts</span><span class="o">.</span><span class="na">setLayoutManager</span><span
class="o">(</span><span class="k">new</span> <span class="n">LinearLayoutManager</span><span
class="o">(</span><span class="k">this</span><span class="o">));</span>
         <span class="c1">// That's all!</span>
     <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>Finally, compile and run the app and you should see something
              like the screenshot below. If you create enough items and scroll
              through the list, the views will be recycled and far smoother by
              default than the <code>ListView</code> widget:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/vbIL5HA.gif"
                alt="Screenshot" width="400"></p>
            <h3><a class="anchor" id="notifying-the-adapter" href="https://guides.codepath.com/android/using-the-recyclerview#notifying-the-adapter"><i
                  class="fa fa-link"></i></a>Notifying the Adapter</h3>
            <p>Unlike ListView, there is no way to add or remove items directly
              through the <code>RecyclerView</code> adapter. You need to make
              changes to the data source directly and notify the adapter of any
              changes. Also, whenever adding or removing elements, always make
              changes to the <strong>existing</strong> list. For instance,
              reinitializing the list of Contacts such as the following will not
              affect the adapter, since it has a memory reference to the old
              list:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// do not reinitialize an existing reference used by an adapter</span>
<span class="n">contacts</span> <span class="o">=</span> <span class="n">Contact</span><span
class="o">.</span><span class="na">createContactsList</span><span class="o">(</span><span
class="mi">5</span><span class="o">);</span></code></pre>
            <p>Instead, you need to act directly on the existing reference:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// add to the existing list</span>
<span class="n">contacts</span><span class="o">.</span><span class="na">addAll</span><span
class="o">(</span><span class="n">Contact</span><span class="o">.</span><span class="na">createContactsList</span><span
class="o">(</span><span class="mi">5</span><span class="o">));</span></code></pre>
            <p>There are many method available to use when notifying the adapter
              of different changes:</p>
            <table>
              <thead>
                <tr>
                  <th>Method</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><code>notifyItemChanged(int pos)</code></td>
                  <td>Notify that item at position has changed.</td>
                </tr>
                <tr>
                  <td><code>notifyItemInserted(int pos)</code></td>
                  <td>Notify that item reflected at position has been newly
                    inserted.</td>
                </tr>
                <tr>
                  <td><code>notifyItemRemoved(int pos)</code></td>
                  <td>Notify that items previously located at position has been
                    removed from the data set.</td>
                </tr>
                <tr>
                  <td><code>notifyDataSetChanged()</code></td>
                  <td>Notify that the dataset has changed. Use only as last
                    resort.</td>
                </tr>
              </tbody>
            </table>
            <p>We can use these from the activity or fragment:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// Add a new contact</span>
<span class="n">contacts</span><span class="o">.</span><span class="na">add</span><span
class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="k">new</span> <span
class="n">Contact</span><span class="o">(</span><span class="s">"Barney"</span><span
class="o">,</span> <span class="kc">true</span><span class="o">));</span>
<span class="c1">// Notify the adapter that an item was inserted at position 0</span>
<span class="n">adapter</span><span class="o">.</span><span class="na">notifyItemInserted</span><span
class="o">(</span><span class="mi">0</span><span class="o">);</span></code></pre>
            <p>Every time we want to add or remove items from the RecyclerView,
              we will need to explicitly inform to the adapter of the event.
              Unlike the ListView adapter, a RecyclerView adapter should not
              rely on <code>notifyDataSetChanged()</code> since the more
              granular actions should be used. See the <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html">API
                documentation</a> for more details.</p>
            <p>Also, if you are intending to update an existing list, make sure
              to get the current count of items before making any changes. For
              instance, a <code>getItemCount()</code> on the adapter should be
              called to record the first index that will be changed.</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// record this value before making any changes to the existing list</span>
<span class="kt">int</span> <span class="n">curSize</span> <span class="o">=</span> <span
class="n">adapter</span><span class="o">.</span><span class="na">getItemCount</span><span
class="o">();</span>

<span class="c1">// replace this line with wherever you get new records</span>
<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">newItems</span> <span class="o">=</span> <span
class="n">Contact</span><span class="o">.</span><span class="na">createContactsList</span><span
class="o">(</span><span class="mi">20</span><span class="o">);</span>

<span class="c1">// update the existing list</span>
<span class="n">contacts</span><span class="o">.</span><span class="na">addAll</span><span
class="o">(</span><span class="n">newItems</span><span class="o">);</span>
<span class="c1">// curSize should represent the first element that got added</span>
<span class="c1">// newItems.size() represents the itemCount</span>
<span class="n">adapter</span><span class="o">.</span><span class="na">notifyItemRangeInserted</span><span
class="o">(</span><span class="n">curSize</span><span class="o">,</span> <span class="n">newItems</span><span
class="o">.</span><span class="na">size</span><span class="o">());</span></code></pre>
            <h3><a class="anchor" id="diffing-larger-changes" href="https://guides.codepath.com/android/using-the-recyclerview#diffing-larger-changes"><i
                  class="fa fa-link"></i></a>Diffing Larger Changes</h3>
            <p>Often times there are cases when changes to your list are more
              complex (i.e. sorting an existing list) and it cannot be easily
              determined whether each row changed. In this cases, you would
              normally have to call <code>notifyDataSetChanged()</code> on the
              entire adapter to update the entire screen, which eliminates the
              ability to perform animation sequences to showcase what changed.</p>
            <p>A new <code>DiffUtil</code> class has been added in the v24.2.0
              of the support library to help compute the difference between the
              old and new list. This class uses the same algorithm used for
              computing line changes in source code (the <a href="https://en.wikipedia.org/wiki/Diff_utility">diff
                utility</a> program), so it usually fairly fast. It is
              recommended however for larger lists that you execute this
              computation in a background thread.</p>
            <p>To use the <code>DiffUtil</code> class, you need to first
              implement a class that implements the <code>DiffUtil.Callback</code>
              that accepts the old and new list:</p>
            <pre class="highlight" data-lang="Java"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContactDiffCallback</span> <span
class="kd">extends</span> <span class="n">DiffUtil</span><span class="o">.</span><span
class="na">Callback</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span
class="n">Contact</span><span class="o">&gt;</span> <span class="n">mOldList</span><span
class="o">;</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span
class="n">Contact</span><span class="o">&gt;</span> <span class="n">mNewList</span><span
class="o">;</span>

    <span class="kd">public</span> <span class="nf">ContactDiffCallback</span><span
class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">oldList</span><span class="o">,</span> <span
class="n">List</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">newList</span><span class="o">)</span> <span
class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mOldList</span> <span
class="o">=</span> <span class="n">oldList</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mNewList</span> <span
class="o">=</span> <span class="n">newList</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOldListSize</span><span
class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mOldList</span><span class="o">.</span><span
class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewListSize</span><span
class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mNewList</span><span class="o">.</span><span
class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areItemsTheSame</span><span
class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span
class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span
class="o">)</span> <span class="o">{</span>
        <span class="c1">// add a unique ID property on Contact and expose a getId() method</span>
        <span class="k">return</span> <span class="n">mOldList</span><span class="o">.</span><span
class="na">get</span><span class="o">(</span><span class="n">oldItemPosition</span><span
class="o">).</span><span class="na">getId</span><span class="o">()</span> <span
class="o">==</span> <span class="n">mNewList</span><span class="o">.</span><span
class="na">get</span><span class="o">(</span><span class="n">newItemPosition</span><span
class="o">).</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areContentsTheSame</span><span
class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span
class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span
class="o">)</span> <span class="o">{</span>
        <span class="n">Contact</span> <span class="n">oldContact</span> <span class="o">=</span> <span
class="n">mOldList</span><span class="o">.</span><span class="na">get</span><span
class="o">(</span><span class="n">oldItemPosition</span><span class="o">);</span>
        <span class="n">Contact</span> <span class="n">newContact</span> <span class="o">=</span> <span
class="n">mNewList</span><span class="o">.</span><span class="na">get</span><span
class="o">(</span><span class="n">newItemPosition</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">oldContact</span><span
class="o">.</span><span class="na">getName</span><span class="o">()</span> <span
class="o">==</span> <span class="n">newContact</span><span class="o">.</span><span
class="na">getName</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span
class="n">oldContact</span><span class="o">.</span><span class="na">isOnline</span><span
class="o">()</span> <span class="o">==</span> <span class="n">newContact</span><span
class="o">.</span><span class="na">isOnline</span><span class="o">())</span> <span
class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>Next, you would implement a <code>swapItems()</code> method on
              your adapter to perform the diff and then invoke <code>dispatchUpdates()</code>
              to notify the adapter whether the element was inserted, removed,
              moved, or changed:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">ContactsAdapter</span> <span class="kd">extends</span>
        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swapItems</span><span
class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Contact</span><span
class="o">&gt;</span> <span class="n">contacts</span><span class="o">)</span> <span
class="o">{</span>
        <span class="c1">// compute diffs</span>
        <span class="kd">final</span> <span class="n">ContactDiffCallback</span> <span
class="n">diffCallback</span> <span class="o">=</span> <span class="k">new</span> <span
class="n">ContactDiffCallback</span><span class="o">(</span><span class="k">this</span><span
class="o">.</span><span class="na">mContacts</span><span class="o">,</span> <span
class="n">contacts</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">DiffUtil</span><span class="o">.</span><span
class="na">DiffResult</span> <span class="n">diffResult</span> <span class="o">=</span> <span
class="n">DiffUtil</span><span class="o">.</span><span class="na">calculateDiff</span><span
class="o">(</span><span class="n">diffCallback</span><span class="o">);</span>

        <span class="c1">// clear contacts and add</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mContacts</span><span
class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mContacts</span><span
class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">contacts</span><span
class="o">);</span>

        <span class="n">diffResult</span><span class="o">.</span><span class="na">dispatchUpdatesTo</span><span
class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">// calls adapter's notify methods after diff is computed</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
            <p>For a working example, see this <a href="https://github.com/mrmike/DiffUtil-sample">sample
                code</a>.</p>
            <h3><a class="anchor" id="scrolling-to-new-items" href="https://guides.codepath.com/android/using-the-recyclerview#scrolling-to-new-items"><i
                  class="fa fa-link"></i></a>Scrolling to New Items</h3>
            <p>If we are inserting elements to the front of the list and wish to
              maintain the position at the top, we can set the scroll position
              to the 1st element:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">adapter</span><span
class="o">.</span><span class="na">notifyItemInserted</span><span class="o">(</span><span
class="mi">0</span><span class="o">);</span>
<span class="n">rvContacts</span><span class="o">.</span><span class="na">scrollToPosition</span><span
class="o">(</span><span class="mi">0</span><span class="o">);</span>   <span class="c1">// index 0 position</span></code></pre>
            <p>If we are adding items to the end and wish to scroll to the
              bottom as items are added, we can notify the adapter that an
              additional element has been added and can call <code>smoothScrollToPosition()</code>
              on the RecyclerView:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">adapter</span><span
class="o">.</span><span class="na">notifyItemInserted</span><span class="o">(</span><span
class="n">contacts</span><span class="o">.</span><span class="na">size</span><span
class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>  <span
class="c1">// contacts.size() - 1 is the last element position</span>
<span class="n">rvContacts</span><span class="o">.</span><span class="na">scrollToPosition</span><span
class="o">(</span><span class="n">mAdapter</span><span class="o">.</span><span class="na">getItemCount</span><span
class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span
class="c1">// update based on adapter</span></code></pre>
            <h3><a class="anchor" id="implementing-endless-scrolling" href="https://guides.codepath.com/android/using-the-recyclerview#implementing-endless-scrolling"><i
                  class="fa fa-link"></i></a>Implementing Endless Scrolling</h3>
            <p>To implement fetching more data and appending to the end of the
              list as the user scrolls towards the bottom, use the <code>addOnScrollListener()</code>
              from the <code>RecyclerView</code> and add an <code>onLoadMore</code>
              method leveraging the <a class="internal present" href="https://guides.codepath.com/android/Endless-Scrolling-with-AdapterViews-and-RecyclerView#implementing-with-recyclerview">EndlessScrollViewScrollListener</a>
              document in the guide.</p>
            <h2><a class="anchor" id="configuring-the-recyclerview" href="https://guides.codepath.com/android/using-the-recyclerview#configuring-the-recyclerview"><i
                  class="fa fa-link"></i></a>Configuring the RecyclerView</h2>
            <p>The <code>RecyclerView</code> is quite flexible and
              customizable. Several of the options available are shown below.</p>
            <h3><a class="anchor" id="performance" href="https://guides.codepath.com/android/using-the-recyclerview#performance"><i
                  class="fa fa-link"></i></a>Performance</h3>
            <p>We can also enable optimizations if the items are static and will
              not change for significantly smoother scrolling:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">recyclerView</span><span
class="o">.</span><span class="na">setHasFixedSize</span><span class="o">(</span><span
class="kc">true</span><span class="o">);</span></code></pre>
            <h3><a class="anchor" id="layouts" href="https://guides.codepath.com/android/using-the-recyclerview#layouts"><i
                  class="fa fa-link"></i></a>Layouts</h3>
            <p>The positioning of the items is configured using the layout
              manager. By default, we can choose between <code>LinearLayoutManager</code>,
              <code>GridLayoutManager</code>, and <code>StaggeredGridLayoutManager</code>.
              Linear displays items either vertically or horizontally:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// Setup layout manager for items with orientation</span>
<span class="c1">// Also supports `LinearLayoutManager.HORIZONTAL`</span>
<span class="n">LinearLayoutManager</span> <span class="n">layoutManager</span> <span
class="o">=</span> <span class="k">new</span> <span class="n">LinearLayoutManager</span><span
class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LinearLayoutManager</span><span
class="o">.</span><span class="na">VERTICAL</span><span class="o">,</span> <span
class="kc">false</span><span class="o">);</span>
<span class="c1">// Optionally customize the position you want to default scroll to</span>
<span class="n">layoutManager</span><span class="o">.</span><span class="na">scrollToPosition</span><span
class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="c1">// Attach layout manager to the RecyclerView</span>
<span class="n">recyclerView</span><span class="o">.</span><span class="na">setLayoutManager</span><span
class="o">(</span><span class="n">layoutManager</span><span class="o">);</span></code></pre>
            <p>Displaying items in a grid or staggered grid works similarly:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// First param is number of columns and second param is orientation i.e Vertical or Horizontal</span>
<span class="n">StaggeredGridLayoutManager</span> <span class="n">gridLayoutManager</span> <span
class="o">=</span>
    <span class="k">new</span> <span class="nf">StaggeredGridLayoutManager</span><span
class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">StaggeredGridLayoutManager</span><span
class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
<span class="c1">// Attach the layout manager to the recycler view</span>
<span class="n">recyclerView</span><span class="o">.</span><span class="na">setLayoutManager</span><span
class="o">(</span><span class="n">gridLayoutManager</span><span class="o">);</span></code></pre>
            <p>For example, a staggered grid might look like:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/AlANFgj.png"
                alt="Screenshot" width="300"></p>
            <p>We can build <a href="http://wiresareobsolete.com/2014/09/building-a-recyclerview-layoutmanager-part-1/">our
                own custom layout managers</a> as outlined there.</p>
            <h3><a class="anchor" id="decorations" href="https://guides.codepath.com/android/using-the-recyclerview#decorations"><i
                  class="fa fa-link"></i></a>Decorations</h3>
            <p>We can decorate the items using various decorators attached to
              the recyclerview such as the <a href="https://developer.android.com/reference/android/support/v7/widget/DividerItemDecoration.html">DividerItemDecoration</a>:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">RecyclerView</span><span
class="o">.</span><span class="na">ItemDecoration</span> <span class="n">itemDecoration</span> <span
class="o">=</span> <span class="k">new</span>
    <span class="n">DividerItemDecoration</span><span class="o">(</span><span class="k">this</span><span
class="o">,</span> <span class="n">DividerItemDecoration</span><span class="o">.</span><span
class="na">VERTICAL</span><span class="o">);</span>
<span class="n">recyclerView</span><span class="o">.</span><span class="na">addItemDecoration</span><span
class="o">(</span><span class="n">itemDecoration</span><span class="o">);</span></code></pre>
            <p>This decorator displays dividers between each item within the
              list as illustrated below:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/penvJxw.png"
                alt="Screenshot" width="400"></p>
            <h4><a class="anchor" id="grid-spacing-decorations" href="https://guides.codepath.com/android/using-the-recyclerview#grid-spacing-decorations"><i
                  class="fa fa-link"></i></a>Grid Spacing Decorations</h4>
            <p>Decorators can also be used for adding consistent spacing around
              items displayed in a grid layout or staggered grid. Copy over this
              <a href="https://gist.github.com/nesquena/db922669798eba3e3661">SpacesItemDecoration.java
                decorator</a> into your project and apply to a <code>RecyclerView</code>
              using the <code>addItemDecoration</code> method. Refer to <a href="http://blog.grafixartist.com/pinterest-masonry-layout-staggered-grid/">this
                staggered grid tutorial</a> for a more detailed outline.</p>
            <h3><a class="anchor" id="animators" href="https://guides.codepath.com/android/using-the-recyclerview#animators"><i
                  class="fa fa-link"></i></a>Animators</h3>
            <p>RecyclerView supports custom animations for items as they enter,
              move, or get deleted using <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html">ItemAnimator</a>.
              The default animation effects is defined by <a href="https://developer.android.com/reference/android/support/v7/widget/DefaultItemAnimator.html">DefaultItemAnimator</a>,
              and the complex implementation (see <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v7/recyclerview/src/android/support/v7/widget/DefaultItemAnimator.java">source
                code)</a> shows that the logic necessary to ensure that
              animation effects are performed in a specific sequence (remove,
              move, and add).</p>
            <p>Currently, the fastest way to implement animations with
              RecyclerView is to use third-party libraries. The <a href="https://github.com/wasabeef/recyclerview-animators">third-party
                recyclerview-animators library</a> contains a lot of animations
              that you can use without needing to build your own. Simply edit
              your <code>app/build.gradle</code>:</p>
            <pre class="highlight" data-lang="Groovy"><code><span class="n">repositories</span> <span
class="o">{</span>
    <span class="n">jcenter</span><span class="o">()</span>
<span class="o">}</span>

<span class="c1">//If you are using a RecyclerView 23.1.0 or higher.</span>
<span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">compile</span> <span class="s1">'jp.wasabeef:recyclerview-animators:2.2.3'</span>
<span class="o">}</span>

<span class="c1">//If you are using a RecyclerView 23.0.1 or below.</span>
<span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">compile</span> <span class="s1">'jp.wasabeef:recyclerview-animators:1.3.0'</span>
<span class="o">}</span></code></pre>
            <p>Next, we can use any of the defined animators to change the
              behavior of our RecyclerView:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">recyclerView</span><span
class="o">.</span><span class="na">setItemAnimator</span><span class="o">(</span><span
class="k">new</span> <span class="n">SlideInUpAnimator</span><span class="o">());</span></code></pre>
            <p>For example, here's scrolling through a list after customizing
              the animation:</p>
            <p><img src="https://i.imgur.com/v0VyQS8.gif" alt="Screenshot" width="300"></p>
            <p>For a further look into defining custom item animators, check out
              this <a href="https://hackmd.io/s/r1IEQ-jAl">custom RecyclerView
                item animation post</a>.</p>
            <h4><a class="anchor" id="new-itemanimator-interface" href="https://guides.codepath.com/android/using-the-recyclerview#new-itemanimator-interface"><i
                  class="fa fa-link"></i></a>New ItemAnimator interface</h4>
            <p>Starting in the <a href="https://developer.android.com/tools/support-library/index.html#revisions">support
                v23.1.0</a> library for <code>RecyclerView</code>, there is
              also a new interface for the <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#pubmethods">ItemAnimator</a>
              interface. The old interface has now been deprecated to <code>SimpleItemAnimator</code>
              . This library adds a <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemHolderInfo.html">ItemHolderInfo</a>
              class, which appears to be similar to the <a href="https://github.com/android/platform_frameworks_support/blob/master/v7/recyclerview/src/android/support/v7/widget/DefaultItemAnimator.java#L53-L63">MoveInfo</a>
              class defined by <code>DefaultItemAnimator</code> but used more
              generically to pass state information between animation transition
              states. It is likely that the next version of <code>DefaultItemAnimator</code>
              will be simplified to use this new class and revised interface.</p>
            <h3><a class="anchor" id="heterogeneous-views" href="https://guides.codepath.com/android/using-the-recyclerview#heterogeneous-views"><i
                  class="fa fa-link"></i></a>Heterogeneous Views</h3>
            <p>See <a class="internal present" href="https://guides.codepath.com/android/Heterogenous-Layouts-inside-RecyclerView">this
                guide</a> if you want to inflate multiple types of rows inside a
              single <code>RecyclerView</code>:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/HyOAOOu.png"
                alt="ss2" width="300"></p>
            <p>This is useful for feeds which contain various different types of
              items within a single list.</p>
            <h3><a class="anchor" id="handling-touch-events" href="https://guides.codepath.com/android/using-the-recyclerview#handling-touch-events"><i
                  class="fa fa-link"></i></a>Handling Touch Events</h3>
            <p>RecyclerView allows us to handle touch events with:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">recyclerView</span><span
class="o">.</span><span class="na">addOnItemTouchListener</span><span class="o">(</span><span
class="k">new</span> <span class="n">RecyclerView</span><span class="o">.</span><span
class="na">OnItemTouchListener</span><span class="o">()</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTouchEvent</span><span
class="o">(</span><span class="n">RecyclerView</span> <span class="n">recycler</span><span
class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span
class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle on touch events here</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span
class="o">(</span><span class="n">RecyclerView</span> <span class="n">recycler</span><span
class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span
class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">});</span></code></pre>
            <h3><a class="anchor" id="snap-to-center-effect" href="https://guides.codepath.com/android/using-the-recyclerview#snap-to-center-effect"><i
                  class="fa fa-link"></i></a>Snap to Center Effect</h3>
            <p>In certain cases, we might want a horizontal <code>RecyclerView</code>
              that allows the user to scroll through a list of items. As the
              user scrolls, we might want items to "snap to center" as they are
              revealed. Such as in this example:</p>
            <p><img src="https://i.imgur.com/D5crJK4.gif" width="300"></p>
            <h4><a class="anchor" id="linearsnaphelper" href="https://guides.codepath.com/android/using-the-recyclerview#linearsnaphelper"><i
                  class="fa fa-link"></i></a>LinearSnapHelper</h4>
            <p>To achieve this snapping to center effect as the user scrolls,
              starting with support library 24.2.0 version and greater, we can
              use the built-in <a href="https://developer.android.com/reference/android/support/v7/widget/LinearSnapHelper.html">LinearSnapHelper</a>
              as follows:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">SnapHelper</span> <span
class="n">snapHelper</span> <span class="o">=</span> <span class="k">new</span> <span
class="n">LinearSnapHelper</span><span class="o">();</span>
<span class="n">snapHelper</span><span class="o">.</span><span class="na">attachToRecyclerView</span><span
class="o">(</span><span class="n">recyclerView</span><span class="o">);</span></code></pre>
            <p>For more sophisticated snapping behavior, <a href="https://rubensousa.github.io/2016/08/recyclerviewsnap">read
                more about customizing these helpers</a> and <a href="https://github.com/rubensousa/RecyclerViewSnap/">review
                related sample code here</a>.</p>
            <h4><a class="anchor" id="snappyrecyclerview" href="https://guides.codepath.com/android/using-the-recyclerview#snappyrecyclerview"><i
                  class="fa fa-link"></i></a>SnappyRecyclerView</h4>
            <p>For a more manual approach, we can create a custom extension to <code>RecyclerView</code>
              called <code>SnappyRecyclerView</code> which will snap items to
              center as the user scrolls:</p>
            <ol>
              <li>Copy over the code from <a href="https://gist.github.com/nesquena/b26f9a253bbbb6a2e4890891e8a57eb9">SnappyRecyclerView.java</a>
                to your project.</li>
              <li>Configure your new <code>SnappyRecyclerView</code> with a
                horizontal <code>LinearLayoutManager</code>:</li>
            </ol>
            <pre class="highlight" data-lang="Java"><code><span class="n">LinearLayoutManager</span> <span
class="n">layoutManager</span> <span class="o">=</span> <span class="k">new</span> <span
class="n">LinearLayoutManager</span><span class="o">(</span><span class="k">this</span><span
class="o">,</span> <span class="n">LinearLayoutManager</span><span class="o">.</span><span
class="na">HORIZONTAL</span><span class="o">,</span> <span class="kc">false</span><span
class="o">);</span>
<span class="n">snappyRecyclerView</span><span class="o">.</span><span class="na">setLayoutManager</span><span
class="o">(</span><span class="n">layoutManager</span><span class="o">);</span></code></pre>
            <ol>
              <li>Attach your adapter to the <code>RecyclerView</code> to
                populate the data into the horizontal list as normal.</li>
              <li>You can access the currently "snapped" item position with <code>snappyRecyclerView.getFirstVisibleItemPosition()</code>.</li>
            </ol>
            <p>That's all, you should be set for a snap-to-center horizontal
              scrolling list!</p>
            <h3><a class="anchor" id="attaching-click-handlers-to-items" href="https://guides.codepath.com/android/using-the-recyclerview#attaching-click-handlers-to-items"><i
                  class="fa fa-link"></i></a>Attaching Click Handlers to Items</h3>
            <h4><a class="anchor" id="attaching-click-listeners-with-decorators"
                href="https://guides.codepath.com/android/using-the-recyclerview#attaching-click-listeners-with-decorators"><i
                  class="fa fa-link"></i></a>Attaching Click Listeners with
              Decorators</h4>
            <p>Then easiest solution for setting up item click handlers within a
              <code>RecyclerView</code> is to use a decorator class to manage
              the item click listener. With <a href="https://gist.github.com/nesquena/231e356f372f214c4fe6">this
                clever <code>ItemClickSupport</code> decorator</a>, attaching a
              click handler can be done with:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">ItemClickSupport</span><span
class="o">.</span><span class="na">addTo</span><span class="o">(</span><span class="n">mRecyclerView</span><span
class="o">).</span><span class="na">setOnItemClickListener</span><span class="o">(</span>
  <span class="k">new</span> <span class="n">ItemClickSupport</span><span class="o">.</span><span
class="na">OnItemClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClicked</span><span
class="o">(</span><span class="n">RecyclerView</span> <span class="n">recyclerView</span><span
class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span
class="o">,</span> <span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span
class="o">{</span>
          <span class="c1">// do it</span>
      <span class="o">}</span>
  <span class="o">}</span>
<span class="o">);</span></code></pre>
            <p>Under the covers, this is wrapping the interface pattern
              described in detail below. If you apply this code above, you <strong>don't
                need to any of the manual item click handling below</strong>.
              This technique was originally <a href="http://www.littlerobots.nl/blog/Handle-Android-RecyclerView-Clicks/">outlined
                in this article</a>.</p>
            <h4><a class="anchor" id="simple-click-handler-within-viewholder" href="https://guides.codepath.com/android/using-the-recyclerview#simple-click-handler-within-viewholder"><i
                  class="fa fa-link"></i></a>Simple Click Handler within
              ViewHolder</h4>
            <p>RecyclerView does not have special provisions for attaching click
              handlers to items unlike ListView which has the method <code>setOnItemClickListener</code>.
              To achieve a similar effect manually (instead of using the
              decorator utility above), we can attach click events within the <code>ViewHolder</code>
              inside our adapter:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">ContactsAdapter</span> <span class="kd">extends</span> <span
class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// Used to cache the views within the item layout for fast access</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span
class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span
class="na">ViewHolder</span> <span class="kd">implements</span> <span class="n">View</span><span
class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="n">TextView</span> <span class="n">tvName</span><span
class="o">;</span>
        <span class="kd">public</span> <span class="n">TextView</span> <span class="n">tvHometown</span><span
class="o">;</span>
        <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span
class="o">;</span>

        <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span
class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span
class="n">View</span> <span class="n">itemView</span><span class="o">)</span> <span
class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span
class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">tvName</span> <span
class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span
class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span
class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span
class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tvName</span><span
class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">tvHometown</span> <span
class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span
class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span
class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span
class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tvHometown</span><span
class="o">);</span>
            <span class="c1">// Store the context</span>
            <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span
class="o">=</span> <span class="n">context</span><span class="o">;</span>
            <span class="c1">// Attach a click listener to the entire row view</span>
            <span class="n">itemView</span><span class="o">.</span><span class="na">setOnClickListener</span><span
class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Handles the row being being clicked</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span
class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span
class="o">{</span>
            <span class="kt">int</span> <span class="n">position</span> <span class="o">=</span> <span
class="n">getAdapterPosition</span><span class="o">();</span> <span class="c1">// gets item position</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span
class="o">!=</span> <span class="n">RecyclerView</span><span class="o">.</span><span
class="na">NO_POSITION</span><span class="o">)</span> <span class="o">{</span> <span
class="c1">// Check if an item was deleted, but the user clicked it before the UI removed it</span>
                <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span
class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span
class="n">position</span><span class="o">);</span>
                <span class="c1">// We can access the data within the views</span>
                <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span
class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">tvName</span><span
class="o">.</span><span class="na">getText</span><span class="o">(),</span> <span
class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span
class="o">).</span><span class="na">show</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span></code></pre>
            <p>If we want the item to show a "selected" effect when pressed, we
              can set the <code>android:background</code> of <strong>the root
                layout for the row</strong> to <code>?android:attr/selectableItemBackground</code>:</p>
            <pre class="highlight" data-lang="XML"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span
class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:orientation=</span><span class="s">"horizontal"</span> <span
class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:background=</span><span class="s">"?android:attr/selectableItemBackground"</span><span
class="nt">&gt;</span>
  <span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span></code></pre>
            <p>This creates the following effect:</p>
            <p><img src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/olMUglF.gif"
                alt="Screenshot" width="400"></p>
            <h4><a class="anchor" id="attaching-click-handlers-using-listeners"
                href="https://guides.codepath.com/android/using-the-recyclerview#attaching-click-handlers-using-listeners"><i
                  class="fa fa-link"></i></a>Attaching Click Handlers using
              Listeners</h4>
            <p>In certain cases, you'd want to setup click handlers for views
              within the <code>RecyclerView</code> but define the click logic
              within the containing <code>Activity</code> or <code>Fragment</code>
              (i.e bubble up events from the adapter). To achieve this, <a class="internal present"
                href="https://guides.codepath.com/android/Creating-Custom-Listeners">create
                a custom listener</a> within the adapter and then fire the
              events upwards to an interface implementation defined within the
              parent:</p>
            <pre class="highlight" data-lang="Java"><code><span class="kd">public</span> <span
class="kd">class</span> <span class="nc">ContactsAdapter</span> <span class="kd">extends</span> <span
class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">&lt;</span><span class="n">ContactsAdapter</span><span class="o">.</span><span
class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// ...</span>

    <span class="cm">/***** Creating OnItemClickListener *****/</span>

    <span class="c1">// Define listener member variable</span>
    <span class="kd">private</span> <span class="n">OnItemClickListener</span> <span
class="n">listener</span><span class="o">;</span>
    <span class="c1">// Define the listener interface</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnItemClickListener</span> <span
class="o">{</span>
        <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span
class="n">View</span> <span class="n">itemView</span><span class="o">,</span> <span
class="kt">int</span> <span class="n">position</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// Define the method that allows the parent activity or fragment to define the listener</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOnItemClickListener</span><span
class="o">(</span><span class="n">OnItemClickListener</span> <span class="n">listener</span><span
class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">listener</span> <span
class="o">=</span> <span class="n">listener</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span
class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span
class="na">ViewHolder</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="n">TextView</span> <span class="n">tvName</span><span
class="o">;</span>
        <span class="kd">public</span> <span class="n">TextView</span> <span class="n">tvHometown</span><span
class="o">;</span>

        <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span
class="kd">final</span> <span class="n">View</span> <span class="n">itemView</span><span
class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span
class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">tvName</span> <span
class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span
class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span
class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span
class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tvName</span><span
class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">tvHometown</span> <span
class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span
class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span
class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span
class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tvHometown</span><span
class="o">);</span>
            <span class="c1">// Setup the click listener</span>
            <span class="n">itemView</span><span class="o">.</span><span class="na">setOnClickListener</span><span
class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span
class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span
class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span
class="n">v</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Triggers click upwards to the adapter on click</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">listener</span> <span
class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">position</span> <span
class="o">=</span> <span class="n">getAdapterPosition</span><span class="o">();</span>
                        <span class="k">if</span> <span class="o">(</span><span
class="n">position</span> <span class="o">!=</span> <span class="n">RecyclerView</span><span
class="o">.</span><span class="na">NO_POSITION</span><span class="o">)</span> <span
class="o">{</span>
                            <span class="n">listener</span><span class="o">.</span><span
class="na">onItemClick</span><span class="o">(</span><span class="n">itemView</span><span
class="o">,</span> <span class="n">position</span><span class="o">);</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">});</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span></code></pre>
            <p>Then we can attach a click handler to the adapter with:</p>
            <pre class="highlight" data-lang="Java"><code><span class="c1">// In the activity or fragment</span>
<span class="n">ContactsAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span
class="o">...;</span>
<span class="n">adapter</span><span class="o">.</span><span class="na">setOnItemClickListener</span><span
class="o">(</span><span class="k">new</span> <span class="n">ContactsAdapter</span><span
class="o">.</span><span class="na">OnItemClickListener</span><span class="o">()</span> <span
class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClick</span><span
class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span
class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span
class="o">{</span>
        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span
class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span
class="n">position</span><span class="o">).</span><span class="na">name</span><span
class="o">;</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span
class="o">(</span><span class="n">UserListActivity</span><span class="o">.</span><span
class="na">this</span><span class="o">,</span> <span class="n">name</span> <span
class="o">+</span> <span class="s">" was clicked!"</span><span class="o">,</span> <span
class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span
class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span></code></pre>
            <p>See <a href="http://stackoverflow.com/a/24933117/313399">this
                detailed stackoverflow post</a> which describes how to setup
              item-level click handlers when using <code>RecyclerView</code>.</p>
            <h2><a class="anchor" id="implementing-pull-to-refresh" href="https://guides.codepath.com/android/using-the-recyclerview#implementing-pull-to-refresh"><i
                  class="fa fa-link"></i></a>Implementing Pull to Refresh</h2>
            <p>The <code>SwipeRefreshLayout</code> should be used to refresh
              the contents of a <code>RecyclerView</code> via a vertical swipe
              gesture. See our detailed <a class="internal present" href="https://guides.codepath.com/android/Implementing-Pull-to-Refresh-Guide#recyclerview-with-swiperefreshlayout">RecyclerView
                with SwipeRefreshLayout</a> guide for a step-by-step tutorial on
              implementing pull to refresh.</p>
            <h2><a class="anchor" id="swipe-detection" href="https://guides.codepath.com/android/using-the-recyclerview#swipe-detection"><i
                  class="fa fa-link"></i></a>Swipe Detection</h2>
            <p>RecyclerView (since the release of v24.2.0) now has an <code>OnFlingListener</code>
              method that can be used to implement custom fling behavior.
              Download this <a href="https://gist.github.com/rogerhu/9e769149f9550c0a6ddb4987b94caee8">RecyclerViewSwipeListener</a>
              and you can handle custom swipe detection by adding this class to
              your RecyclerView:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">RecyclerView</span> <span
class="n">rvMyList</span><span class="o">;</span>

<span class="n">rvMyList</span><span class="o">.</span><span class="na">setOnFlingListener</span><span
class="o">(</span><span class="k">new</span> <span class="n">RecyclerViewSwipeListener</span><span
class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
   <span class="nd">@Override</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSwipeDown</span><span
class="o">()</span> <span class="o">{</span>
      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span
class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span
class="na">this</span><span class="o">,</span> <span class="s">"swipe down"</span><span
class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span
class="o">).</span><span class="na">show</span><span class="o">();</span>
   <span class="o">}</span>

   <span class="nd">@Override</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSwipeUp</span><span
class="o">()</span> <span class="o">{</span>
      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span
class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span
class="na">this</span><span class="o">,</span> <span class="s">"swipe up"</span><span
class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span
class="o">).</span><span class="na">show</span><span class="o">();</span>
   <span class="o">}</span>
<span class="o">});</span></code></pre>
            <h2><a class="anchor" id="using-uncover-library" href="https://guides.codepath.com/android/using-the-recyclerview#using-uncover-library"><i
                  class="fa fa-link"></i></a>Using Uncover library</h2>
            <p>If your use RecyclerView to implement 'infinite scrolling' over
              output of the web service, or some other resource that requires
              slow background calls with multiple items at once, it may be
              reasonable to try the <a href="https://github.com/andviane/google-books-android-viewer">Uncover
                library</a> from Maven central:</p>
            <pre class="highlight" data-lang="Java"><code><span class="n">dependencies</span> <span
class="o">{</span>
    <span class="n">compile</span> <span class="o">(</span><span class="err">'</span><span
class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span
class="na">andviane</span><span class="o">:</span><span class="nl">uncover:</span><span
class="mf">2.0</span><span class="o">.</span><span class="mi">1</span><span class="nd">@aar</span><span
class="err">'</span><span class="o">)</span>
<span class="o">}</span>    </code></pre>
            This library requires you to implement the primary data fetcher,
            mediating between fast single item UI-thread calls on model and slow
            chunked calls on the background on your fetcher:
            <pre class="highlight" data-lang="Java"><code>  <span class="kd">final</span> <span
class="n">RecyclerView</span> <span class="n">recyclerView</span> <span class="o">=</span> <span
class="o">(</span><span class="n">RecyclerView</span><span class="o">)</span> <span
class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span
class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">recycler</span><span
class="o">);</span>
  <span class="kd">final</span> <span class="n">UncoveringDataModel</span><span
class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span
class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span
class="n">UncoveringDataModel</span><span class="o">&lt;&gt;();</span>

  <span class="n">model</span><span class="o">.</span><span class="na">setPrimaryDataProvider</span><span
class="o">(</span><span class="k">new</span> <span class="n">PrimaryDataProvider</span><span
class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span
class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">PrimaryResponse</span> <span
class="nf">fetch</span><span class="o">(</span><span class="n">PrimaryRequest</span> <span
class="n">primaryRequest</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span
class="o">(</span><span class="s">"Fetch"</span><span class="o">,</span> <span class="s">"Service call to fetch items"</span> <span
class="o">+</span> 
        <span class="n">primaryRequest</span><span class="o">.</span><span class="na">getFrom</span><span
class="o">()</span> <span class="o">+</span> <span class="s">"- "</span> <span class="o">+</span> <span
class="n">primaryRequest</span><span class="o">.</span><span class="na">getTo</span><span
class="o">());</span>
      <span class="o">...</span>
      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span
class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span
class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span
class="n">String</span><span class="o">&gt;();</span>
      <span class="o">...</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">PrimaryResponse</span><span
class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span
class="n">data</span><span class="o">,</span> <span class="n">Integer</span><span
class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">});</span>

  <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span> <span
class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span
class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span
class="o">()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span
class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">model</span><span class="o">.</span><span
class="na">size</span><span class="o">();</span>
    <span class="o">...</span>
  <span class="o">};</span>
  <span class="n">model</span><span class="o">.</span><span class="na">install</span><span
class="o">(</span><span class="n">recyclerView</span><span class="o">,</span> <span
class="n">adapter</span><span class="o">);</span></code></pre>
            <p>The <code>model.install</code> glues model, view and adapter
              into working implementation. When the user swipes forward quickly,
              the library skips unneeded fetches of data between the new and old
              position, last requested data are fetched first, and any pending
              requests are dropped from the queue if they data are no longer
              visible. </p>
            <h2><a class="anchor" id="references" href="https://guides.codepath.com/android/using-the-recyclerview#references"><i
                  class="fa fa-link"></i></a>References</h2>
            <ul>
              <li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html">https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html</a></li>
              <li><a href="http://www.grokkingandroid.com/first-glance-androids-recyclerview/">http://www.grokkingandroid.com/first-glance-androids-recyclerview/</a></li>
              <li><a href="http://www.grokkingandroid.com/statelistdrawables-for-recyclerview-selection/">http://www.grokkingandroid.com/statelistdrawables-for-recyclerview-selection/</a></li>
              <li><a href="http://www.bignerdranch.com/blog/recyclerview-part-1-fundamentals-for-listview-experts/">http://www.bignerdranch.com/blog/recyclerview-part-1-fundamentals-for-listview-experts/</a></li>
              <li><a href="https://developer.android.com/training/material/lists-cards.html">https://developer.android.com/training/material/lists-cards.html</a></li>
              <li><a href="http://antonioleiva.com/recyclerview/">http://antonioleiva.com/recyclerview/</a></li>
              <li><a href="https://code.tutsplus.com/tutorials/getting-started-with-recyclerview-and-cardview-on-android--cms-23465">https://code.tutsplus.com/tutorials/getting-started-with-recyclerview-and-cardview-on-android--cms-23465</a></li>
              <li><a href="https://code.tutsplus.com/tutorials/introduction-to-the-new-lollipop-activity-transitions--cms-23711">https://code.tutsplus.com/tutorials/introduction-to-the-new-lollipop-activity-transitions--cms-23711</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <a href="https://github.com/codepath/android_guides/wiki/" class="visible-md visible-lg"><img
        style="position: fixed; bottom: 0; right: 0; border: 0;" src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/fork_me.png"
        alt="Fork me on GitHub"></a>
    <script src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/jquery.js"
type="text/javascript"></script>
    <script src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/jquery.absolutize.js"
type="text/javascript"></script>
    <script src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/bootstrap.min.js"
type="text/javascript"></script>
    <script src="./Using%20the%20RecyclerView%20_%20CodePath%20Android%20Cliffnotes_files/application.js"
type="text/javascript"></script>
  </body>
</html>
